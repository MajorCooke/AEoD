Class SkillCount : Inventory
{
	Default
	{
		Inventory.MaxAmount 5;
		Inventory.InterHubAmount 0;
	}
}

Class NightmareToken : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
		Inventory.InterHubAmount 1;
	}
}

Class HordeModeTest : Inventory
{	Default { Inventory.MaxAmount 1;	} }

Class ZombieHealthDivider : Inventory
{
	Default
	{
		Inventory.MaxAmount 6;
		Inventory.InterHubAmount 6;
	}
}
Class L4DDirectorSpawner : CustomInventory
{
	
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_SpawnItemEx("TheDirectorL4D",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_NOPOINTERS|SXF_SETTARGET);
		Stop;
	}
}

Class DirectorIsLeaving : Inventory
{	Default { Inventory.MaxAmount 1;	} }

Class SmallSpawnTokenTwo : Inventory
{
	Default
	{
		Inventory.MaxAmount 50;
		Inventory.InterHubAmount 50;
	}
}

Class TheDirectorL4D : DirectorBase
{
	
	int user_index;
	int user_nightmare;
	int user_mul;
	int user_bias[2];
	//Biasity (#/256) to jump to the medium and large spawning categories.
	//random(1,256) <= user_bias[#]
	//[0] = Medium spawn chance
	//[1] = Large spawn chance
	int user_cc[3];
	//Max number of children allowed active at any time.
	//Determined by script.
	//[0] = Small spawners
	//[1] = Medium spawners
	//[2] = Large spawners
	int user_cd[9];
	//Will be used by the script to determine current intensities.
	//[0] = Small cooldown min
	//[1] = Small cooldown max
	//[2] = Medium cooldown min
	//[3] = Medium cooldown max
	//[4] = Large cooldown min
	//[5] = Large cooldown max
	//[6] = Horde cooldown min
	//[7] = Horde cooldown max
	//[8] = Random amount to add to cooldowns from 0 to [8]
	int user_cooldown[5];
	//[0] = Normal cooldown
	//[1] = Exclusive small child countdown
	//[2] = Bool [0] on cooldown
	//[3] = Horde Cooldown
	int user_delay;
	int user_horde[3];
	//[0] = Is it available?
	//[1] = Timer
	//[2] = Cooldown
	int user_volume;
	
	Default
	{
		Monster;
		+NOFEAR
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+NORADIUSDMG
		+THRUACTORS
		+NEVERTARGET
		+NOTARGETSWITCH
		+CANTSEEK
		-FRIENDLY
		-COUNTKILL
		+NOCLIP
		+FLOORHUGGER
		+LOOKALLAROUND
		+NEVERFAST
		+NODAMAGE
		+NONSHOOTABLE
		-SHOOTABLE
		-NODROPOFF
		//+DROPOFF
		+NOTRIGGER
		-TELESTOMP
		+NOTELESTOMP
		+DONTMORPH
		+NOICEDEATH
		+DONTSPLASH
		+DONTCORPSE
		+DONTTHRUST
		TeleFogSourceType "";
		TeleFogDestType "";
		Radius 10;
		Height 20;
		Speed 20;
		Health 1000000;
		DamageFactor "Normal", 0;
		Species "Director";
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			
			bFRIENDLY = false;
			A_TransferPointer(Player1,DefPtr,DefPtr,TargetPtr,4);
			Thing_ChangeTID(0,0);
			//Default values
			user_mul = GetCvar("user_L4DIntensity");
			user_bias[0] = 6;	//#/256 chance to spawn medium
			user_bias[1] = 2;	//^ large
			user_cd[0] = 2500;	//Small cooldown min
			user_cd[1] = 5000;	//Small cooldown max
			user_cd[2] = 4000;	//Medium cooldown min
			user_cd[3] = 10000;	//Medium cooldown max
			user_cd[4] = 10000;	//Large cooldown min
			user_cd[5] = 20000;	//Large cooldown max
			user_cd[6] = 22200;	//Horde cooldown min
			user_cd[7] = 46500;	//Horde cooldown max
			user_cd[8] = random(50,175);
			user_cc[0] = 6; //small
			user_cc[1] = 4; //medium
			user_cc[2] = 2; //large
			A_TransferPointer(Player1,DefPtr,DefPtr,TargetPtr,4);
			A_SpawnItemEx("L4DPopulater",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_TRANSFERPOINTERS);
			
			if (user_mul < 666)	{	user_volume = 10;	}
			else				{	user_volume = 1;	}
			
			if (user_mul < 0)
			{	
				A_PrintBold("Multiplier was 0. This should not happen!\nReport this to the AEoD team immediately.",7.0);
				user_mul = 3;
			}
		}
		Goto Idle;
	Idle:
		TNT1 A 1 A_Look();
		Loop;
	See:
		TNT1 A 1 A_SetTics(GetCvar("DirectorDelay") * 35);
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",TargetPtr); //The original director has 60 seconds. This one is 30.
		TNT1 A 0 A_JumpIf(user_mul > 4,"EnableNightmare");
		TNT1 A 0 A_TakeInventory("NightmareToken",1,0,TargetPtr);
	SeeCont:
		TNT1 A 0 A_JumpIfInventory("PFirstTimeToken2",1,"FirstTime",TargetPtr);
		Goto Chasing;
	//Nightmare mode effectively causes regular zombies to spawn roughly twice as fast.
	EnableNightmare:
		TNT1 A 0 
		{
			user_nightmare = 1;
			A_SetInventory("NightmareToken",1,TargetPtr);
		}
		/*
		TNT1 A 0 A_SetUserArray(user_cd,0,18) //Small cooldown min
		TNT1 A 0 A_SetUserArray(user_cd,1,50) //Small cooldown max
		TNT1 A 0 A_SetUserArray(user_cd,2,150) //Medium cooldown min
		TNT1 A 0 A_SetUserArray(user_cd,3,337) //Medium cooldown max
		TNT1 A 0 A_SetUserArray(user_cd,4,225) //Large cooldown min
		TNT1 A 0 A_SetUserArray(user_cd,5,450) //Large cooldown max
		TNT1 A 0 A_SetUserArray(user_cd,6,273) //Horde cooldown min
		TNT1 A 0 A_SetUserArray(user_cd,7,788) //Horde cooldown max
		*/
		Goto SeeCont;
	FirstTime:
		TNT1 A 0 
		{
			A_TakeInventory("PFirstTimeToken2",1,0,TargetPtr);
			
			if (user_mul < 666)
				A_GiveInventory("SmallSpawnTokenTwo",(50-(user_mul*3)),TargetPtr);
		}
	Chasing:
		TNT1 A 0 
		{
			if (!target || !(target is "PlayerPawn"))
			{
				A_TransferPointer(Player1,DefPtr,DefPtr,TargetPtr,4);
			}
			
			for (user_index = 0; user_index < 4; user_index++)
			{
				if (user_cooldown[user_index] > 0)
				{	user_cooldown[user_index] -= (user_mul * random(7,10));	}
			}
		}
		
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",TargetPtr);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		TNT1 A 0 A_JumpIfInventory("HordeModeTest",1,"HordeModeForce",TargetPtr);
		TNT1 A 2 
		{
			A_UnsetShootable();
			A_Chase();
		}
		Loop;
	HordeModeForce:
		TNT1 A 0 
		{
			A_SetInventory("HordeModeTest",0,TargetPtr);
			for (user_index = 0; user_index < 4; user_index++)		//Wipe it clean for testing purposes.
			{
				user_cooldown[user_index] = 0;
			}
			user_horde[2] = 0;
		}
		Goto HordeMode;
	HordeMode:
		TNT1 A 0 A_JumpIfInventory("DirSmallChildCount",24,"Chasing"); //Don't go overwhelming on 666 intensities.
		TNT1 A 0 A_JumpIf(user_cooldown[3] >= 1,"Chasing");
		TNT1 A 0 
		{
			A_PlaySound("Director/Horde",5,(user_volume*0.1),0,ATTN_NONE);
			A_Stop();
			A_GiveInventory("HordeToken",1);
			A_GiveInventory("DirSmallChildCount",6);
			user_cooldown[3] = random(user_cd[6], user_cd[7]);
			
			for (int i = 0; i < 6; i++)
			{	
				A_SpawnItemEx("L4DSmallMobRunner",0,0,0,0,0,0,random(0,359),SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_TRANSFERPOINTERS,0,user_mul);
			}
		}
		TNT1 AAAAA 35;
		TNT1 A 0 A_TakeInventory("HordeToken",1);
		Goto ChanceCD;
	Missile:
		TNT1 A 0 A_Warp(AAPTR_TARGET,0,0,0,0,WARPF_NOCHECKPOSITION);
		TNT1 A 0 A_JumpIfInventory("SmallSpawnTokenTwo",1,"SmallMobShoot",TargetPtr);
		TNT1 A 0 A_JumpIf(user_mul < 666,"Missile2");
		TNT1 A 0 A_Jump(104,"MediumMobshoot");
		TNT1 A 0 A_Jump(64,"LargeMobshoot","HordeMode");
		Goto SmallMobShoot;
	Missile2:
		TNT1 A 0 A_JumpIf(random(1,2560) <= (user_bias[1]+(user_mul*20)),"LargeMobDecide");
		TNT1 A 0 A_JumpIf(random(1,2560) <= (user_bias[0]+(user_mul*60)),"MediumMobshoot");
		Goto SmallMobShoot;
	LargeMobDecide:
		TNT1 A 0 A_Jump(192,"HordeMode");
	LargeMobshoot:
		TNT1 A 0 A_JumpIfInventory("DirLargeChildCount",user_cc[2]+user_mul,"Chasing");
		TNT1 A 0 A_JumpIf(user_cooldown[2] > 0,"Chasing");
		TNT1 A 0 Thing_ChangeTID(0,32765);
		TNT1 A 1 A_SpawnItemEx("L4DLargeMobRunner",0,0,0,0,0,0,0,SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		TNT1 A 0 A_JumpIf(tid != 0, "FailedSpawn");
		TNT1 A 0 
		{
			A_GiveInventory("DirLargeChildCount",1);
			user_cooldown[2] = random(user_cd[4],user_cd[5]);
		}
		Goto ChanceCD;
	MediumMobshoot:
		TNT1 A 0 A_JumpIfInventory("DirMediumChildCount",user_cc[1]+user_mul,"Chasing");
		TNT1 A 0 A_JumpIf(user_cooldown[1] > 0,"Chasing");
		TNT1 A 0 Thing_ChangeTID(0,32765);
		TNT1 A 1 A_SpawnItemEx("L4DMediumMobRunner",0,0,0,0,0,0,0,SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		TNT1 A 0 A_JumpIf(tid != 0, "FailedSpawn");
		TNT1 A 0 
		{
			A_GiveInventory("DirMediumChildCount",1);
			user_cooldown[1] = random(user_cd[2],user_cd[3]);
		}
		Goto ChanceCD;
	SmallMobShoot:
		TNT1 A 0 A_JumpIfInventory("DirSmallChildCount",user_cc[0]+user_mul,"Chasing");
		TNT1 A 0 A_JumpIf(user_cooldown[0] > 0,"Chasing");
		TNT1 A 0 A_TakeInventory("SmallSpawnTokenTwo",1,0,TargetPtr);
		TNT1 A 0 Thing_ChangeTID(0,32765);
		TNT1 A 1 A_SpawnItemEx("L4DSmallMobRunner",0,0,0,0,0,0,0,SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		TNT1 A 0 A_JumpIf(tid != 0, "FailedSpawn");
		TNT1 A 0 
		{
			A_GiveInventory("DirSmallChildCount",1);
			user_cooldown[0] = random(user_cd[0],user_cd[1]);
		}
		Goto ChanceCD;
	FailedSpawn:
		TNT1 A 0 Thing_ChangeTID(0,0);
		Goto Chasing;
	ChanceCD:
		TNT1 A 0 A_Jump(250,"Chasing");
		TNT1 A 0 A_Jump(256,1,1,2,2,3,3,4);
		TNT1 AAAAAA 350;
		Goto Chasing;
	Frozen:
		TNT1 A 35 A_Stop();
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		Goto Chasing;
	Death:
		TNT1 A 35 A_RemoveChildren(1,RMVF_EVERYTHING,null,"Director");
		//TNT1 A 35 A_GiveInventory("DirectorIsLeaving",1)
		TNT1 A 0 A_TakeInventory("RemoveDirector",32767,0,AAPTR_TARGET);
		Stop;
	}
}

Class L4DPopulater : DirectorBase
{
	int user_wander;
	int user_populate;
	int user_cooldown;
	
	Default
	{
		-TELESTOMP
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+NORADIUSDMG
		+THRUACTORS
		+NEVERTARGET
		+NOTARGETSWITCH
		+CANTSEEK
		-FRIENDLY
		-COUNTKILL
		+LOOKALLAROUND
		+NEVERFAST
		+NODAMAGE
		+DONTSPLASH
		+NONSHOOTABLE
		-SHOOTABLE
		-NODROPOFF
		+DROPOFF
		+NOTRIGGER
		+NOBLOCKMAP
		+NOTELESTOMP
		+NOTONAUTOMAP
		+DONTTHRUST
		+DONTSPLASH
		+DONTCORPSE
		Radius 16;
		Height 64;
		Speed 20;
		RenderStyle "None";
		Species "Director";
	}
	States
	{
	Spawn:
		TNT1 A 0;
	Idle:
		TNT1 A 1 A_Look();
		Loop;
	See:
	Cooldown:
		TNT1 A 1 A_SetTics(35*random(1,10));
	Wandering:
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Removal",TargetPtr);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		TNT1 A 0 A_JumpIfInventory("DirectorIsLeaving",1,"Removal",TargetPtr);
		TNT1 A 1 A_Wander();
		TNT1 A 0 { user_wander++; }
		TNT1 A 0 A_JumpIf(user_wander>=900,"Populate");
		Loop;
	Populate:
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Removal",TargetPtr);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		TNT1 A 0 { user_wander = 0; }
		TNT1 A 0 A_JumpIfCloser(250,"NoPop");
		TNT1 A 0 A_JumpIfTargetInLOS("NoPop",360);
		TNT1 A 0 A_CheckSight(1);
		Goto NoPop;
		TNT1 A 1 A_SpawnItemEx("L4DCommonSpawner",random(-60,60),random(-60,60),0,0,0,0,random(0,359),SXF_TRANSFERPOINTERS,210);
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,random(15,150),0,0,random(0,359));
		TNT1 A 0 A_Jump(256,1,2,3,4,5,6,7,8,9,10);
		TNT1 AAAAAAAAAA 1 A_Wander();
		TNT1 A 0 { user_populate++; }
		TNT1 A 0 A_JumpIf(user_populate>=random(15,45),1);
		Loop;
		TNT1 A 0 { user_populate = 0; }
	MoveBack:
		TNT1 A 0 A_Warp(TargetPtr,0,0,0,0,WARPF_NOCHECKPOSITION);
		Goto Cooldown;
	NoPop:
		TNT1 A 0 A_Jump(256,1,2,3,4,5);
		TNT1 AAAAAAA 1 A_Wander();
		Goto Populate;
	Frozen:
		TNT1 A 0 A_JumpIfInventory("DirectorIsLeaving",1,"Removal",AAPTR_MASTER);
		TNT1 A 35 A_JumpIfInventory("RemoveDirector",1,"Removal",TargetPtr);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		Goto Wandering;
	Removal:
	Death:
		TNT1 A 0;
		Stop;
	}
}


Class L4DLargeMobRunner : DirectorBase
{
	int user_check[2];
	int user_t;
	Default
	{
		Monster;
		+THRUACTORS
		+FRIGHTENED
		//+NOFEAR
		+DONTTHRUST
		-SOLID
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		//+FLOORHUGGER
		+NORADIUSDMG
		+NOBLOOD
		-TELESTOMP
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+CANTLEAVEFLOORPIC
		+NOTRIGGER
		+NOTELESTOMP
		+DONTSPLASH
		+DONTCORPSE
		+NOBLOCKMAP
		+LAXTELEFRAGDMG
		+ALWAYSTELEFRAG
		+NOPAIN
		//MaxDropOffHeight 128
		//MaxStepHeight 128
		+DONTTHRUST
		Speed 14;
		Radius 60;
		Height 64;
		Health 1000000;
		DamageFactor "Normal", 0.0;
		DamageFactor "DirectorKiller", 32767;
		Species "Director";
	}
	States
	{
	Spawn:
		TNT1 A 0; //NoDelay A_JumpIfInventory("HordeToken",1,"Idle",TargetPtr)
	Idle:
		TNT1 A 0 { bFRIENDLY = false; }
		TNT1 AAAAA 1 A_Look();
		Loop;
	See:
	Wanderbout:
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",AAPTR_TARGET);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		TNT1 A 0 Thing_ChangeTID(0,0);
		TNT1 A 1 A_Chase();
		TNT1 AAAAAAAAA 1 A_Wander();
		
	//After a bit of time, allow them to leave the floor they are bound to.
		TNT1 A 0 
		{
			if (user_t >= 140)
				bCANTLEAVEFLOORPIC = false;
			else
				user_t++;
		
		
	//So here's the deal about A_CheckBlock. For situations like this, we only
	//care about being stuck on lines. So merely turn off NOBLOCKMAP for now
	//and enable it again afterwards.
		
			A_ChangeLinkFlags(false);
			bTHRUACTORS = false;
			if (A_CheckBlock("Stuck",CBF_DROPOFF))
			{	return Destroy();	}
			bTHRUACTORS = true;
			A_ChangeLinkFlags(true);
		}
	Mobmaking:
		//TNT1 A 0 A_JumpIfInventory("HordeToken",1,3,AAPTR_MASTER)
		TNT1 A 0 A_JumpIfCloser(250,"Wanderbout");
		TNT1 A 0 A_CheckSight(1);
		Goto Wanderbout;
		//TNT1 A 0 A_JumpIfInventory("HordeToken",1,1,AAPTR_MASTER)
		//Goto MobChance
	MobChance:
		TNT1 A 0 Thing_ChangeTID(0,32668);
		TNT1 A 0 A_Jump(128,2,3);
		TNT1 A 0 A_SpawnItemEx("L4DTank",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto Vanish;
		TNT1 A 0 A_SpawnItemEx("L4DWitchSitting",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto Vanish;
		TNT1 A 0 A_SpawnItemEx("L4DWitchWander",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto Vanish;
	Vanish:
		TNT1 A 0 A_JumpIf(tid!=0,"Wanderbout");
		TNT1 A 0 A_TakeFromSiblings("AEoDToken",100);
		TNT1 A 0 A_GiveToSiblings("AEoDToken",1);
		Goto VanishC;
	VanishHorde:
		TNT1 A 1;
		Goto End;
	VanishC:
		TNT1 A 0
		{
			A_SpawnItemEx("Megasphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,190);
			A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,160);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("AEoD6SpellSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-2);
			A_SpawnItemEx("L4DPackageSpawnerMMCheck",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,0);
			A_SpawnItemEx("L4DPackageSpawnerCheck",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("L4DPackageSpawnerMMCheck",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
		}
		Goto End;
	Frozen:
		TNT1 A 35 A_Stop();
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",AAPTR_TARGET);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		Goto See;
	Stuck:
		TNT1 A 0;
		Stop;
	Death:
	End:
		TNT1 A 0
		{
			A_SetSpecies("Nu");
			bNOINTERACTION = bNOTONAUTOMAP = bNOGRAVITY = true;
			A_SetTics(35 * 60 * 3);
			A_TakeInventory("DirLargeChildCount",1,0,AAPTR_MASTER);
		}
		TNT1 A 1 
		{
			if (!A_GiveToChildren("DropTimer",1))
			{	return Destroy();	}
			
		}
		Wait;
	}
}

Class L4DMediumMobRunner : DirectorBase
{
	int user_t;
	int user_dlimit;
	int user_limit;
	Default
	{
		Monster;
		+THRUACTORS
		+FRIGHTENED
		//+NOFEAR
		+DONTTHRUST
		-SOLID
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		//+FLOORHUGGER
		+NORADIUSDMG
		+NOBLOOD
		-TELESTOMP
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+CANTLEAVEFLOORPIC
		+NOTRIGGER
		+NOTELESTOMP
		+DONTSPLASH
		+DONTCORPSE
		+NOBLOCKMAP
		+LAXTELEFRAGDMG
		+ALWAYSTELEFRAG
		+NOPAIN
		//MaxDropOffHeight 128
		//MaxStepHeight 128
		+DONTTHRUST
		Speed 14;
		Health 1000000;
		DamageFactor "Normal", 0.0;
		DamageFactor "DirectorKiller", 32767;
		Species "Director";
		Radius 40;
		Height 64;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { user_limit = random(1,2); }
	Idle:
		TNT1 A 0 { bFRIENDLY = false; }
		TNT1 AAAAA 1 A_Look();
		Loop;
	See:
	Wanderbout:
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",AAPTR_TARGET);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		TNT1 A 1 A_Chase();
		TNT1 AAAAAAAAA 1 A_Wander();
		TNT1 A 0 
		{
			if (user_t >= 140)
				bCANTLEAVEFLOORPIC = false;
			else
				user_t++;
		
			A_ChangeLinkFlags(false);
			bTHRUACTORS = false;
			if (A_CheckBlock("Stuck",CBF_DROPOFF))
			{	return Destroy();	}
			bTHRUACTORS = true;
			A_ChangeLinkFlags(true);
		}
	Mobmaking:
		TNT1 A 0 A_JumpIfTargetInLOS("Wanderbout",360);
		TNT1 A 0 A_JumpIfCloser(250,"Wanderbout");
		TNT1 A 0 A_CheckSight(1);
		Goto Wanderbout;
	MobChance:
		TNT1 A 0 Thing_ChangeTID(0,32669);
		TNT1 A 0 A_Jump(256,1,2,3,4,5,6,"Wanderbout");
		TNT1 A 0 A_SpawnItemEx("L4DJockey",0,0,5,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("L4DBoomer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("L4DSmoker",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("L4DSpitter",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("L4DHunter",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("L4DCharger",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
	CountUp:
		TNT1 A 0 A_JumpIf(tid!=0,"Wanderbout");
		TNT1 A 0 A_TakeFromSiblings("AEoDToken",100); //Don't need overflow because someone's using sv_unlimited_pickup...
		TNT1 A 0 A_GiveToSiblings("AEoDToken",1);
		TNT1 A 0 { user_dlimit++; }
		TNT1 A 0 A_JumpIf(user_dlimit>=user_limit,"VanishC");
		Goto Wanderbout;
	Vanish:
		TNT1 A 0 A_JumpIf(CheckClass("TheDirectorL4D",AAPTR_MASTER,0),"VanishC");
	VanishHorde:
		TNT1 A 1;
		Goto End;
	VanishC:
		TNT1 A 0
		{
			A_SpawnItemEx("AEoD6SpellSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,254);
			A_SpawnItemEx("Megasphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-32);
			A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-64);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
			A_SpawnItemEx("L4DPackageSpawnerMMCheck",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR);
			A_SpawnItemEx("L4DPackageSpawnerCheck",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-64);
		}
		
		
		/*
		TNT1 A 0 A_DropItem("AEoD6SpellSpawner",1,1)
		TNT1 A 0 A_DropItem("Megasphere",1,32)
		TNT1 A 0 A_DropItem("SoulSphere",1,64)
		TNT1 AAA 0 A_DropItem("PowerupsSpawnerDirector",0,128)
		TNT1 A 0 A_DropItem("L4DPackageSpawnerMMCheck")
		TNT1 A 1 A_DropItem("L4DPackageSpawnerCheck",0,64)
		*/
		Goto End;
	Frozen:
		TNT1 A 35 A_Stop();
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",AAPTR_TARGET);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		Goto See;
	Stuck:
		TNT1 A 1 A_JumpIf(user_dlimit > 0, "VanishC");
		Goto End;
	Death:
	End:
		TNT1 A 1
		{
			A_SetSpecies("Nu");
			bNOINTERACTION = bNOTONAUTOMAP = bNOGRAVITY = true;
			A_SetTics(35 * 60 * 3);
			A_TakeInventory("DirMediumChildCount",1,0,AAPTR_MASTER);
		}
		TNT1 A 1 
		{
			if (!A_GiveToChildren("DropTimer",1))
			{	return Destroy();	}
		}
		Wait;
	}
}

Class L4DSmallMobRunner : DirectorBase
{
	int user_dlimit;
	int user_max;
	int user_check[2];
	int user_nightmare;
	int user_t;
	int user_horde;
	int user_tid;
	int user_ambush;
	int user_count;
	Vector3 prev;
	Default
	{
		Monster;
		+THRUACTORS
		+FRIGHTENED
		//+NOFEAR
		+DONTTHRUST
		-SOLID
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		//+FLOORHUGGER
		+NORADIUSDMG
		+NOBLOOD
		-TELESTOMP
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+CANTLEAVEFLOORPIC
		+NOTRIGGER
		+NOTELESTOMP
		+DONTSPLASH
		+DONTCORPSE
		+NOBLOCKMAP
		+LAXTELEFRAGDMG
		+ALWAYSTELEFRAG
		+NOPAIN
		//MaxDropOffHeight 128
		//MaxStepHeight 128
		+DONTTHRUST
		Speed 14;
		DamageFactor "Normal", 0.0;
		DamageFactor "DirectorKiller", 32767;
		Species "Director";
		Radius 20;
		Height 64;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			user_tid = tid;
			ChangeTID(0);
			if (master && master.CountInv("HordeToken"))
				user_horde = 1;
				
			user_max = (target && target.CountInv("NightmareToken")) ? random(10,25) : random(7,15);
		}
	Idle:
		TNT1 AAAAA 1 A_Look();
		Loop;
	See:
	Wanderbout:
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",TargetPtr);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		TNT1 A 0 A_JumpIf(user_horde == 1, "MobHorde");
		TNT1 AAAA 1 A_Chase(null,null);
		TNT1 A 0 A_JumpIfInventory("NightmareToken",1,4,TargetPtr);
		TNT1 AAAAA 1 A_Wander();
		TNT1 A 0 
		{
			if (user_t >= 140)
				bCANTLEAVEFLOORPIC = false;
			else
				user_t++;
		
			A_ChangeLinkFlags(false);
			bTHRUACTORS = false;
			if (A_CheckBlock("Stuck",CBF_DROPOFF))
			{	return Destroy();	}
			bTHRUACTORS = true;
			A_ChangeLinkFlags(true);
		}
	Mobmaking:
		TNT1 A 0 A_JumpIfTargetInLOS("Wanderbout",360);
		TNT1 A 0 A_JumpIfCloser(250,"Wanderbout");
		TNT1 A 0 A_CheckSight(1);
		Goto Wanderbout;
	MobChance:
		TNT1 A 0 Thing_ChangeTID(0,32670);
		TNT1 A 0 A_JumpIf(CheckClass("TheDirectorL4D",AAPTR_MASTER,1),"MobChanceNA");
		TNT1 A 0 A_SpawnItemEx("L4DCommonSpawner",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		//This is the only means to check if the spawn was successful or not.
		//If the TID is cleared, then continue onwards. If not, it failed and force
		//abortion so it can try again without penalty.
		TNT1 A 0 A_JumpIf(tid!=0,"Wanderbout");
		TNT1 AA 0 A_SpawnItemEx("L4DCommonSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,225);
		Goto CountUp;
	MobChanceNA:
		TNT1 A 0 A_SpawnItemEx("L4DCommonSpawnerNA",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		TNT1 A 0 A_JumpIf(tid!=0,"Wanderbout");
		TNT1 AA 0 A_SpawnItemEx("L4DCommonSpawnerNA",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,225);
		Goto CountUp;
	MobHorde:
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",AAPTR_TARGET);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		TNT1 A 0 A_JumpIfInventory("NightmareToken",1,"MobHordeNightmare",TargetPtr);
		
		TNT1 A 1 A_Chase(null, null);
		TNT1 A 1 A_Wander();
		TNT1 A 0
		{
			A_ChangeLinkFlags(false);
			bTHRUACTORS = false;
			if (A_CheckBlock("Stuck",CBF_DROPOFF) && prev == pos)
			{	return Destroy();	}
			bTHRUACTORS = true;
			A_ChangeLinkFlags(true);
			prev = pos;
		}
		TNT1 A 0 A_JumpIfTargetInLOS("MobHorde",360);
		TNT1 A 0 A_JumpIfCloser(250,"MobHorde");
		TNT1 AAAAAAAAAA 1 A_SpawnItemEx("L4DCommonSpawnerNA",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		TNT1 AAAAAAAAAA 1 A_SpawnItemEx("L4DCommonSpawnerNA",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
		TNT1 AAAAAAAAAA 1 A_SpawnItemEx("L4DCommonSpawnerNA",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,192);
		TNT1 A 0 
		{
			A_TakeFromSiblings("AEoDToken",100);
			A_GiveToSiblings("AEoDToken",1);
			A_DropItem("AEoD6SpellSpawner",0,1);
			if (target && target.CountInv("JokeToken"))
				A_DropItem("L4DJokeWeaponSpawner",0,224);
			else
				A_DropItem("L4DGeneralWeaponSpawner",0,224);
		}
	MHCont:
		TNT1 A 1
		{
			A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-26);
			
			for (user_count = 0; user_count < 7; user_count++)
			{	A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-224);	}
			for (user_count = 0; user_count < 3; user_count++)
			{	A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);	}
		}
		Goto End;
	MobHordeNightmare:
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",AAPTR_TARGET);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		TNT1 A 1 A_Chase(null, null);
		TNT1 A 1 A_Wander();
		TNT1 A 0 
		{
			A_ChangeLinkFlags(false);
			bTHRUACTORS = false;
			if (A_CheckBlock("Stuck",CBF_DROPOFF) && prev == pos)
			{	return Destroy();	}
			bTHRUACTORS = true;
			A_ChangeLinkFlags(true);
		}
		TNT1 A 0 A_JumpIfTargetInLOS("MobHordeNightmare",360);
		TNT1 A 0 A_JumpIfCloser(250,"MobHordeNightmare");
		TNT1 AAAAAAAAAAAAAAAAAAAA 1 A_SpawnItemEx("L4DCommonSpawnerNA",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		TNT1 AAAAAAAAAAAAAAAAAAAA 1 A_SpawnItemEx("L4DCommonSpawnerNA",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
		TNT1 AAAAAAAAAAAAAAAAAAAA 1 A_SpawnItemEx("L4DCommonSpawnerNA",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,192);
		TNT1 A 0 A_TakeFromSiblings("AEoDToken",100);
		TNT1 A 0 A_GiveToSiblings("AEoDToken",1);
		TNT1 A 0 A_JumpIf(user_tid == 666,"SpecialDrops");
		TNT1 A 0 A_DropItem("AEoD6SpellSpawner",1,1);
		TNT1 A 0 A_JumpIfInventory("JokeToken",1,2,TargetPtr);
		TNT1 A 0 A_DropItem("L4DGeneralWeaponSpawner",0,234);
		Goto MHNCont;
		TNT1 A 0 A_DropItem("L4DJokeWeaponSpawner",0,234);
		
		TNT1 A 0 
		{
			if (user_tid == 666)
				return ResolveState("SpecialDrops");
			A_TakeFromSiblings("AEoDToken",100);
			A_GiveToSiblings("AEoDToken",1);
			A_DropItem("AEoD6SpellSpawner",0,1);
			if (target && target.CountInv("JokeToken"))
				A_DropItem("L4DJokeWeaponSpawner",0,224);
			else
				A_DropItem("L4DGeneralWeaponSpawner",0,224);
			
			return ResolveState(null);
		}
	MHNCont:
		TNT1 A 1
		{
			A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			
			for (user_count = 0; user_count < 3; user_count++)
			{	A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);	}
		}
		Goto End;
	CountUp:
		TNT1 A 0 
		{
			A_TakeFromSiblings("AEoDToken",100);
			A_GiveToSiblings("AEoDToken",1);
			user_dlimit++;
			return A_JumpIf(user_dlimit>=user_max,"Vanish");
		}
		Goto Wanderbout;
	Vanish:
		TNT1 A 0 A_JumpIfInventory("NightmareToken",1,"VanishNightmare",TargetPtr);
		TNT1 A 1 A_JumpIf(CheckClass("TheDirectorL4D",AAPTR_MASTER,0),"Vanish2");
		//TNT1 A 0 //A_JumpIfInventory("DirectorMasterToken",1,1,AAPTR_MASTER)
		Goto End;
	Vanish2:
		TNT1 A 1
		{
			A_SpawnItemEx("L4DPackageSpawnerCheck",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,0);
			A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,230);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,190);
		}
		Goto End;
	VanishNightmare:
		TNT1 A 0 A_Jump(32,2);
		TNT1 A 1 A_JumpIf(CheckClass("TheDirectorL4D",AAPTR_MASTER,0),1);
		Goto End;
	VanishNightmare2:
		TNT1 A 1 
		{
			A_SpawnItemEx("L4DPackageSpawnerMMCheck",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,0);
			A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-66);
			A_SpawnItemEx("Megasphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-11);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-160);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-160);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-160);
		}
		Goto End;
	Frozen:
		TNT1 A 35 A_Stop();
		TNT1 A 0 
		{
			if (CountInv("RemoveDirector",AAPTR_TARGET) > 0)
			{	return ResolveState("End");	}
			if (!GetCvar("DirectorsEnabled"))
			{	return ResolveState("Frozen");	}
			
			return ResolveState("See");
		}
		Goto See;
	SpecialDrops:
		TNT1 A 1
		{
			A_SpawnItemEx("BeastlyHealthDropper",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,0);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("RandomWeaponPowerAmmoGive",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("RandomWeaponPowerAmmoGive",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			
			if (CountInv("JokeToken",TargetPtr) > 0)
			{	A_SpawnItemEx("L4DJokeWeaponSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-234);	}
			else
			{	A_SpawnItemEx("L4DGeneralWeaponSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-234);	}
		}
	Death:
	Stuck:
	End:
		TNT1 A 0
		{
			A_SetSpecies("Nu");
			bNOINTERACTION = bNOTONAUTOMAP = bNOGRAVITY = true;
			A_SetTics(35 * 60 * 3);
			A_TakeInventory("DirSmallChildCount",1,0,AAPTR_MASTER);
		}
		TNT1 A 1 
		{
			if (!A_GiveToChildren("DropTimer",1))
			{	return Destroy();	}
		}
		Wait;
	}
}

Class FadeSpawned : Inventory { }

Class DropTimer : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			// Only remove spawned items via the director. Exceptions
			// are weapons.
			if (!CheckClass("Inventory",DefPtr,true) ||
				A_CheckSpecies("Null","Permanent") ||
				CheckClass("AEoDWeaponPickup",DefPtr,true) ||
				CheckClass("AEoDWeaponBase",DefPtr,true) ||
				CheckClass("AEoDWeaponDrop",DefPtr,true) ||
				CheckClass("Weapon",DefPtr,true))
			{	return false;		}
			
			A_FadeOut(0.05,FTF_REMOVE);
			//A_SpawnItemEx("InventoryTimeRemover",0,0,0,0,0,0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
			return true;
		}
		Stop;
	}
}
/*
Class InventoryTimeRemover
{
	const int Minute = 35 * 60;
	const int TimeLimit = Minute * 3; //3 minutes.
	int user_time;
	+NOINTERACTION
	States
	{
	Spawn:
		TNT1 A 35 //Intentionally no delay or else it'd be one second off.
		{
			if (!target)
			{	return Destroy();	}
			else if (user_time < TimeLimit)
			{	user_time++;	}
			else
			{
				A_SetTics(1);
				A_GiveInventory("InvFader",1,TargetPtr);
			}
		}
		Wait;
	}
}
*/
Class InvFader : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_FadeOut(0.05,FTF_REMOVE);
		Stop;
	}
}

//There's a reason for this, because they can be picked up at any time unlike life seeds and such.
Class BeastlyHealthDropper : RandomSpawner
{
	Default
	{
		+NOTELESTOMP
		DropItem "FMegaSphere", 255, 50;
		DropItem "PentagramOfProtection", 255, 25;	//This shit gets insane after a few minutes.
		DropItem "MegaSphere", 255, 15;
	}
}

Class L4DPackageSpawnerMMCheck : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTELESTOMP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_JumpIfInventory("JokeToken",1,2,TargetPtr);
		TNT1 A 0 A_SpawnItemEx("L4DPackageSpawnerMM",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		Stop;
		TNT1 A 0 A_SpawnItemEx("L4DPackageSpawnerMMJ",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		Stop;
	}
}

Class L4DPackageSpawnerCheck : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTELESTOMP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_JumpIfInventory("JokeToken",1,2,TargetPtr);
		TNT1 A 0 A_SpawnItemEx("L4DPackageSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		Stop;
		TNT1 A 0 A_SpawnItemEx("L4DPackageSpawnerJ",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		Stop;
	}
}

Class L4DAmmoPack : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTELESTOMP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
			A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
			A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-94);
			A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-94);
		}
	HP:
		TNT1 AAAA 0 A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-32);
		Stop;
	}
}

Class L4DAmmoPackMM : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTELESTOMP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0
		{
			for (int i = 0; i < 2; i++)
			{
				A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
				A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
				A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-94);
				A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-94);
			}
		}
	HP:
		TNT1 AAAA 0 A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,32);
		Stop;
	}
}

Class L4DHealthPack : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTELESTOMP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_Jump(12,"MS");
		TNT1 A 0 A_Jump(24,"SS");
		TNT1 A 0 A_Jump(32,"Armor1","Armor2");
		TNT1 A 0 A_Jump(64,"HP2");
	HP1:		
		TNT1 AAAA 0 A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-192);
		Goto AmmoPile;
	HP2:
		TNT1 AAAAAAAAAA 0 A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-192);
		Goto AmmoPile;
	Armor1:
		TNT1 A 0 A_SpawnItemEx("L4DArmorSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0);
		TNT1 A 0 A_Jump(32,"SS");
		Goto AmmoPile;
	Armor2:
		TNT1 AAAAAAAAAA 0 A_SpawnItemEx("ArmorShardSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,192);
		TNT1 A 0 A_Jump(32,"SS");
		Goto AmmoPile;
	SS:
		TNT1 A 0 A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0);
		Goto AmmoPile;
	MS:
		TNT1 A 0 A_SpawnItemEx("MegaSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0);
		Goto AmmoPile;
	AmmoPile:
		TNT1 A 0 A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,48);
		TNT1 A 0 A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,48);
		TNT1 A 0 A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,24);
		TNT1 A 0 A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,24);
		Stop;
	}
}

Class L4DHealthPackMM : Actor
{
	int user_d;
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTELESTOMP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_Jump(12,"MS");
		TNT1 A 0 A_Jump(24,"SS");
		TNT1 A 0 A_Jump(32,"Armor1","Armor2");
		TNT1 A 0 A_Jump(64,"HP2");
	HP1:		
		TNT1 AAAAAAAA 0 A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
		Goto AmmoPile;
	HP2:
		TNT1 AAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
		Goto AmmoPile;
	Armor1:
		TNT1 A 0 A_SpawnItemEx("L4DArmorSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0);
		TNT1 A 0 A_Jump(48,"SS");
		Goto AmmoPile;
	Armor2:
		TNT1 AAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("ArmorShardSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
		TNT1 A 0 A_Jump(48,"SS");
		Goto AmmoPile;
	SS:
		TNT1 A 0 A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0);
		Goto AmmoPile;
	MS:
		TNT1 A 0 A_SpawnItemEx("MegaSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0);
		Goto AmmoPile;
	AmmoPile:
		TNT1 AA 0 A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-24);
		TNT1 AA 0 A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-24);
		TNT1 AA 0 A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-12);
		TNT1 AA 0 A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-12);
		Stop;
	}
}

Class L4DArmorSpawner : RandomSpawner
{
	Default
	{
		+NOTELESTOMP
		+NOTONAUTOMAP
		DropItem "VestArmor", 255, 10;
		DropItem "SmallArmor", 255, 8;
		DropItem "MediumArmor", 255, 4;
		DropItem "HeavyArmor", 255, 1;
	}
}

Class L4DPackageSpawner : RandomSpawner
{
	Default
	{
	//Each one of them have an extreme biasity towards their name.
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "L4DAmmoPack", 255, 28;
	DropItem "L4DHealthPack", 255, 14;
	DropItem "L4DGeneralWeaponSpawner", 255, 12;
	}
}

Class L4DPackageSpawnerMM : RandomSpawner
{
	Default
	{
	//Each one of them have an extreme biasity towards their name.
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "L4DAmmoPackMM", 255, 16;
	DropItem "L4DHealthPackMM", 255, 12;
	DropItem "L4DGeneralWeaponSpawner", 255, 14;
	}
}

Class L4DPackageSpawnerJ : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "L4DAmmoPack", 255, 28;
	DropItem "L4DHealthPack", 255, 14;
	DropItem "L4DJokeWeaponSpawner", 255, 12;
	}
}

Class L4DPackageSpawnerMMJ : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "L4DAmmoPackMM", 255, 16;
	DropItem "L4DHealthPackMM", 255, 12;
	DropItem "L4DJokeWeaponSpawner", 255, 12;
	}
}

Class HordeToken : Inventory
{	Default { Inventory.MaxAmount 6;	} }

Class L4DGeneralWeaponSpawner : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "Slot1Weps", 255, 16;
	DropItem "Slot2Weps", 255, 32;
	DropItem "Slot3Weps", 255, 32;
	DropItem "Slot4Weps", 255, 32;
	DropItem "Slot5Weps", 255, 24;
	DropItem "Slot6Weps", 255, 16;
	DropItem "Slot7Weps", 255, 12;
	DropItem "Slot8Weps", 255,  8;
	DropItem "Slot9Weps", 255,  4;
	DropItem "Slot0Weps", 255,  2;
	}
}

Class L4DJokeWeaponSpawner : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "Slot1Weps", 	255, 16;
	DropItem "Slot2WepsJ", 	255, 32;
	DropItem "Slot3Weps", 	255, 32;
	DropItem "Slot4WepsJ", 	255, 32;
	DropItem "Slot5Weps", 	255, 24;
	DropItem "Slot6WepsJ", 	255, 16;
	DropItem "Slot7Weps", 	255, 12;
	DropItem "Slot8WepsJ", 	255, 8;
	DropItem "Slot9WepsJ", 	255, 4;
	DropItem "Slot0Weps", 	255, 2;
	}
}

Class Slot1Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDProxDetonatorItem", 	255, 10;
	DropItem "AEoDTNTItem",				255, 10;
	DropItem "AEoDHandgrenadeItem",		255,5;
	DropItem "AEoDStickyMineItem",		255,5;
	DropItem "AEoDRemoteDetonatorItem",	255,5;
	DropItem "AEoDGlyphItem",			255,2;
	DropItem "AEoDBoneStaffItem",		255,2; //Added as of 6.03PR3. Why? Demon Orb. That is all.
	DropItem "AEoDJackBombItem",		255,1;
	}
}

Class Slot2Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDKatanaItem",			255, 10;
	DropItem "AEoDMedievalAxeItem",		255,8;
	DropItem "AEoDGauntletsItem",		255,8;
	DropItem "AEoDVorpalBladeItem",		255,8;
	DropItem "AEoDScytheItem",			255,8;
	DropItem "AEoDPainkillerItem",		255,4;
	DropItem "AEoDChainsawItem",		255,1;
	DropItem "AEoDStroggArmSawItem",	255,1;
	}
}

Class Slot2WepsJ : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDKatanaItem", 			255, 10;
	DropItem "AEoDMedievalAxeItem", 	255, 8;
	DropItem "AEoDGauntletsItem", 		255, 8;
	DropItem "AEoDVorpalBladeItem", 	255, 8;
	DropItem "AEoDSpyKnifeItem", 		255, 8;
	DropItem "AEoDScytheItem" ,			255, 8;
	DropItem "AEoDPainkillerItem", 		255, 4;
	DropItem "AEoDChainsawItem", 		255, 1;
	DropItem "AEoDStroggArmSawItem", 	255, 1;
	}
}

Class Slot3Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDBerettaItem",			255, 40;
	DropItem "AEoDBlasterItem",			255, 40;
	DropItem "AEoDGargoyleWandItem",	255, 40;
	DropItem "AEoDSPASShotgunItem",		255, 40;
	DropItem "AEoDMac10Item",			255, 40;
	DropItem "AEoDFlaregunItem",		255, 40;
	DropItem "AEoDMP5Item",				255, 20;
	DropItem "AEoDGoldenColtsItem", 	255, 20;
	DropItem "AEoDCrossbowItem", 		255, 20;
	DropItem "AEoDTekbowItem", 			255, 20;
	DropItem "AEODDesertEagleItem",		255, 20;
	DropItem "AEoDAssaultShotgunItem", 	255, 10;
	DropItem "AEoDShellShockerItem", 	255, 5;
	}
}

Class Slot4Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDBloodShotgunItem", 255, 70;
	DropItem "AEoDPKShotgunItem", 	 255, 70;
	DropItem "AEoDBioRifleItem", 	 255, 70;
	DropItem "AEoDCMRifleItem",		 255, 70;
	//DropItem "AEoDC14Item",		 255, 70;
	DropItem "AEoDCrystalGunItem", 	 255, 40;
	DropItem "AEoDVoodooDollItem", 	 255, 40;
	DropItem "AEoDBoltGunItem",		 255, 40;
	DropItem "AEoDCarbineItem",		 255, 40;
	DropItem "AEoDSerpentStaffItem", 255, 40;
	DropItem "AEoDRiotgunItem",		 255, 30;
	DropItem "AEoDDisruptorItem",	 255, 20;
	DropItem "AEoDCombatShotgunItem",255, 20;
	DropItem "AEoDDragonClawItem",	 255, 20;
	DropItem "AEoDShockRifleItem",	 255, 20;
	DropItem "AEoDHeadHunterItem",	 255,5;
	DropItem "AEoDDemonOrbItem",	 255,3;
	DropItem "AEoDAWPItem",			 255,1;
	}
}

Class Slot4WepsJ : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDBloodShotgunItem",  255, 70;
	DropItem "AEoDPKShotgunItem",	 255, 70;
	DropItem "AEoDBioRifleItem", 	 255, 70;
	DropItem "AEoDCMRifleItem", 		 255, 70;
	//DropItem "AEoDC14Item" 			 255, 70;
	DropItem "AEoDCrystalGunItem", 	 255, 40;
	DropItem "AEoDVoodooDollItem", 	 255, 40;
	DropItem "AEoDBoltGunItem",		 255, 40;
	DropItem "AEoDCarbineItem",		 255, 40;
	DropItem "AEoDSerpentStaffItem", 255, 40;
	DropItem "AEoDRiotgunItem",		 255, 30;
	DropItem "AEoDBisonItem",		 255, 20;
	DropItem "AEoDDisruptorItem",	 255, 20;
	DropItem "AEoDCombatShotgunItem", 255, 20;
	DropItem "AEoDDragonClawItem",	 255, 20;
	DropItem "AEoDShockRifleItem",	 255, 20;
	DropItem "AEoDHeadHunterItem",	 255,5;
	DropItem "AEoDDemonOrbItem",	 255,3;
	DropItem "AEoDAWPItem",			 255,1;
	}
}

Class Slot5Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDPlasmaRifleItem",		255, 100;
	DropItem "AEoDFreezethrowerItem",	255, 100;
	DropItem "AEoDHyperBlasterItem",	255, 100;
	DropItem "AEoDMinigunItem",			255, 100;
	DropItem "AEoDIceStormRodItem",		255,80;
	DropItem "AEoDDemonStaffItem",		255,80;
	DropItem "AEoDGaussGunItem",		255,80;
	DropItem "AEoDHornetGunItem",		255,80;
	DropItem "AEoDSkullRodItem",		255,80;
	DropItem "AEoDLasergunItem",		255,50;
	DropItem "AEoDFlamethrowerItem",	255,40;
	DropItem "AEoDPeaceMakerItem",		255,40;
	DropItem "AEoDNailGunItem",			255,40;
	DropItem "AEoDNailgunMK2Item",		255,40;
	DropItem "AEoDWyvernHeartItem",		255, 5;
	}
}

Class Slot6Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDGrenadeLauncherItem",		255, 150;
	DropItem "AEoDRocketLauncherItem",		255, 150;
	DropItem "AEoDMissileLauncherItem",		255, 150;
	DropItem "AEoDPMFLayerItem",			255, 150;
	DropItem "AEoDMeteoriteRodItem",		255, 150;
	DropItem "AEoDFireStormSpellItem",		255,80;
	DropItem "AEoDLightningRodItem",		255,80;
	DropItem "AEoDScreamerItem",			255,80;
	DropItem "AEoDRazorItem",				255,50;
	DropItem "AEoDScarabStaffItem",			255,20;
	DropItem "AEoDHowitzerItem",			255, 5;
	DropItem "AEoDEnlightenmentStaffItem",	255, 5;
	DropItem "AEoDWarAxeItem",				255, 2;
	}
}

Class Slot6WepsJ : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDGrenadeLauncherItem",		255, 150;
	DropItem "AEoDRocketLauncherItem",		255, 150;
	DropItem "AEoDMissileLauncherItem",		255, 150;
	DropItem "AEoDPMFLayerItem",			255, 150;
	DropItem "AEoDMeteoriteRodItem",		255, 150;
	DropItem "AEoDCowManglerItem",			255,80;
	DropItem "AEoDFireStormSpellItem",		255,80;
	DropItem "AEoDLightningRodItem",		255,80;
	DropItem "AEoDScreamerItem",			255,80;
	DropItem "AEoDRazorItem",				255,50;
	DropItem "AEoDScarabStaffItem",			255,20;
	DropItem "AEoDHowitzerItem",			255, 5;
	DropItem "AEoDEnlightenmentStaffItem",	255, 5;
	DropItem "AEoDWarAxeItem",				255, 2;
	}
}

Class Slot7Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDPulsegunItem",			255, 100;
	DropItem "AEoDEidechsenesserItem",		255, 100;
	DropItem "AEoDThunderBoltItem",			255, 100;
	DropItem "AEoDPrismaCannonItem",		255, 100;
	DropItem "AEoDElectroDriverItem",		255, 100;
	DropItem "AEoDTeslaCannonItem",			255, 100;
	DropItem "AEoDSuperShotgunItem",		255, 100;
	DropItem "AEoDIceWandItem",				255,50;
	DropItem "AEoDIncineratorItem",			255,50;
	DropItem "AEoDDevastatorItem",			255,50;
	DropItem "AEoDFragLauncherItem",		255,50;
	DropItem "AEoDRipperGunItem",			255,50;
	DropItem "AEoDConcussionLauncherItem",	255,50;
	DropItem "AEoDPlutoniumCannonItem",		255,50;
	DropItem "AEoDLifeLeechItem",			255,30;
	DropItem "AEoDGuardianHeadItem",		255,30;
	DropItem "AEoDRaptorItem",				255,20;
	DropItem "AEoDHailStormItem",			255,20;
	DropItem "AEoDVulcanCannonItem",		255,20;
	DropItem "AEoDPerforatorItem",			255, 5;
	DropItem "AEoDArbalestItem",			255, 1;
	}
}

Class Slot8Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDMindBlowerItem",		 255, 150;
	DropItem "AEoDStakeGunItem",		 255, 150;
	DropItem "AEoDPulseCannonItem",		 255, 150;
	DropItem "AEoDFlakCannonItem",		 255, 100;
	DropItem "AEoDRailGunItem",			 255, 100;
	DropItem "AEoDBoneShotgunItem",		 255,50;
	DropItem "AEoDPKSMGItem",			 255,50;
	DropItem "AEoDIonCannonItem",		 255,50;
	DropItem "AEoDHEGrenadeLauncherItem",255,50;
	DropItem "AEoDPhalanxItem",			 255,50;
	DropItem "AEoDBoneDusterItem",		 255,50;
	DropItem "AEoDSniperRailgunItem",	 255,50;
	DropItem "AEoDLichStaffItem",		 255,50;
	DropItem "AEoDMorserLauncherItem",	 255,50;
	DropItem "AEoDFlailGunItem",		 255,50;
	DropItem "AEoDDsparilStaffItem",	 255,30;
	DropItem "AEoDDeathRayItem",		 255,30;
	DropItem "AEoDNapalmLauncherItem",	 255,30;
	DropItem "AEoDIncendiaryItem",		 255,30;
	DropItem "AEoDTomeOfSetItem",		 255,20;
	DropItem "AEoDRavenStaffItem",		 255,10;
	DropItem "AEoDShredderStaffItem",	 255,10;
	}
}

Class Slot8WepsJ : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDMindBlowerItem",			255, 150;
	DropItem "AEoDStakeGunItem",			255, 150;
	DropItem "AEoDPulseCannonItem",			255, 150;
	DropItem "AEoDFlakCannonItem",			255, 100;
	DropItem "AEoDRailGunItem",				255, 100;
	DropItem "AEoDGutFlingerItem",			255,80;
	DropItem "AEoDBoneShotgunItem",			255,50;
	DropItem "AEoDPKSMGItem",				255,50;
	DropItem "AEoDIonCannonItem",			255,50;
	DropItem "AEoDHEGrenadeLauncherItem",	255,50;
	DropItem "AEoDPhalanxItem",				255,50;
	DropItem "AEoDBoneDusterItem",			255,50;
	DropItem "AEoDSniperRailgunItem",		255,50;
	DropItem "AEoDLichStaffItem",			255,50;
	DropItem "AEoDMorserLauncherItem",		255,50;
	DropItem "AEoDFlailGunItem",			255,50;
	DropItem "AEoDDsparilStaffItem",		255,30;
	DropItem "AEoDDeathRayItem",			255,30;
	DropItem "AEoDNapalmLauncherItem",		255,30;
	DropItem "AEoDIncendiaryItem",			255,30;
	DropItem "AEoDTomeOfSetItem",			255,20;
	DropItem "AEoDRavenStaffItem",			255,10;
	DropItem "AEoDShredderStaffItem",		255,10;
	}
}

Class Slot9Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDSoulReaverItem",		255, 100;
	DropItem "AEoDRailGunPrototypeItem", 255, 100;
	DropItem "AEoDHERocketLauncherItem", 255, 100;
	DropItem "AEoDPrototypeItem",		255,50;
	DropItem "AEoDNecrossbowItem",		255,50;
	DropItem "AEoDSoulleechItem",		255,50;
	DropItem "AEoDProteusDynamoItem",	255,25;
	DropItem "AEoDPhotonCannonItem",	255,25;
	DropItem "AEoDHellCoreItem",		255,12;
	DropItem "AEoDHellRootItem",		255,12;
	DropItem "AEoDBouncerItem",			255,12;
	DropItem "AEoDWraithVergeItem",		255, 6;
	DropItem "AEoDDrakanItem",			255, 6;
	DropItem "AEoDBloodScourgeItem",	255, 6;
	DropItem "AEoDCrawlerItem",			255, 6;
	DropItem "AEoDGluonGunItem",		255, 6;
	DropItem "AEoDTempestStaffItem",	255, 3;
	}
}

Class Slot9WepsJ : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDSoulReaverItem",		255, 100;
	DropItem "AEoDRailGunPrototypeItem", 255, 100;
	DropItem "AEoDHERocketLauncherItem", 255, 100;
	DropItem "AEoDPopcornGunItem",		255,50;
	DropItem "AEoDPrototypeItem",		255,50;
	DropItem "AEoDNecrossbowItem",		255,50;
	DropItem "AEoDSoulleechItem",		255,50;
	DropItem "AEoDProteusDynamoItem",	255,25;
	DropItem "AEoDPhotonCannonItem",	255,25;
	DropItem "AEoDHellCoreItem",		255,12;
	DropItem "AEoDHellRootItem",		255,12;
	DropItem "AEoDBouncerItem",			255,12;
	DropItem "AEoDWraithVergeItem",		255, 6;
	DropItem "AEoDDrakanItem",			255, 6;
	DropItem "AEoDBloodScourgeItem",	255, 6;
	DropItem "AEoDCrawlerItem",			255, 6;
	DropItem "AEoDGluonGunItem",		255, 6;
	DropItem "AEoDTempestStaffItem",	255, 3;
	}
}

Class Slot0Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDPenetratorItem",		255, 32;
	DropItem "AEoDBFG9000Item",			255, 24;
	DropItem "AEoDRedeemerItem",		255, 16;
	DropItem "AEoDSoulReaperItem",		255,8;
	DropItem "AEoDDarkMatterGunItem",	255,8;
	DropItem "AEoDFusionCannonItem",	255,8;
	DropItem "AEoDQSGItem",				255,8;
	DropItem "AEoDApocalypseItem",		255,2;
	DropItem "AEoDNovaItem",			255,2;
	DropItem "AEoDVolcanoCannonItem",	255,2;
	DropItem "AEoDDarkFlameStaffItem",	255,2;
	DropItem "AEoDInfernoItem",			255,2;
	DropItem "AEoDDeathsHandItem",		255,1;
	DropItem "AEoDHandOfGodItem",		255,1;
	}
}
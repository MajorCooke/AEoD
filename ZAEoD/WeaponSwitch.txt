
// Because GZDoom crashes with trying to do array[0].arrayAccessor[1].etc...
// I've found the need to copy most of the internal functions over.
Class AEoDWeaponContainer : Object play
{
	Array<AEoDWeaponBase> Weapons;

	void 	Init()		{	Weapons.Clear();	}
	void 	Clear()		{	Weapons.Clear();	}
	uint 	GetSize() 	{	return Weapons.Size(); }
	AEoDWeaponBase Get(uint pos)
	{
		return (pos > 0 && pos < Weapons.Size()) ? Weapons[pos] : null;
	}
	
	uint Find(AEoDWeaponBase who)		
	{
		return (who) ? Weapons.Find(who) : Weapons.Size();
	}
	
	void Delete(uint index, int deletecount = 1)
	{
		Weapons.Delete(index, deletecount);
	}
	
	void Insert(uint index, AEoDWeaponBase item)
	{
		Weapons.Insert(index, item);	
	}
	
	uint Push(AEoDWeaponBase item)
	{
		return Weapons.Push(item);
	}
	
	// 
	uint, uint GetCaps()
	{
		int Hi = -1, Lo = Int.Max;
		
		if (Weapons.Size() < 1)	
			return -1, -1;
			
		for (int i = 0; i < Weapons.Size(); i++)
		{
			if (Weapons[i])
			{
				int dex = Weapons[i].GetModIndex();
				Hi = Max(Hi, dex);
				Lo = Min(Lo, dex);
			}
		}
		return Hi, Lo;
	}
	
	AEoDWeaponBase GetSpecific(uint Index)
	{		
		if (Weapons.Size() < 1)		return null;
		
		for (int i = 0; i <= Weapons.Size(); i++)
		{
			if (Weapons[i].GetModIndex() == Index)
				return Weapons[i];
		}
		return null;
	}
}

//==============================================================================
// AEoDWeaponIndexer
// 
// This royal pain in my ass (and life saver) essentially acts as a 3D array
// manager due to GZDoom being completely unable to handle dynamic arrays
// inside of dynamic arrays. It just crashes on parsing. So it does all the
// dirty work when needed because I grew tired of trying to sort shit myself.
//==============================================================================

Class AEoDWeaponIndexer : Object play
{
	const Size = 11;
	AEoDWeaponContainer Base[Size];
	
	void Init()
	{
		for (int i = 0; i < Size; i++)
		{
			Base[i] = new("AEoDWeaponContainer");
			Base[i].Init();
		}
	}
	
	override void OnDestroy()
	{
		for (int i = 0; i < Size; i++)
			if (Base[i])	Base[i].Destroy();
		Super.OnDestroy();
	}
	
	bool CheckRange(uint Slot) const	{	return (Slot > 0 && Slot < Size);	}
	
	void ClearAt(int Slot = -1)
	{
		if (!CheckRange(Slot))
		{
			for (int i = 0; i < Size; i++)
				Base[i].Clear();
		}
		else	Base[Slot].Clear();
	}
	void InsertAt(uint Slot, uint index, AEoDWeaponBase item)
	{
		if (!item || !CheckRange(Slot))	return;
		
		Base[Slot].Insert(index, item);
	}
	
	void PushAt(uint Slot, AEoDWeaponBase item)
	{
		if (!CheckRange(Slot))	return;
		
		Base[Slot].Push(item);
	}
	void DeleteAt(uint Slot, uint index, int deletecount = 1)
	{
		if (!CheckRange(Slot))	return;
		
		Base[Slot].Delete(index, deletecount);
	}
	uint, uint FindWeaponAt(uint Slot, AEoDWeaponBase item)
	{
		if (CheckRange(Slot))
		{
			int index = Base[Slot].Find(item);
			if (index == Base[Slot].GetSize())	
				return -1, -1;
			return Slot, index;
		}
		for (Slot = 0; Slot < Size; Slot++)
		{
			int index = Base[Slot].Find(item);
			if (index != Base[Slot].GetSize())
				return Slot, index;
		}
		return -1, -1;
	}
	
	AEoDWeaponBase FindNextWeapon(bool prev, uint Slot, uint Index)
	{
		AEoDWeaponBase Pointer;
		int CurSlot = Slot, CurIndex = Index + 1, SlotsChecked = 0;
		int Direction = (prev) ? -1 : 1;
		do
		{
			int hi, lo;
			[hi, lo] = Base[Slot].GetCaps();
			if (prev)
			{
				if (hi == -1 || lo == -1 || CurIndex < lo)
				{
					SlotsChecked++;
					CurIndex = hi;
					CurSlot--;
					if (CurSlot < 1)
						CurSlot = 10;
				}
			}
			else
			{
				if (hi == -1 || lo == -1 || CurIndex > hi)
				{
					SlotsChecked++;
					CurIndex = 1;
					CurSlot++;
					if (CurSlot >= Size)
						CurSlot = 1;
				}
			}
			
			Pointer = Base[Slot].GetSpecific(CurIndex);

			if (Pointer)
			{
				// Insert a bunch of weapon checks here.
				return Pointer;
			}
			CurIndex += Direction;
			
		}	while ((CurSlot != Slot || CurIndex != Index) && SlotsChecked < 10)
		return null;
	}
	
	AEoDWeaponBase FindSlotWeapon(uint Slot)
	{
		AEoDWeaponBase Pointer;
		
		int hi, lo;
		[hi, lo] = Base[Slot].GetCaps();
		if (hi == -1 || lo == -1)
			return null;
		
		int Start = 1;
		int CurIndex = Start;
		
		do
		{
			Pointer = Base[Slot].GetSpecific(CurIndex);
			
			if (Pointer)
			{
				return Pointer;
			}
			
			CurIndex++;
			if (CurIndex > hi || CurIndex < 1)
				CurIndex = Start;
			
		}	while (CurIndex != Start);
		return null;
	}
}

Class AEoDWeaponIdentifier : Object play
{
	enum EInstruction
	{
		Ins_SetSlot,
		Ins_SetNext,
		Ins_SetPrev
	};
	int Instruction;
	PlayerInfo plr;
	int CurrentSlot, CurrentIndex, NextSlot, NextIndex;
	Array<String> CurrentWeapons, NextWeapons;
	Array<Int> CurrentPositions, NextPositions;
	String CurrentWeapon;
	AEoDWeaponIndexer Base;
	
	override void OnDestroy()
	{
		if (Base)	Base.Destroy();
		Super.OnDestroy();
	}
	
	// First off, fill the appropriate arrays with the current weapon slot data.
	// Find the name of its cvar and check if it's at the beginning or end.
	// If repeat is false, get the next desired weapon's slot.
	Weapon GetNextWeapon(PlayerInfo player, int command, int DesiredSlot = -1)
	{
		if (!player || command < 0 || command > 2)	return null;
		plr = player;
		DesiredSlot %= 10;
		if (DesiredSlot == 0)	DesiredSlot = 10;
		Instruction = command;
		CurrentSlot = CurrentIndex = 0;
		// Get the current weapon and find its slot.
		// Then gather the list of cvars and find its position.
		let wep = AEoDWeaponBase(player.ReadyWeapon);
		if (wep)
		{
			Class<Weapon> check = wep.GetClass();
			bool found;
			
			if (check)
			{	
				[found, CurrentSlot, CurrentIndex] = player.weapons.LocateWeapon(check);
				CurrentIndex = wep.GetModIndex();	// Ignore the real index. Get the mod index instead.
			}
		}
		else if (command == Ins_SetNext || command == Ins_SetPrev)
		{
			// Special case: In the event the player doesn't have a weapon up,
			// hijack the command to be a direct slot instead.
			if (DesiredSlot < 0)
			{
				DesiredSlot = 10;
				command = Ins_SetSlot;
			}
		}
		Base = new("AEoDWeaponIndexer"); Base.Init();
		if (DesiredSlot < 0)	DesiredSlot = CurrentSlot;
		
		
		
		//...This has to be the weirdest method of traversing
		// inventory that I've ever encountered!
		// Anyway, go through and grab all AEoDWeaponBase classes already
		// in the player's inventory.
		int pushed = 0;
		for (let probe = player.mo.Inv; probe != null; probe = probe.Inv)
		{
			// Search through the inventory and collect all weapons belonging to
			// AEoD, except for the current one.
			let Weap = AEoDWeaponBase(probe);
			if (Weap && Weap != player.ReadyWeapon && 
				Weap.Amount > 0 && Weap.SlotNumber > 0)
			{
				int Slot = Weap.SlotNumber;
				int Index = Weap.GetModIndex();
				
				Base.InsertAt(Slot, Index, Weap);
			}
		}
		if (pushed < 1)
			return null;
			
		AEoDWeaponBase NextWeapon = null;
		Switch(Instruction)
		{
			Case Ins_SetSlot:
			{
				if (DesiredSlot != CurrentSlot)
				{
					NextWeapon = Base.FindSlotWeapon(DesiredSlot);
					return Weapon(NextWeapon);
				}
			}
			Case Ins_SetNext:
			{
				NextWeapon = Base.FindNextWeapon(false, CurrentSlot, CurrentIndex);				
				return Weapon(NextWeapon);
			}
			Case Ins_SetPrev:
			{
				NextWeapon = Base.FindNextWeapon(true, CurrentSlot, CurrentIndex);
				return Weapon(NextWeapon);
			}
		}
		return null;
	}
	
	int GetCvarInt(String Cvarname, PlayerInfo player)
	{
		if (Cvarname.Length() < 1)	return 0;
		Cvar thing = null;
		
		if (player)		thing = Cvar.GetCvar(Cvarname, player);
		else			thing = Cvar.FindCvar(Cvarname);
		
		return (thing) ? thing.GetInt() : 0;
		
	}
	
	/*
	void SetupLists(bool NextSet)
	{
		int n = NextSet ? NextSlot : CurrentSlot;
					
		// Now grab the list of weapons.
		AEoDWeaponSlotContainer set = new("AEoDWeaponSlotContainer");
		// Grab the list of variables from the appropriate slot.
		if (set)
		{
			set.Init(n);
			set.SortWeapons(plr);
			if (NextSet)
			{
				NextWeapons.Copy(set.SortedWeapons);
				NextPositions.Copy(set.SortedPositions);
			}
			else
			{
				CurrentWeapons.Copy(set.SortedWeapons);
				CurrentPositions.Copy(set.SortedPositions);
			}
			set.Destroy();
		}
	}
	*/
}
/*
Class AEoDWeaponSlotContainer : Object play
{
	Array<String> Weapons, SortedWeapons;
	Array<Int> Positions, SortedPositions;
	
	// A trickier situation.
	void SortWeapons(PlayerInfo player)
	{
		// Must have more than 1 entry in the array because each slot has "user_AEWeaps#".
		// That variable is the determining factor of the current count of weapons
		// in that slot. Don't ever record it either because this is simply
		// for sorting.
		if (Weapons.Size() > 1)
		{
			if (!player) return;
			
			if (Weapons.Size() > 1)
			{
				SortedWeapons.Clear();
				SortedPositions.Clear();
				int LowTracker = 0, prev = 0;
				
				Cvar CHigh = Cvar.GetCvar(Weapons[0]);
				if (!CHigh)	return;
				int Highest = CHigh.GetInt();
				
				// Find the lowest numbered cvar. Work upwards and push each
				// CVar into the list based on their numbering.
				
				prev = LowTracker;
				for (int i = 1; i < Weapons.Size(); i++) //Don't start at 0. See comment above.
				{
					Cvar Getter = Cvar.GetCvar(Weapons[i],player);
					if (Getter)
					{
						int num = Getter.GetInt();
						if ((num == LowTracker + 1))
						{
							SortedWeapons.Push(Weapons[i]);
							SortedPositions.Push(num);
							LowTracker++;
							if (LowTracker > Highest)
								return;
							i = 1;
						}
					}
				}
			}
		}
	}
	
	// Pushes the list of variables as defined in CVARINFO. Straight forward and
	// simple.
	void Init(int slot)
	{
		Weapons.Clear();
		SortedWeapons.Clear();
		SortedPositions.Clear();
		Switch(slot)
		{
			Case 1:
				Weapons.Push("user_AEWeaps1");
				Weapons.Push("user_AEoDTNTBunny");
				Weapons.Push("user_AEoDHandgrenade");
				Weapons.Push("user_AEoDStickyMine");
				Weapons.Push("user_AEoDGlyph");
				Weapons.Push("user_AEoDProxDetonator");
				Weapons.Push("user_AEoDRemoteDetonator");
				Weapons.Push("user_AEoDTNT");
				Weapons.Push("user_AEoDJackBomb");
				Weapons.Push("user_AEoDBoneStaff");
				Weapons.Push("user_AEoDPortalGun");
				Weapons.Push("user_AEoDLemonNade");
				break;
			Case 2:
				Weapons.Push("user_AEWeaps2");
				Weapons.Push("user_AEoDKnife");
				Weapons.Push("user_AEoDMedievalAxe");
				Weapons.Push("user_AEoDGauntlets");
				Weapons.Push("user_AEoDKatana");
				Weapons.Push("user_AEoDVorpalBlade");
				Weapons.Push("user_AEoDScythe");
				Weapons.Push("user_AEoDStroggArmSaw");
				Weapons.Push("user_AEoDChainsaw");
				Weapons.Push("user_AEoDPainkiller");
				Weapons.Push("user_AEoDSpyKnife");
				break;
				
			Case 3:
				Weapons.Push("user_AEWeaps3");
				Weapons.Push("user_AEoDBeretta");
				Weapons.Push("user_AEoDBlaster");
				Weapons.Push("user_AEoDGargoyleWand");
				Weapons.Push("user_AEoDMP5");
				Weapons.Push("user_AEoDAssaultShotgun");
				Weapons.Push("user_AEoDGoldenColts");
				Weapons.Push("user_AEoDSPASShotgun");
				Weapons.Push("user_AEoDCrossbow");
				Weapons.Push("user_AEoDTekbow");
				Weapons.Push("user_AEODDesertEagle");
				Weapons.Push("user_AEoDMac10");
				Weapons.Push("user_AEoDFlaregun");
				Weapons.Push("user_AEoDShellShocker");
				break;
				
			Case 4:
				Weapons.Push("user_AEWeaps4");
				Weapons.Push("user_AEoDSerpentStaff");
				Weapons.Push("user_AEoDRiotgun");
				Weapons.Push("user_AEoDDisruptor");
				Weapons.Push("user_AEoDDemonOrb");
				Weapons.Push("user_AEoDCarbine");
				Weapons.Push("user_AEoDCombatShotgun");
				Weapons.Push("user_AEoDCrystalGun");
				Weapons.Push("user_AEoDVoodooDoll");
				Weapons.Push("user_AEoDBloodShotgun");
				Weapons.Push("user_AEoDBioRifle");
				Weapons.Push("user_AEoDDragonClaw");
				Weapons.Push("user_AEoDC14");
				Weapons.Push("user_AEoDBoltGun");
				Weapons.Push("user_AEoDShockRifle");
				Weapons.Push("user_AEoDPKShotgun");
				Weapons.Push("user_AEoDCMRifle");
				Weapons.Push("user_AEoDGasLauncher");
				Weapons.Push("user_AEoDBison");
				Weapons.Push("user_AEoDHeadHunter");
				Weapons.Push("user_AEoDAWP");
				break;
				
			Case 5:
				Weapons.Push("user_AEWeaps5");
				//Weapons.Push("user_AEoDFusionChaingun");
				Weapons.Push("user_AEoDIceStormRod");
				Weapons.Push("user_AEoDLasergun");
				Weapons.Push("user_AEoDNailGun");// 				= 13;
				Weapons.Push("user_AEoDDemonStaff");// 			= 12;
				Weapons.Push("user_AEoDGaussGun");// 				= 11;
				Weapons.Push("user_AEoDNailgunMK2");// 			= 10;
				Weapons.Push("user_AEoDHornetGun");// 			= 9;
				Weapons.Push("user_AEoDWyvernHeart");// 			= 8;
				Weapons.Push("user_AEoDPlasmaRifle");// 			= 7;
				Weapons.Push("user_AEoDFlamethrower");// 			= 6;
				Weapons.Push("user_AEoDFreezethrower");// 		= 5;
				Weapons.Push("user_AEoDSkullRod");// 				= 4;
				Weapons.Push("user_AEoDHyperBlaster");// 			= 3;
				Weapons.Push("user_AEoDMinigun");// 				= 2;
				Weapons.Push("user_AEoDPeaceMaker");//			= 1;
				break;
				
			Case 6:
				Weapons.Push("user_AEWeaps6");
				Weapons.Push("user_AEoDEnlightenmentStaff");// 	= 15;
				Weapons.Push("user_AEoDMissileLauncher");// 		= 14;
				Weapons.Push("user_AEoDFireStormSpell ");//		= 13;
				Weapons.Push("user_AEoDPMFLayer");// 				= 12;
				Weapons.Push("user_AEoDLightningRod");// 			= 11;
				Weapons.Push("user_AEoDMeteoriteRod");// 			= 10;
				Weapons.Push("user_AEoDRazor");// 				= 9;
				Weapons.Push("user_AEoDGrenadeLauncher");// 		= 8;
				Weapons.Push("user_AEoDRocketLauncher");// 		= 7;
				Weapons.Push("user_AEoDScarabStaff");// 			= 6;
				Weapons.Push("user_AEoDChickenLauncher");// 		= 5;
				Weapons.Push("user_AEoDHowitzer");// 				= 4;
				Weapons.Push("user_AEoDScreamer");// 				= 3;
				Weapons.Push("user_AEoDCowMangler");// 			= 2;
				Weapons.Push("user_AEoDWarAxe");//				= 1;
				break;
			Case 7:
				Weapons.Push("user_AEWeaps7");
				Weapons.Push("user_AEoDPulsegun");// 				= 21;
				Weapons.Push("user_AEoDEidechsenesser");// 		= 20;
				Weapons.Push("user_AEoDIncinerator");// 			= 19;
				Weapons.Push("user_AEoDThunderBolt");// 			= 18;
				Weapons.Push("user_AEoDPerforator");// 			= 17;
				Weapons.Push("user_AEoDPrismaCannon");// 			= 16;
				Weapons.Push("user_AEoDElectroDriver");// 		= 15;
				Weapons.Push("user_AEoDIceWand");// 				= 14;
				Weapons.Push("user_AEoDDevastator");// 			= 13;
				Weapons.Push("user_AEoDGuardianHead");// 			= 12;
				Weapons.Push("user_AEoDFragLauncher");// 			= 11;
				Weapons.Push("user_AEoDRipperGun");// 			= 10;
				Weapons.Push("user_AEoDLifeLeech");// 			= 9;
				Weapons.Push("user_AEoDArbalest");// 				= 8;
				Weapons.Push("user_AEoDConcussionLauncher");// 	= 7;
				Weapons.Push("user_AEoDPlutoniumCannon");// 		= 6;
				Weapons.Push("user_AEoDRaptor");// 				= 5;
				Weapons.Push("user_AEoDTeslaCannon");// 			= 4;
				Weapons.Push("user_AEoDSuperShotgun");//			= 3;
				Weapons.Push("user_AEoDHailstorm");// 			= 2;
				Weapons.Push("user_AEoDVulcanCannon");//			= 1;
				break;
			Case 8:
				Weapons.Push("user_AEWeaps8");
				Weapons.Push("user_AEoDBoneShotgun");// 			= 23;
				Weapons.Push("user_AEoDPKSMG");// 				= 22;
				Weapons.Push("user_AEoDStakeGun");// 				= 21;
				Weapons.Push("user_AEoDPulseCannon");// 			= 20;
				Weapons.Push("user_AEoDRavenStaff");// 			= 19;
				Weapons.Push("user_AEoDIonCannon");// 			= 18;
				Weapons.Push("user_AEoDRailGun");// 				= 17;
				Weapons.Push("user_AEoDHEGrenadeLauncher");// 	= 16;
				Weapons.Push("user_AEoDTomeOfSet");// 			= 15;
				Weapons.Push("user_AEoDPhalanx");// 				= 14;
				Weapons.Push("user_AEoDSniperRailgun");// 		= 13;
				Weapons.Push("user_AEoDNapalmLauncher");// 		= 12;
				Weapons.Push("user_AEoDLichStaff");// 			= 11;
				Weapons.Push("user_AEoDDeathRay");// 				= 10;
				Weapons.Push("user_AEoDMindBlower");// 			= 9;
				Weapons.Push("user_AEoDFlakCannon");// 			= 8;
				Weapons.Push("user_AEoDDsparilStaff");// 			= 7;
				Weapons.Push("user_AEoDGutFlinger");// 			= 6;
				Weapons.Push("user_AEoDMorserLauncher");// 		= 5;
				Weapons.Push("user_AEoDIncendiary");// 			= 4;
				Weapons.Push("user_AEoDFlailGun");// 				= 3;
				Weapons.Push("user_AEoDBoneDuster");// 			= 2;
				Weapons.Push("user_AEoDShredderStaff");//			= 1;
				break;
			Case 9:
				Weapons.Push("user_AEWeaps9");
				Weapons.Push("user_AEoDSoulleech");// 			= 19;
				Weapons.Push("user_AEoDWraithVerge");// 			= 18;
				Weapons.Push("user_AEoDProteusDynamo");// 		= 17;
				Weapons.Push("user_AEoDRailGunPrototype");// 		= 16;
				Weapons.Push("user_AEoDHERocketLauncher");// 		= 15;
				Weapons.Push("user_AEoDHellCore");// 				= 14;
				Weapons.Push("user_AEoDTempestStaff");// 			= 13;
				Weapons.Push("user_AEoDPhotonCannon");// 			= 12;
				Weapons.Push("user_AEoDCrawler");// 				= 11;
				Weapons.Push("user_AEoDPrototype");// 			= 10;
				Weapons.Push("user_AEoDSoulReaver");// 			= 9;
				Weapons.Push("user_AEoDGluonGun");// 				= 8;
				Weapons.Push("user_AEoDBloodScourge");// 			= 7;
				Weapons.Push("user_AEoDPopcornGun");// 			= 6;
				Weapons.Push("user_AEoDHellRoot");// 				= 5;
				Weapons.Push("user_AEoDDrakan");// 				= 4;
				Weapons.Push("user_AEoDBouncer");// 				= 3;
				Weapons.Push("user_AEoDNecrossbow");// 			= 2;
				Weapons.Push("user_AEoDHandCannon");//			= 1;
				break;
			Default:
				Weapons.Push("user_AEWeaps10");
				Weapons.Push("user_AEoDBFG9000");
				Weapons.Push("user_AEoDDarkMatterGun");
				Weapons.Push("user_AEoDRedeemer");
				Weapons.Push("user_AEoDFusionCannon");
				Weapons.Push("user_AEoDQSG");
				Weapons.Push("user_AEoDPenetrator");
				Weapons.Push("user_AEoDNova");
				Weapons.Push("user_AEoDApocalypse");
				Weapons.Push("user_AEoDVolcanoCannon");
				Weapons.Push("user_AEoDDarkFlameStaff");
				Weapons.Push("user_AEoDInferno");
				Weapons.Push("user_AEoDDeathsHand");
				Weapons.Push("user_AEoDSoulReaper");
				Weapons.Push("user_AEoDHandOfGod");
				Weapons.Push("user_AEoDHellHeavenHand");
				break;
		}
	}
}
*/
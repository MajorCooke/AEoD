Class AEoDmarine : DoomPlayer 
{
	Default
	{
		PainChance 255;
		Player.ColorRange 112, 127;
		player.maxhealth 200;
		Health 200;
		GibHealth -10000000;
		RipLevelMin 1;
		+AIMREFLECT	//Only works when the player is reflecting attacks.
		+LAXTELEFRAGDMG
		+ALLOWPAIN
		player.displayname "AEons of Death Marine";
		player.startitem "PlayerToken";
		player.startitem "PFirstTimeToken";
		player.startitem "PFirstTimeToken2";
		player.startitem "PFirstTimeTokenACS";
		//player.startitem PowerupMonitorItem
		PainChance "ChaosExpl1", 0;
		PainChance "ChaosExpl2", 0;
		PainChance "Wormwood", 0;
		PainChance "TempestLightning", 0;
		DamageFactor "ChaosExpl1", 0;
		DamageFactor "ChaosExpl2", 0;
		DamageFactor "NailGrenade", 0;	
		DamageFactor "TempestLightning", 0;
		DamageFactor "Wormwood", 0;
		DamageFactor "PlayerResistant", 0.05;
		DamageFactor "Telefrag", 1.0;
		DamageFactor "HolyNoResist", 0.0; //It's for monsters only.
		DamageFactor "DemonMorph", 0.0; //Same here.
		Player.ScoreIcon "RPICON1";
		player.damagescreencolor "Red", 0.1;
		Player.Face "STF";
	}
	
	override void PostBeginPlay()
	{
		RipLevelMin = 1;
		bJUSTHIT = bNODAMAGE = bINVULNERABLE = bNOPAIN = bDONTTHRUST = false;
		bALLOWPAIN = bAIMREFLECT = bLAXTELEFRAGDMG = true;
		Super.PostBeginPlay();
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags = 0, double angle = 0)
	{
		if (mod == 'Reflection')
			return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		if (CountInv("PowerPlayerGrounder"))
		{
			if (damage < 1)
				return 0;
			
			if (inflictor)
			{
				if (!source && inflictor.target)
					source = inflictor.target;
			}
			
			// Make sure never to do this to self! Otherwise, infiniloops happen.
			// Doze are bad. Weally weally bad. :(
			if (source && source != self && (source.bSHOOTABLE || source.bVULNERABLE))
			{
				source.DamageMobj(null, self, damage, "Reflection");
			}
			else if (inflictor && inflictor != self && (inflictor.bSHOOTABLE || inflictor.bVULNERABLE))
			{
				source.DamageMobj(null, self, damage, "Reflection");
			}
			return 0;
		}
		
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	
	States
	{
	Spawn:
		PLAY A 0;
		//PLAY A 0 //A_JumpIfInventory("HHHCheck",1,2)
		//PLAY A 0 //A_GiveInventory("PlayerReset",1)
	Waiting:
		PLAY A -1;
		Loop;
	See:
		PLAY ABCD 6;
		goto spawn;
	Missile:
		PLAY E 12;
		Goto Spawn;
	Melee:
		PLAY F 2 BRIGHT Light("NEWLIGHTPLAYERATTACK");
		PLAY F 4 BRIGHT;
		Goto Missile;
	Pain:
		PLAY G 4;
		PLAY G 4 A_Pain();
		Goto Spawn;
	Pain.Fire:
		PLAY G 0;
		PLAY G 0 A_JumpIfInventory("PowerFireToMana",1,3);
		PLAY G 4;
		PLAY G 4 A_Pain();
		Goto Spawn;
		PLAY G 0 A_GiveInventory("BlueMana",random(10,20));
		PLAY G 0 A_GiveInventory("GreenMana",random(6,12));
		PLAY G 0 A_GiveInventory("RedMana",random(4,8));
		PLAY G 0 A_GiveInventory("DarkMana",random(2,4));
		PLAY G 4;
		PLAY G 4 A_Pain();
		Goto Spawn;
	Pain.Slime:
		PLAY G 0;
		PLAY G 0 A_JumpIfInventory("PowerSlimeToHealth",1,3);
		PLAY G 4;
		PLAY G 4 A_Pain();
		Goto Spawn;
		PLAY G 0 A_GiveInventory("SlimeHealth",10);
		Goto Spawn;
	Death:
		PLAY H 10 
		{
			A_ClearOverlays();
			A_TakeInventory("IceShieldTimer",1);
			A_TakeInventory("ThunderstormTimer",1);
			A_TakeInventory("RightCubeToken",1);
			A_TakeInventory("LeftCubeToken",1);
			A_TakeInventory("PowerNoSeek",1);
			return A_PlayerSkinCheck("AltSkinDeath");
		}
		PLAY I 10 A_PlayerScream();
		PLAY J 10 A_NoBlocking();
		PLAY KLM 10;
		PLAY N -1;
		Stop;
	XDeath:
		PLAY O 5
		{
			A_ClearOverlays();
			A_TakeInventory("IceShieldTimer",1);
			A_TakeInventory("ThunderstormTimer",1);
			A_TakeInventory("RightCubeToken",1);
			A_TakeInventory("LeftCubeToken",1);
			A_TakeInventory("PowerNoSeek",1);
			return A_PlayerSkinCheck("AltSkinXDeath");
		}
		PLAY P 5 A_XScream();
		PLAY Q 5 A_NoBlocking();
		PLAY RSTUV 5;
		PLAY W -1;
		Stop;
	AltSkinDeath:
		PLAY H 6;
		PLAY I 6 A_PlayerScream();
		PLAY JK 6;
		PLAY L 6 A_NoBlocking();
		PLAY MNO 6;
		PLAY P -1;
		Stop;
	AltSkinXDeath:
		PLAY Q 5 A_PlayerScream();
		PLAY R 0 A_NoBlocking();
		PLAY R 5 A_SkullPop();
		PLAY STUVWX 5;
		PLAY Y -1;
		Stop;
	Ice:
		PLAY G 0 
		{
			A_TakeInventory("IceShieldTimer",1);
			A_TakeInventory("ThunderstormTimer",1);
			A_TakeInventory("RightCubeToken",1);
			A_TakeInventory("LeftCubeToken",1);
			A_TakeInventory("PowerNoSeek",1);
		}
		PLAY G 5 A_GenericFreezeDeath();
		PLAY G 1 A_FreezeDeathChunks();
		Wait;
	}
}

Class PlayerReset : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 
		{	
			bALLOWPAIN = true;
			if (!CountInv("PowerDLProtector"))
			{	bREFLECTIVE = false;	}
			bNODAMAGE = false;
			bINVULNERABLE = false;
			if (!CountInv("PowerNoSeek"))
			{
				bCANTSEEK = false;
				bNORADIUSDMG = false;
				bDONTRIP = false;
				A_SetRipMin(1);
			}
			
			if (!CountInv("NoMorphTimer"))
			{	bDONTMORPH = false;	}
			if (!CountInv("HHHCheck"))
			{	bDONTTHRUST = bNOPAIN = false;	}
			if (CountInv("MorphToken") > 0)
			{	A_SetHealth(Clamp(CountInv("TempHealthToken"),200+stamina,666));	}
			A_SetInventory("MorphToken",0);
			A_SetInventory("TempHealthToken",0);
			A_SetInventory("MorphOverrideable",0);
		}
		Stop;
	}
}

Class AEoDChickenPlayer : ChickenPlayer
{
	Default
	{
		RipLevelMin 1;
		PainChance "ChaosExpl1", 0;
		PainChance "ChaosExpl2", 0;
		PainChance "TempestLightning", 0;
		PainChance "Wormwood", 0;
		DamageFactor "TempestLightning", 0;
		DamageFactor "ChaosExpl1", 0;
		DamageFactor "ChaosExpl2", 0;
		DamageFactor "Wormwood", 0;
	}
}
#include "ZAEoD/WeaponSwitch.txt"

Class ACSConverter play
{
	static void ToggleDirectors(int on = 0, bool text = false)
	{
		AEoDHandler.SendNetworkEvent("ToggleDirectors", on, text);
	}
}
Class AEoDHandler : EventHandler
{
	enum CvarList
	{
		Game_Blood,
		Game_Doom,
		Game_Duke,
		Game_Heretic,
		Game_Hexen,
		Game_Hexen2,
		Game_HL,
		Game_HL2,
		Game_MM,
		Game_Powerslave,
		Game_Quake1,
		Game_Quake2,
		Game_Quake4,
		Game_SW,
		Extra_Dm64,
		Extra_Hellspawn,
		Extra_Joke,
		Extra_L4DMon,
		Extra_ROTT,
		
		GameCount = 10,
		ExtraCount = 5,
		TotalCount = GameCount + ExtraCount
	};
	
	bool DemonMorph;
	bool CvarsUpdated;
	bool DirectorsEnabled;
	DirectorBase L4DDirector;
	DirectorBase NormalDirector;
	int L4DIntensity, MonIntensity, DirDelay, GameMode, L4DDir, NorDir;
	
	//Array<uint8> SectorD;	
	transient Cvar 	Themes[TotalCount];
	transient Cvar 	CL4DIntensity, CMonIntensity, CDirDelay, CEnabled, CL4DDir, CNorDir,
					CGameMode;
	//transient Cvar DirCvar[3];
	
	
	void GetCvars()
	{
		/*
		static const String Cvars[] =
		{
			"user_Doom",
			"user_Blood",
			"user_Duke",
			"user_HL",
			"user_HL2",
			"user_Heretic",
			"user_Hexen",
			"user_Hexen2",
			"user_MM",
			"user_Powerslave",
			"user_Quake1",
			"user_Quake2",
			"user_Quake4",
			"user_SW",
			"user_Strife"
			//-------------- The rest below are extras, not themes.
			"user_Dm64", 
			"user_Hellspawn", 
			"user_Joke", 
			"user_L4DMon", 
			"user_ROTT" 
		};
		
		for (int i = 0; i < Themes.Size(); i++)
		{
			
		}
		*/
		if (!CGameMode)			CGameMode = Cvar.FindCvar("AEoDGameMode");
		if (!CL4DIntensity)		CL4DIntensity = Cvar.FindCvar("user_L4DIntensity");
		if (!CMonIntensity)		CMonIntensity = Cvar.FindCvar("user_MonIntensity");
		if (!CDirDelay)			CDirDelay = Cvar.FindCvar("DirectorDelay");
		if (!CNorDir)			CNorDir = Cvar.FindCvar("user_NorDir");
		if (!CL4DDir)			CL4DDir = Cvar.FindCvar("user_L4DDir");
		
		if (CL4DIntensity)		L4DIntensity = 		CL4DIntensity.GetInt();
		if (CMonIntensity)		MonIntensity = 		CMonIntensity.GetInt();
		if (CDirDelay)			DirDelay = 			CDirDelay.GetInt();
		if (CGameMode)			GameMode =			CGameMode.GetInt();
		if (CNorDir)			NorDir =			CNorDir.GetBool();
		if (CL4DDir)			L4DDir =			CL4DDir.GetBool();
	}
	
	override void OnRegister()
	{
		GetCvars();
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		let plr = players[0].mo;
		if (!e.IsReopen)
		{
			
			if (GameMode == 1)
			{
				Actor.Spawn("TheDirectorL4D", plr.pos);
				plr.A_GiveInventory("L4DDirToken");
			}
			else
			{
				if (NorDir)	Actor.Spawn("TheDirector", plr.pos);
				if (L4DDir)	
				{
					Actor.Spawn("TheDirectorL4D", plr.pos);
					plr.A_GiveInventory("L4DDirToken");
				}
			}
			
			DirectorsEnabled = (NorDir || L4DDir);
		}
		
	}
	
	// Tremendous thanks to Phantombeta for helping me out with this.
	override bool InputProcess(InputEvent ev)
	{
		
		if (ev.Type == InputEvent.Type_KeyDown)// && ev.KeyChar >= 0x30 && ev.KeyChar <= 0x39) // 0x30, 0x39 are '0' and '9'
		{		
			// Make sure the player exists.
			let plr = players[consoleplayer].mo;
			if (!plr || plr.health < 1 || plr.FindInventory("PowerMorph",true))
				// Ignore players that are morphed, dead or non-existent.
				return false;
				
			static const String KeyBindsCCMDs [] = {
				"slot 1", "slot 2", "slot 3", "slot 4", "slot 5",
				"slot 6", "slot 7", "slot 8", "slot 9", "slot 0",
				"weapnext", "weapprev"	};
			static const String KeyBindsNetEvents [] = {
				"slot:1", "slot:2", "slot:3", "slot:4", "slot:5",
				"slot:6", "slot:7", "slot:8", "slot:9", "slot:0",
				"next", "prev"	};
			
			int bind1, bind2;
			for (int i = 0; i < 12; i++) 
			{
				[bind1, bind2] = Bindings.GetKeysForCommand (KeyBindsCCMDs [i]);

				if (ev.KeyScan == bind1 || ev.KeyScan == bind2) 
				{
				//	EventHandler.SendNetworkEvent (String.Format ("ScrollWheelHijack:%s", KeyBindsNetEvents [i]));
					EventHandler.SendNetworkEvent(String.Format("AEoD_SelectWeapon:%s", KeyBindsNetEvents[i]));
					return false;
				}
			}
		}
		return false;
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{	
		int num = e.Player;
		let plr = players[num].mo;
		
		Array<String> strings;
		e.Name.Split (strings, ":");

		if (strings.Size() > 1)
		{
	//		if (strings[0] == 'AEoD_SelectWeapon')
	//			ChangeWeapons(e);
		}
		else if (e.Name == 'WeapCvar')
		{
			// Debug: outputs a cvar if it has one.
			let wep = (plr) ? AEoDWeaponBase(plr.player.ReadyWeapon) : null;
			String s = "Null";
			if (wep)	s = wep.GetCvarThings();
			Console.Printf("%s", s);
		}
		else if (e.Name == 'EndDemonMorph')
		{
			if (plr)
			{
				let dm = DemonPlayerMorph(plr);
				if (dm)
				{
					dm.EndMorph();
				}
			}
		}
		
		else if (!e.IsManual)
		{
			
			if (e.Name == 'DemonMorphOn')
			{
				DemonMorph = true;
				int num = e.Player;
				let plr = players[num].mo;
				
				
				ThinkerIterator it = ThinkerIterator.Create("Actor", Thinker.STAT_DEFAULT);
				Actor mo;
				while (mo = Actor(it.Next()))
				{
					if (mo.bISMONSTER && mo.health > 0)
					{
						if (mo.CountInv("DemonMorphTranslationItem") 
							|| mo.Species == 'Director'
							|| mo.Species == 'AEoDSpawner')	continue;
						
						mo.A_GiveInventory("DemonMorphTranslationItem", 1);
					}
				}
			}
			else if (e.Name == 'DemonMorphOff')
			{
				//Console.Printf("Called");
				DemonMorph = false;
				ThinkerIterator it = ThinkerIterator.Create("Actor", Thinker.STAT_DEFAULT);
				Actor mo;
				while (mo = Actor(it.Next()))
				{
					let inv = Inventory(mo.FindInventory("DemonMorphTranslationItem"));
					if (inv)	
					{
						//Console.Printf("Attempting Destruction");
						inv.DepleteOrDestroy();
					}
				}
			}
			else if (e.Name == 'ToggleDirectors')
			{
				if (plr)
				{
					ToggleDirectors(e);
				}
			}
		}
	}
	
	override void WorldUnloaded(WorldEvent e)
	{
		DemonMorph = CvarsUpdated = false;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i])
			{
				let plr = players[i].mo;
				if (plr)	plr.A_SetInventory("RemoveDirector",0);
			}
		}
	}
	
	override void WorldThingSpawned(WorldEvent e)
	{
		if (DemonMorph)
		{
			Actor mo = e.Thing;
			if (!mo || mo.bNOINTERACTION)	return;
			if (!(mo is "DirectorBase") && mo.bISMONSTER && mo.health > 0)
			{
				mo.A_GiveInventory("DemonMorphTranslationItem", 1);
			}
		}
	}
	
	override void WorldThingRevived(WorldEvent e)
	{
		if (DemonMorph && e.Thing)
		{
			Actor mo = e.Thing;
			if (mo && mo.bISMONSTER)
			{
				mo.A_GiveInventory("DemonMorphTranslationItem", 1);
			}
		}
	}
	
	//==========================================================================
	// Custom functions here
	//==========================================================================
	
	void ChangeWeapons(ConsoleEvent e) 
	{
		int pnum = e.Player;
		if (!playeringame[pnum])
			return;
			
		PlayerInfo player = players[pnum];

		if (!player) // Return if the player is null
			return;

		Array<String> commandStrings;
		e.Name.Split (commandStrings, ":");
		if (commandStrings.Size() < 2) // Return if the array contains less than two strings
			return;
			
		
		
		let ready = player.ReadyWeapon;
		let pending = player.PendingWeapon;
		let aready = AEoDWeaponBase(ready);
		let apending = AEoDWeaponBase(pending);
		
		AEoDWeaponIdentifier Finder = new("AEoDWeaponIdentifier");
		Weapon next = null;
		if (commandStrings[1] == 'next')
		{
			next = Weapon(Finder.GetNextWeapon(player, AEoDWeaponIdentifier.Ins_SetNext));
		}
		else if (commandStrings[1] == 'prev')
		{
			next = Weapon(Finder.GetNextWeapon(player, AEoDWeaponIdentifier.Ins_SetPrev));
		}
		else if (commandStrings[1] == 'slot')
		{
			// Switching to a weapon in slot.
			//AEoD_SelectWeapon:slot:#
			//# is what we want for "slot" command.
			int len = (commandStrings.Size() > 2) ? commandStrings[2].Length() : 0;
			if (len < 1)
			{
				//Console.Printf("-1");
				Finder.Destroy();
				return;
			}
			
			String s = commandStrings[2];
			if (len > 1)	s = s.CharAt(len - 1);
			int num = s.ToInt();
			if (Finder)
				next = Finder.GetNextWeapon(player, AEoDWeaponIdentifier.Ins_SetSlot, num);
		}
		if (next && next != ready)	player.PendingWeapon = next;
		//else Console.Printf("-2");
		Finder.Destroy();
	}
	
	void ToggleDirectors(ConsoleEvent e)
	{
		bool good = (L4DDirector || NormalDirector);
		if (good)
		{
			Switch(e.Args[0])
			{
				Case 1:	// Enable
					if (!DirectorsEnabled)
					{
						if (e.Args[1])		Console.Printf("Directors Enabled");
						if (L4DDirector)	L4DDirector.Activate(null);
						if (NormalDirector)	NormalDirector.Activate(null);
						DirectorsEnabled = true;
					}
					break;
				Case -1: // Disable
					if (DirectorsEnabled)
					{
						if (e.Args[1])		Console.Printf("Directors Disabled");
						if (L4DDirector)	L4DDirector.Deactivate(null);
						if (NormalDirector)	NormalDirector.Deactivate(null);
						DirectorsEnabled = false;
					}
					break;
				Default: // Toggle
					if (DirectorsEnabled)
					{
						if (e.Args[1])		Console.Printf("Directors Disabled");
						if (L4DDirector)	L4DDirector.Deactivate(null);
						if (NormalDirector)	NormalDirector.Deactivate(null);
					}
					else
					{
						if (e.Args[1])		Console.Printf("Directors Enabled");
						if (L4DDirector)	L4DDirector.Activate(null);
						if (NormalDirector)	NormalDirector.Activate(null);
					}
					DirectorsEnabled = !DirectorsEnabled;
					break;
			}
		}
	}
}




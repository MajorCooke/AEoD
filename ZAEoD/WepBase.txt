/*==============================================================================

								AEons of Death
							    Item Code Base
									v6.66

==============================================================================*/

// Used for identification purposes. This makes it easier to perform things like
// CheckClass functions when searching for ancestors.

Class AEoDInventory : Inventory 			{	Default { +NOTELESTOMP	} }
Class AEoDCustomInventory : CustomInventory {	Default { +NOTELESTOMP	} }
Class AEoDAmmo : Ammo						{	Default { +NOTELESTOMP	} }

// This goes for the actual weapon itself.
Class AEoDWeaponBase : Weapon
{
	Default
	{
		+INVENTORY.IGNORESKILL
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNDROPPABLE
		+WEAPON.CHEATNOTWEAPON
		+DONTGIB
		+NOTELESTOMP
		Tag "REPLACE ME YOU IDIOT!";
	}
	
	Name, Int, Cvar GetCvarThings()
	{	
		Name AEoDCvar = 'user_'..GetClassName();
		Cvar check = Cvar.GetCvar(AEoDCvar, owner.player);
		if (!check)	
			return '', -1, null;
		
		return AEoDCvar, check.GetInt(), check;
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	}
}

Class AEoDWeaponSlot01 : AEoDWeaponBase { Default { Weapon.SlotNumber 1; 	} }
Class AEoDWeaponSlot02 : AEoDWeaponBase { Default { Weapon.SlotNumber 2; 	} }
Class AEoDWeaponSlot03 : AEoDWeaponBase { Default { Weapon.SlotNumber 3; 	} }
Class AEoDWeaponSlot04 : AEoDWeaponBase { Default { Weapon.SlotNumber 4; 	} }
Class AEoDWeaponSlot05 : AEoDWeaponBase { Default { Weapon.SlotNumber 5; 	} }
Class AEoDWeaponSlot06 : AEoDWeaponBase { Default { Weapon.SlotNumber 6; 	} }
Class AEoDWeaponSlot07 : AEoDWeaponBase { Default { Weapon.SlotNumber 7; 	} }
Class AEoDWeaponSlot08 : AEoDWeaponBase { Default { Weapon.SlotNumber 8; 	} }
Class AEoDWeaponSlot09 : AEoDWeaponBase { Default { Weapon.SlotNumber 9; 	} }
Class AEoDWeaponSlot10 : AEoDWeaponBase { Default { Weapon.SlotNumber 0;	} }

extend class AEoDWeaponBase
{
	//============================================================================
	//
	// A_GauntletAttack
	//
	//============================================================================
	action void A_GauntletAttack (int power)
	{
		int damage;
		double dist;
		Class<Actor> pufftype;
		FTranslatedLineTarget t;
		int actualdamage = 0;
		Actor puff;

		if (player == null)
		{
			return;
		}

		Weapon weapon = player.ReadyWeapon;
		if (weapon != null)
		{
			if (!weapon.DepleteAmmo (weapon.bAltFire))
				return;
			
			player.GetPSprite(PSP_WEAPON).x = ((random[GauntletAtk]() & 3) - 2);
			player.GetPSprite(PSP_WEAPON).y = WEAPONTOP + (random[GauntletAtk]() & 3);
		}
		double ang = angle;
		if (power)
		{
			damage = random[GauntletAtk](1, 8) * 2;
			dist = 4*DEFMELEERANGE;
			ang += random2[GauntletAtk]() * (2.8125 / 256);
			pufftype = "GauntletPuff2";
		}
		else
		{
			damage = random[GauntletAtk](1, 8) * 2;
			dist = SAWRANGE;
			ang += random2[GauntletAtk]() * (5.625 / 256);
			pufftype = "GauntletPuff1";
		}
		double slope = AimLineAttack (ang, dist);
		[puff, actualdamage] = LineAttack (ang, dist, slope, damage, 'Melee', pufftype, false, t);
		if (!t.linetarget)
		{
			if (random[GauntletAtk]() > 64)
			{
				player.extralight = !player.extralight;
			}
			A_PlaySound ("weapons/gauntletson", CHAN_AUTO);
			return;
		}
		int randVal = random[GauntletAtk]();
		if (randVal < 64)
		{
			player.extralight = 0;
		}
		else if (randVal < 160)
		{
			player.extralight = 1;
		}
		else
		{
			player.extralight = 2;
		}
		if (power)
		{
			if (!t.linetarget.bDontDrain) GiveBody (actualdamage >> 1);
			A_PlaySound ("weapons/gauntletspowhit", CHAN_AUTO);
		}
		else
		{
			A_PlaySound ("weapons/gauntletshit", CHAN_AUTO);
		}
		// turn to face target
		ang = t.angleFromSource;
		double anglediff = deltaangle(angle, ang);

		if (anglediff < 0.0)
		{
			if (anglediff < -4.5)
				angle = ang + 90.0 / 21;
			else
				angle -= 4.5;
		}
		else
		{
			if (anglediff > 4.5)
				angle = ang - 90.0 / 21;
			else
				angle += 4.5;
		}
		bJustAttacked = true;
	}


	//============================================================================
	//
	// A_CStaffCheck
	//
	//============================================================================

	action void A_CStaffCheck()
	{
		FTranslatedLineTarget t;

		if (player == null)
		{
			return;
		}
		Weapon weapon = player.ReadyWeapon;

		int damage = 20 + (random[StaffCheck]() & 15);
		int max = player.mo.GetMaxHealth();
		for (int i = 0; i < 3; i++)
		{
			for (int j = 1; j >= -1; j -= 2)
			{
				double ang = angle + j*i*(45. / 16);
				double slope = AimLineAttack(ang, 1.5 * DEFMELEERANGE, t, 0., ALF_CHECK3D);
				if (t.linetarget)
				{
					LineAttack(ang, 1.5 * DEFMELEERANGE, slope, damage, 'Melee', "CStaffPuff", false, t);
					if (t.linetarget != null)
					{
						angle = t.angleFromSource;
						if (((t.linetarget.player && (!t.linetarget.IsTeammate(self) || level.teamdamage != 0)) || t.linetarget.bIsMonster)
							&& (!t.linetarget.bDormant && !t.linetarget.bInvulnerable))
						{
							int newLife = player.health + (damage >> 3);
							newLife = newLife > max ? max : newLife;
							if (newLife > player.health)
							{
								health = player.health = newLife;
							}
							if (weapon != null)
							{
								State newstate = weapon.FindState("Drain");
								if (newstate != null) player.SetPsprite(PSP_WEAPON, newstate);
							}
						}
						if (weapon != null)
						{
							weapon.DepleteAmmo(weapon.bAltFire, false);
						}
					}
					return;
				}
			}
		}
	}

	//============================================================================
	//
	// A_CStaffAttack
	//
	//============================================================================

	action void A_CStaffAttack()
	{
		if (player == null)
		{
			return;
		}

		Weapon weapon = player.ReadyWeapon;
		if (weapon != null)
		{
			if (!weapon.DepleteAmmo (weapon.bAltFire))
				return;
		}
		Actor mo = SpawnPlayerMissile ("CStaffMissile", angle - 3.0);
		if (mo)
		{
			mo.WeaveIndexXY = 32;
		}
		mo = SpawnPlayerMissile ("CStaffMissile", angle + 3.0);
		if (mo)
		{
			mo.WeaveIndexXY = 0;
		}
		A_PlaySound ("ClericCStaffFire", CHAN_WEAPON);
	}

	//============================================================================
	//
	// A_CStaffInitBlink
	//
	//============================================================================

	action void A_CStaffInitBlink()
	{
		weaponspecial = (random[CStaffBlink]() >> 1) + 20;
	}

	//============================================================================
	//
	// A_CStaffCheckBlink
	//
	//============================================================================

	action void A_CStaffCheckBlink()
	{
		if (player && player.ReadyWeapon)
		{
			if (!--weaponspecial)
			{
				player.SetPsprite(PSP_WEAPON, player.ReadyWeapon.FindState ("Blink"));
				weaponspecial = (random[CStaffBlink]() + 50) >> 2;
			}
			else 
			{
				A_WeaponReady();
			}
		}
	}
}

// This is for the actors doing the pickup checking on slot limits.
Class AEoDWeaponPickup : AEoDCustomInventory
{
	Default
	{
		+INVENTORY.IGNORESKILL	
		+FLOORCLIP
		+DONTGIB
		+NOTELESTOMP
	}
}

Class AEoDWeaponDrop : AEoDCustomInventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+NOTELESTOMP
	}
}
#library "GameType"
#include "zcommon.acs"

global Int 1:AEoDThemeType;
global Int 2:GameStarted;
global Int 5:ThemeMix;
global Int 7:ActiveCount;
global Bool 8:L4DMode;
global Bool 9:L4DDir;
global Bool 10:NorDir;
global Bool 11:TechTheme;
global Bool 12:MagicTheme;
global Bool 13:NormalTheme;
global Bool 14:JokeTheme;
global Bool 15:ScriptSetup;
global str 16:GameModeCh[]; 
global bool 17:MonsterMayhem;
global Int 18: MiniCount;
global bool 19: MiniThemeEnabled;
global str 20:MiniMode[]; 

str GameTypesText[28]={"Classic",	//0
		"Doom/demon-esque",	//1		
		"Dark sci-fi",		//2
		"Magic/Fantasy",		//3
		"High Tech",			//4
		"Aliens",			//5
		"Joke Mode",			//6, it just says "joke mode" in dec/char code
		"Portal run",			//7
		"Nothing",		
		"Nothing",
		"Nothing",
		"Doom",				//11
		"Blood",			//12
		"Duke Nukem 3D",		//13
		"Half Life",			//14
		"Half Life 2",			//15
		"Heretic",			//16
		"Hexen",			//17
		"Hexen II",			//18
		"Might & Magic",		//19
		"Powerslave",			//20
		"Quake",			//21
		"Quake II",			//22
		"Quake IV",			//23
		"Shadow Warrior",		//24
		"Strife",			//25
		"Left 4 Dead",		//26
		"Chaos Capital"}; //27

Script "s901" enter
{
	//ACS_NamedExecuteWait("SpawnerSetup",0,0,0,0);	
	if (!(GameStarted))
		delay(1);
	if (CheckInventory("NotATrueMapToken") == 1) //Needed for the Title Map.
		Terminate;
	ACS_NamedExecute("s650",0,0,0,0);		//starts the spells script
	ACS_NamedExecute("s903",0,0,0,0);		//level checker
	int NoWeapons;
	
	//This section below checks if at the beginning of the map, player has no weapons in slot 3, 4, 5, etc, 
	if(CheckInventory("Weapon3Count")==0
	   &&CheckInventory("Weapon4Count")==0
	   &&CheckInventory("Weapon5Count")==0
	   &&CheckInventory("Weapon6Count")==0
	   &&CheckInventory("Weapon7Count")==0
	   &&CheckInventory("Weapon8Count")==0
	   &&CheckInventory("Weapon9Count")==0
	   &&CheckInventory("Weapon0Count")==0)
	   {
		NoWeapons=1;		//it sets this var saying player has no viable weapons. If that's the case, it will also give the starting weapons
		//HudMessageBold(s:"You have no weapons";HUDMSG_PLAIN, 0, CR_RED, 0.5, 0.9, 5.0); //debugging
	   }
	   /*else		// debugging
		HudMessageBold(s:"You have weapons";HUDMSG_PLAIN, 0, CR_RED, 0.5, 0.9, 5.0);*/
		
	// This section above is for mapsets like Scythe 2 that relies on player dying, and entering a new "episode"
	// from pistol start. The point here, is that without checking this, AEoD would give weapons only at map01.
		
	If(getlevelinfo(LEVELINFO_LEVELNUM)!=0)		//if ==0, is an special map (i.e. titlemap)
	{
		if(GameStarted==0||NoWeapons==1)
		{
			Delay(1);
			GameStarted=1;	//this is for the first time player enters the game, after a second, the game will save this var
			AEoDThemeType = GetCVar("AEGtValues");	
			giveinventory("AEoDKnife",1);
			giveinventory("KnifeDrop",1);
			
			if (L4DMode)
				GiveInventory("L4DMode",1);
			if(L4DMode || L4DDir)		//if L4D gives special weapon and ammo
			{
				giveinventory("AEoDBerettaItem",1);
				giveinventory("AEoDBerettaItem",1);
				giveinventory("AEClip",100);
				giveInventory("AEoDSPASShotgunItem",1);
				giveinventory("AEShell",34);
				giveinventory("StoneOfRestoration",1);
				giveinventory("HealthBottle",1);
				SetWeapon("AEoDSPASShotgun");
			}
			else if (NormalTheme || JokeTheme || ThemeMix <= 0)
			{
				giveinventory("AEoDBerettaItem",1);				//otherwise will give the pistol
				giveinventory("AEClip",36);
				SetWeapon("AEoDBeretta");
			}
			
			if(MagicTheme)	//and if is a "magic type" game mode
			{
				giveinventory("AEoDGargoyleWandItem",1);							// will give the wand
				giveinventory("BlueMana",70);
				SetWeapon("AEoDGargoyleWand");
			}
			if(TechTheme)		//if tech
			{
				giveinventory("AEoDBlasterItem",1);							// will give the blaster
				giveinventory("AECell",40);
				SetWeapon("AEoDBlaster");
			}
			/*else if(AEoDThemeType==7)									//I cannot support portal run through the new system. Sorry.
			{
				GiveInventory("AEoDPortalGunItem",1);
				GiveInventory("Weapon0Count",3);
				GiveInventory("Weapon1Count",3);
				GiveInventory("Weapon2Count",3);
				GiveInventory("Weapon3Count",3);
				GiveInventory("Weapon4Count",3);
				GiveInventory("Weapon5Count",3);
				GiveInventory("Weapon6Count",3);
				GiveInventory("Weapon7Count",3);
				GiveInventory("Weapon8Count",3);
				GiveInventory("Weapon9Count",3);	
			}*/
			//SetFont("BIGFONT");
			//HUDMessage(s:"AEoD: ",l:GameTypesText[AEoDThemeType],s:"."; HUDMSG_TYPEON| HUDMSG_LOG,0,CR_GREEN,0.5,0.1,6.0,0.1,1.0);
		}
		if(L4DMode || L4DDir)				//if L4D or chaos capital when entering a level
		{
			if(CheckInventory("FearRune")==0)	//and player has no fear rune
				GiveInventory("FearRune",1);	//i will give one
				
			ACS_NamedExecute("s914",0,0,0,0);	//Start up the body count script.
			GiveInventory("L4DCountHudToken",1);
		}
	
	
	int diff = GameSkill();
	
	if (L4DDir)	//Left 4 Dead Director
	{
		GiveInventory("L4DDirectorSpawner",1); //spawn only the l4d director
		GiveInventory("L4DDirToken",1);
	}	
	if (NorDir) //if monster mayhem mode
		giveinventory("DirectorSpawner",1); //spawn the director
	
		
	//The above code handles the director, while below handles possible combos.
	//This code below is used to give the player a perfect skill count dummy
	//on EACH map, because it will be stripped.
		
	
	if((NorDir) || (L4DDir) || (L4DMode))	//If L4D or Chaos Capital...
	{	
		if (GameSkill()==4 || MonsterMayhem)
			giveinventory("NightmareToken",1);
		
		if (L4DDir || L4DMode)
			giveinventory("SkillCount",GameSkill());
	}	
		
	delay(10);
	if(JokeTheme)				//if joke mode or chaos capital
		ACS_NamedExecute("s902",0,0,0,0);		//starts the cave jonhson phrases check
	}
		/*
	if(AEoDThemeType==7)				//if portal run, when entering a level
	{
		if(CheckInventory("EarthSymbol")<=1)	//gives 2 earth symbol if player has less than 2
			GiveInventory("EarthSymbol",2);
		if(CheckInventory("PentagramOfProtection")==0)	//and gives a pentagram if player didnt have one already
			GiveInventory("PentagramOfProtection",1);	
	
		TakeInventory("CupOfMana",1);	//takes all the powerups but the medkits, life urn, pentagram and earth symbol
		TakeInventory("IceShield",1);
		TakeInventory("ThunderstormRune",1);
		TakeInventory("FearRune",1);
		TakeInventory("DrainRune",1);
		TakeInventory("InvisibilityRune",1);
		TakeInventory("TimeRune",1);
		TakeInventory("FireSymbol",1);
		TakeInventory("WaterSymbol",1);
		TakeInventory("AirSymbol",1);
		TakeInventory("Bracers",1);
		TakeInventory("StoneOfQuickening",1);
		TakeInventory("StoneOfTemperance",1);
		TakeInventory("StoneOfRestoration",1);
		TakeInventory("AntiChickenator",1);
		TakeInventory("IconOfSummoning",1);
		TakeInventory("DiabolicalDice",3);
		TakeInventory("ForceCube",1);
		TakeInventory("InfraredItem",1);
		TakeInventory("RadSuitItem",1);
	}	*/
}

str LevelsVisited[33]={"0","1","2","3","4","5","6","7","8","9","10",
			     "11","12","13","14","15","16","17","18","19","20",
			     "21","22","23","24","25","26","27","28","29","30","31","32"};
global int 5: LevTracker[];
int LevelsPlayed;

//Really need to stop using TIDs. Remember, the caller of the script is considered
//the player when starting a map.
script "s902" (void)
{
	if(GetLevelInfo(LEVELINFO_LEVELNUM)==1)	//only in map01
	{
		GiveInventory("CaveSaysHi",1);
	}
	else if(GetLevelInfo(LEVELINFO_LEVELNUM)==30) //only map30
	{
		GiveInventory("CaveIsPissed",1);	//plays the lemon speech
		
		for(int i=1;i<33;i++)		//this is the loop to count how many levels have been visited
			if(LevTracker[i]==1)
				LevelsPlayed++;
		if(LevelsPlayed>=30)		//if you played at least 30 maps
		{
			Delay(35*33);		//after the speech ends
			GiveInventory("LemonNadeSpawner",1);	//you get your prize
		}
	}
	else //if(GetLevelInfo(LEVELINFO_LEVELNUM)>1&&GetLevelInfo(LEVELINFO_LEVELNUM)<30) //from map02 to map29
		GiveInventory("CaveSaySomethingHalfTheTimes",1);	//1/3 of chances to say something at the beginning of the levels
	if(GetLevelInfo(LEVELINFO_LEVELNUM)!=30)	//in map30, this wont play anymore
	{
		delay(35*random(60,180));
		Spawn("CaveJohnsonSpeaker",0,0,0,0,0);
	}
		/*while(1)
		{
			delay(35*random(60,180));	//it will delay somewhere between 1 and 3 minutes before saying something again in the same level
			GiveInventory("CaveSaySomethingHalfTheTimes",1);	//and then, again 1/3 of chances.
		}*/
}



Script "s903" (void)		//This one is to keep track of the levels visited by player, stored in the "LevTracker" array
{
	LevTracker[GetLevelInfo(LEVELINFO_LEVELNUM)]=1;
}

script "s905" (void)		//debug to print the list
{
	for(int i=0;i<33;i++)
		Log(l:LevelsVisited[i],s:"/",d:LevTracker[i]);
}

script "s906" (void)		//debug to print the actual level number
{
	Log(s:"You are in map number: ",d:GetLevelInfo(LEVELINFO_LEVELNUM));
	for(int i=1;i<33;i++)
		if(LevTracker[i]!=0)
			LevelsPlayed++;
	Log(s:"And you have played ",d:LevelsPlayed,s:" levels.");
}

Script "L4DCountHudSwitcher" (void)
{
	if (CheckInventory("L4DCountHudToken"))
	{
		ACS_NamedTerminate("s914",0);
		for (int zz = 666; zz < 690; zz++)
		{
			HudMessage(s:""; HUDMSG_PLAIN,zz,0,0,0,1,0);
		}
		TakeInventory("L4DCountHudToken",10000);
	}
	else
	{
		GiveInventory("L4DCountHudToken",1);
		ACS_NamedExecuteAlways("s914",0,0,0,0);
	}
}

script "s914" (int hudsizex, int hudsizey)
{
	if (!CheckInventory("L4DCountHudToken"))
	{
		Terminate;
	}
	int commoncount = CheckInventory("L4DCommonCount");
	int tankcount = CheckInventory("L4DTankCount");
	int witchcount = CheckInventory("L4DWitchCount");
	int jockeycount = CheckInventory("L4DJockeyCount");
	int spittercount = CheckInventory("L4DSpitterCount");
	int huntercount = CheckInventory("L4DHunterCount");
	int boomercount = CheckInventory("L4DBoomerCount");
	int chargercount = CheckInventory("L4DChargerCount");
	int smokercount = CheckInventory("L4DSmokerCount");
	int maptotal = CheckInventory("L4DMapTotal");
	int currenttotal = CheckInventory("L4DCurrentTotal");
	int ccm = CheckInventory("L4DCCMultiplier");
	int hudyoffset = 200.0;

	SetHudSize(1024,768,0);
	HudMessage(s:"Common:"; HUDMSG_PLAIN,666,CR_BROWN,100.1,hudyoffset+25.1,0);
	HudMessage(s:"Tanks:"; HUDMSG_PLAIN,667,CR_BROWN,100.1,hudyoffset+35.1,0);
	HudMessage(s:"Witches:"; HUDMSG_PLAIN,668,CR_BROWN,100.1,hudyoffset+45.1,0);
	HudMessage(s:"Jockeys:"; HUDMSG_PLAIN,669,CR_BROWN,100.1,hudyoffset+55.1,0);
	HudMessage(s:"Spitters:"; HUDMSG_PLAIN,670,CR_BROWN,100.1,hudyoffset+65.1,0);
	HudMessage(s:"Hunters:"; HUDMSG_PLAIN,671,CR_BROWN,100.1,hudyoffset+75.1,0);
	HudMessage(s:"Boomers:"; HUDMSG_PLAIN,672,CR_BROWN,100.1,hudyoffset+85.1,0);
	HudMessage(s:"Chargers:"; HUDMSG_PLAIN,673,CR_BROWN,100.1,hudyoffset+95.1,0);
	HudMessage(s:"Smokers:"; HUDMSG_PLAIN,674,CR_BROWN,100.1,hudyoffset+105.1,0);
	HudMessage(s:"Map Total:"; HUDMSG_PLAIN,675,CR_BROWN,100.1,hudyoffset+125.1,0);
	HudMessage(s:"Current Total:"; HUDMSG_PLAIN,676,CR_BROWN,100.1,hudyoffset+135.1,0);
	HudMessage(s:"30000 Kills x"; HUDMSG_PLAIN,677,CR_BROWN,100.1,hudyoffset+145.1,0);
	
	HudMessage(i:commoncount; HUDMSG_PLAIN,678,CR_BROWN,300.1,hudyoffset+25.1,0);
	HudMessage(i:tankcount; HUDMSG_PLAIN,679,CR_BROWN,300.1,hudyoffset+35.1,0);
	HudMessage(i:witchcount; HUDMSG_PLAIN,680,CR_BROWN,300.1,hudyoffset+45.1,0);
	HudMessage(i:jockeycount; HUDMSG_PLAIN,681,CR_BROWN,300.1,hudyoffset+55.1,0);
	HudMessage(i:spittercount; HUDMSG_PLAIN,682,CR_BROWN,300.1,hudyoffset+65.1,0);
	HudMessage(i:huntercount; HUDMSG_PLAIN,683,CR_BROWN,300.1,hudyoffset+75.1,0);
	HudMessage(i:boomercount; HUDMSG_PLAIN,684,CR_BROWN,300.1,hudyoffset+85.1,0);
	HudMessage(i:chargercount; HUDMSG_PLAIN,685,CR_BROWN,300.1,hudyoffset+95.1,0);
	HudMessage(i:smokercount; HUDMSG_PLAIN,686,CR_BROWN,300.1,hudyoffset+105.1,0);
	HudMessage(i:maptotal; HUDMSG_PLAIN,687,CR_BROWN,300.1,hudyoffset+125.1,0);
	HudMessage(i:currenttotal; HUDMSG_PLAIN,688,CR_BROWN,300.1,hudyoffset+135.1,0);
	HudMessage(i:ccm; HUDMSG_PLAIN,689,CR_BROWN,300.1,hudyoffset+145.1,0);
	SetHudSize(0,0,0);
}

//==============================================================================
//								Soul Count
//==============================================================================
// Keeps track of souls for the player who has them and performs flashier
// effects,the closer (s)he gets to 666.

script "AESoulCount" (void)
{
	int soulcount = CheckInventory("DMSoulCount");
	
	if (soulcount >= 633)
	{
		ACS_NamedExecute("AESoulCountFlasher",0,0,0,0);		
	}
	else if (soulcount >= 600)
	{
		SetHudSize(1024,768,0);
		ACS_NamedTerminate("AESoulCountFlasher",0);
		SetFont("BIGFONT");
		HudMessage(i:soulcount,s:"/666"; HUDMSG_PLAIN,765,CR_RED,512.0,10.0,0.5);
		HudMessage(i:soulcount,s:"/666"; HUDMSG_PLAIN,766,CR_WHITE,512.0,10.0,0);
	}
	else
	{
		SetHudSize(1024,768,0);
		ACS_NamedTerminate("AESoulCountFlasher",0);
		SetFont("SMALLFONT");
		HudMessage(i:soulcount,s:"/666"; HUDMSG_PLAIN,766,CR_GOLD,512.0,10.0,0);
		HudMessage(s:""; HUDMSG_PLAIN,765,CR_UNTRANSLATED,0,0,1);
	}
	SetHudSize(0,0,0);
}

bool soulflasher = false;
Script "AESoulCountFlasher" (void)
{
	int loopcount;
	if (soulflasher && (CheckInventory("DMSoulCount") < 633))
	{
		soulflasher = false;
		Terminate;
	}
	SetFont("BIGFONT");
	soulflasher = true;
	int soulcount = CheckInventory("DMSoulCount");
	SetHudSize(1024,768,0);
	
	
	while ((CheckInventory("DMSoulCount") >= 633) && (soulflasher))
	{
		SetHudSize(1024,768,0);
		int a = 0.0;
		while ((a < 1.0) && (CheckInventory("DMSoulCount") >= 633) && (soulflasher))
		{
			a += 0.25;
			soulcount = CheckInventory("DMSoulCount");
			HudMessage(i:soulcount,s:"/666"; HUDMSG_PLAIN,766,CR_WHITE,512.0,10.0,0);
			HudMessage(i:soulcount,s:"/666"; HUDMSG_PLAIN|HUDMSG_ALPHA,765,CR_RED,512.0,10.0,0.1,a);
			if (a > 1.0)	a = 1.0;
			Delay(2);
		}
		while ((a > 0.0) && (CheckInventory("DMSoulCount") >= 633) && (soulflasher))
		{
			soulcount = CheckInventory("DMSoulCount");
			HudMessage(i:soulcount,s:"/666"; HUDMSG_PLAIN,766,CR_WHITE,512.0,10.0,0);
			HudMessage(i:soulcount,s:"/666"; HUDMSG_PLAIN|HUDMSG_ALPHA,765,CR_RED,512.0,10.0,0.1,a);
			a -= 0.2;
			if (a < 0.0)	a = 0.0;
			Delay(2);
		}
		HudMessage(s:""; HUDMSG_PLAIN,765,CR_UNTRANSLATED,0,0,1);
		Delay(17);
	}
	soulflasher = false;
}



script "s915" (void)
{
	GiveInventory("L4DCountToggler",1);
}

//==============================================================================
//==============================================================================
//				Monster Spawner Setup Scripts
//==============================================================================
//==============================================================================


#define number_of_games_and_cvars 20

str CVarsToGames[number_of_games_and_cvars][3] = {
		// Arrays hold:
		// cvar name, game mode ch, exceptions
		// Exceptions are:
		//		0 -- activate normal theme
		// 		1 -- activate magic theme
		//		2 -- activate tech theme
		//		3 -- non-theme mixed game monsters
		//		4 -- Unused.
		//		5 -- same as above AND give JokeToken AND activate joke theme
		{"user_Doom",		"Doom",			"0"},
		{"user_Dm64",		"Dm64",			"3"},
//		{"user_Doom64",		"Doom64",		"3"},
		{"user_Blood",		"Blood",		"0"},
		{"user_Duke",		"DN3D",			"0"},
		{"user_HL",			"HL",			"2"},
		{"user_HL2",		"HL2",			"2"},
		{"user_Hellspawn",	"Hellspawn",	"3"},
		{"user_Heretic",	"Heretic",		"1"},
		{"user_Hexen",		"Hexen",		"1"},
		{"user_Hexen2",		"Hexen2",		"1"},
		{"user_MM",			"MM",			"1"},
		{"user_Powerslave",	"Powerslave",	"0"},
		{"user_Quake1",		"Quake1",		"0"},
		{"user_Quake2",		"Quake2",		"2"},
		{"user_Quake4",		"Quake4",		"2"},
		{"user_ROTT",		"ROTT",			"3"},
		{"user_SW",			"ShadowWarr",	"0"},
		{"user_Strife",		"Strife",		"2"},
		{"user_L4DMon",		"L4DMon",		"3"},
		{"user_Joke",		"JokeMode",		"5"}
};

#define monTypes 5

Script "SpawnerSetup" enter
{
	if (!(ScriptSetup))
	{
		MiniThemeEnabled = false;
		// modes
		L4DMode = false;		MonsterMayhem = false;
		// directors
		L4DDir = false;			NorDir = false;
		// themes
		NormalTheme = false;	TechTheme = false;
		MagicTheme = false;		JokeTheme = false;
		// counters
		ActiveCount = 0;		ThemeMix = 0;
		MiniCount = 0;
		
		if (GetCvar("user_MonsterMayhem"))
			MonsterMayhem = true;
		if (GetCvar("user_L4DMode"))
		{
			if (GetCvar("user_JokeMode"))
			{
				GiveInventory("JokeToken",1);
				JokeTheme = true;
			}
			L4DMode = true;
			L4DDir = true;
			NormalTheme = true;
			TechTheme = true;
			MagicTheme = true;
			NorDir = false; //This must be disabled.
			ScriptSetup = true;
			Terminate; //Really, no point in bothering with the rest.
		}
		if (GetCvar("user_NorDir"))
			NorDir = true;
		if (GetCvar("user_L4DDir"))
			L4DDir = true;

		
		for(int i=0; i<number_of_games_and_cvars; i++)
		{
			if (GetCvar(CVarsToGames[i][0]))
			{				
				// Select Case
				if(!(StrIcmp(CVarsToGames[i][2],"0")))
				{
					GameModeCh[ActiveCount] = CVarsToGames[i][1];
					ActiveCount++;
					ThemeMix++;
					NormalTheme = true;
				}
				else if(!(StrIcmp(CVarsToGames[i][2],"1")))	
				{
					GameModeCh[ActiveCount] = CVarsToGames[i][1];
					ActiveCount++;
					ThemeMix++;
					MagicTheme = true;
				}
				else if(!(StrIcmp(CVarsToGames[i][2],"2")))	
				{
					GameModeCh[ActiveCount] = CVarsToGames[i][1];
					ActiveCount++;
					ThemeMix++;
					TechTheme = true;
				}
				else if(!(StrIcmp(CVarsToGames[i][2],"3")))	
				{
					MiniMode[MiniCount] = CVarsToGames[i][1];
					MiniThemeEnabled = true;
					MiniCount++;
				}
				//else if(!(StrCmp(CVarsToGames[i][2],"4")))	ThemeMix--;
				else if(!(StrIcmp(CVarsToGames[i][2],"5")))
				{	
					JokeTheme = true;	
					GiveInventory("JokeToken",1);
					MiniMode[MiniCount] = CVarsToGames[i][1];
					MiniThemeEnabled = true;
					MiniCount++;
				}
			}
		}
		ScriptSetup = true;
	}
}

#define timeout_max 50
Script "SpawnDeployMonster" (int nomini)
{
	// nomini - used for the corpse spawners.
	int roll = 0; 
	int miniroll = 0;
	int timeout = 0;
	int tm = 0;
	int mc = 0;
	
	if (!ScriptSetup)
		Delay(1);
	
	if (L4DMode) //Overrides everything else. L4DMode calls priority.
	{
		SetActorState(0,"L4D",1);
		Terminate;
	}
	else if (((ThemeMix + MiniCount) >= 19) || !(ThemeMix))
	{
		if (JokeTheme)
		{
			if (!(SetActorState(0,"Joke",1)))
				SetActorState(0,"ClassicAEoD",1);
		}
		else
			SetActorState(0,"ClassicAEoD",1);
		Terminate;
	}
	else
	{
		tm = ThemeMix-1;
		if (MiniThemeEnabled && !(nomini))
		{
			mc = MiniCount;
			roll = random(0,(tm+mc));
		}
		else
			roll = random(0,tm);
		if (roll > tm)
		{
			while (timeout < timeout_max)
			{
				//Give up trying to roll the mini. It's stupid to not land on it properly.
				if (timeout >= timeout_max-1)
				{
					roll = random(0,tm);
					timeout = timeout_max;
				}
				else
				{
					miniroll = random(0,mc);
					//We NEED this if statement. SetActorState returns a number of 
					//those who were affected. Without it, it might not spawn a monster.
					int state = SetActorState(0,MiniMode[miniroll],1);
					if (state != 0) 
					{
						Terminate;
					}
					timeout++;
				}
			}
		}
		//Fallback in case if the miniroll fails to find an appropriate state.
		SetActorState(0,GameModeCh[roll],1);		
	}
}

//I cannot believe I had to resort to such methods.
Script "SpawnDeployWeapons" (int nojoke)
{
	//nojoke is no longer used.
	int roll = 1;
	
	if (!ScriptSetup)
		Delay(1);
		
	if (L4DMode || ((TechTheme) && (MagicTheme) && (NormalTheme)) || (ThemeMix >= 15) || !(ThemeMix))
	{
		if (!(SetActorState(0,"Joke",1)))
			SetActorState(0,"C_AEoD",1);
			
	}
	else if ((TechTheme) && (MagicTheme) && (!(NormalTheme)))
	{
		if (JokeTheme)	roll = random(1,3);
		else roll = random(1,2);
		
		if (roll == 1)
			SetActorState(0,"Tech",1);
		else if (roll == 2)
			SetActorState(0,"Magic",1);
		else if (roll == 3 && !(SetActorState(0,"JokeMode",1)))
		{
			roll = random(1,2);
			if (roll == 1)	SetActorState(0,"Tech",1);
			else SetActorState(0,"Magic",1);
		}
	}
	else if ((TechTheme) && (!(MagicTheme)) && (NormalTheme))
	{
		if (JokeTheme)	roll = random(1,3);
		else roll = random(1,2);
		
		if (roll == 1)			SetActorState(0,"Tech",1);
		else if (roll == 2)		SetActorState(0,"Normal",1);
		else if (roll == 3 && !(SetActorState(0,"JokeMode",1)))
		{
			roll = random(1,2);
			if (roll == 1)	SetActorState(0,"Tech",1);
			else SetActorState(0,"Normal",1);
		}
	}
	else if ((!(TechTheme)) && (MagicTheme) && (NormalTheme))
	{
		if (JokeTheme)	roll = random(1,3);
		else roll = random(1,2);
		
		if (roll == 1)			SetActorState(0,"Normal",1);
		else if (roll == 2)		SetActorState(0,"Magic",1);
		else if (roll == 3 && !(SetActorState(0,"JokeMode",1)))
		{
			roll = random(1,2);
			if (roll == 1)	SetActorState(0,"Normal",1);
			else 			SetActorState(0,"Magic",1);
		}
	}
	else if ((!(TechTheme)) && (MagicTheme) && (!(NormalTheme)))
	{
		if (JokeTheme)	roll = random(1,2);
		else			roll = 1;
			
		if (roll == 1)
			SetActorState(0,"Magic",1);
		else if ((roll == 2) && !(SetActorState(0,"JokeMode",1)))
			SetActorState(0,"Magic",1);
	}
	else if ((!(TechTheme)) && (!(MagicTheme)) && (NormalTheme))
	{
		if (JokeTheme)	roll = random(1,2);
		else			roll = 1;
			
		if (roll == 1)
			SetActorState(0,"Normal",1);
		else if ((roll == 2) && !(SetActorState(0,"JokeMode",1)))
			SetActorState(0,"Normal",1);
	}
	else if ((TechTheme) && (!(MagicTheme)) && (!(NormalTheme)))
	{
		if (JokeTheme)	roll = random(1,2);
		else			roll = 1;
			
		if (roll == 1)
			SetActorState(0,"Tech",1);
		else if ((roll == 2) && !(SetActorState(0,"JokeMode",1)))
			SetActorState(0,"Tech",1);
	}
	else
		SetActorState(0,"C_AEoD",1);
}




//==============================================================================
//==============================================================================

//==============================================================================
//==============================================================================

Class PowerInvulBase : PowerInvulnerable
{
	Default
	{
		Inventory.icon "ARTPENTB";
	}
}

//This here is the "controller" that causes the screen fades to happen when the powerup
//runs out. It's easy. To set this up, simply change the amount of PentagramCountdown
//given to the player with the PentagramOfProtection actor, and this will do the rest.
//I've added failsafes in case if, for instance, the pentagram is dispelled by the
//diabolical dice. That is to prevent the powerdown effect from occuring, and just gets
//rid of it entirely.

Class PentagramChecker : Actor
{
	int user_tick;
	int user_time;
	Default
	{
		+NOINTERACTION
		+NODAMAGE
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			if (!master)
			{
				Destroy();
				return;
			}
			
			if (CountInv("PentagramCountdown",MasterPtr))
			{
				user_time += CountInv("PentagramCountdown",MasterPtr);
				A_TakeInventory("PentagramCountdown",32767,0,MasterPtr);
				A_StopSound(5);
			}
			else
			{
				user_time--;
			}
			
			if (master)
			{	master.bINVULNERABLE = true;	}
			
			if (user_time == 105 || user_time == 70 || user_time == 35)
			{
				if (user_time == 105)
				{
					A_PlaySound("powerups/pentagrampickup",5,1,0,ATTN_NONE);
				}
				A_GiveInventory("PentagramFade",1,MasterPtr);
			}
			
			if (user_time <= 0 || CountInv("PentagramDispelled",MasterPtr))
			{
				A_SetInventory("PowerInvulBase",0,MasterPtr);
				A_SetInventory("PentagramCountdown",0,MasterPtr);
				A_SetInventory("PentagramDispelled",0,MasterPtr);
				A_SetInventory("PentagramIsOn",0,MasterPtr);
				master.bALLOWPAIN = true;
				Destroy();
				return;
			}
			return;
		}
		Wait;
	}
}

//==============================================================================
//==============================================================================
//								The Demon Morph
//==============================================================================
//==============================================================================

Class DMSoulFragment : CustomInventory
{
	int count;
	int scale1, scale2;
	int gs;
	int t;
	Actor soul;
	Default
	{
		+INVENTORY.ALWAYSPICKUP
		//+FLOATBOB
		+NOGRAVITY
		+BRIGHT
		+NOTELESTOMP
		-TELESTOMP
		-COUNTITEM
		+DONTGIB
		Species "Permanent";
		Scale 0.0;
		RenderStyle "Add";
		Inventory.PickupSound "reilsss/health/soul";
		Inventory.MaxAmount 0;
	}
	States
	{
	Spawn:
		TNT1 A 10 NoDelay 
		{
			invoker.t = tid;
			Thing_ChangeTID(0,0);
			A_Stop();
		}
		X099 A 0 
		{
			invoker.soul = Spawn("DMSoulTarget",pos);
			if (invoker.soul)
			{
				invoker.soul.master = self;
			}
			if (pos.z < floorz + 10.0)
			{	A_Warp(AAPTR_DEFAULT,0,0,10,0,WARPF_NOCHECKPOSITION|WARPF_TOFLOOR);	}
		}
		Goto ScalingUp;
	MoveUp:
		"####" "#" 0 A_Warp(AAPTR_DEFAULT,0,0,10,0,WARPF_NOCHECKPOSITION|WARPF_TOFLOOR);
	ScalingUp:
		"####" "#" 1
		{
			if (invoker.scale1 < 180)
			{
				invoker.scale1 += 5;
				A_SetScale((cos(invoker.scale1 - 90) + 1) * 0.05);
				return ResolveState(null);
			}
			else
			{
				if (invoker.count >= 35 * 15)
				{
					A_SetScale(Scale.X - 0.005);
					if (Scale.X <= 0.0)
					{
						A_RemoveChildren(true,RMVF_EVERYTHING);
						return ResolveState("Null");
					}
					return ResolveState(null);
				}
				else
				{
					invoker.count++;
					invoker.scale2 = (invoker.scale2 + (360 / 35)) % 360;
					A_SetScale(0.05 + (cos(invoker.scale2) * 0.02));
				}
				
			}
			return ResolveState(null);
		}
		Loop;
	Pickup:
		TNT1 A 0 
		{
			if (invoker.soul)	{	invoker.soul.Destroy();	}
			A_GiveInventory("DMSoulCount",random(1,6));
			ACS_NamedExecuteAlways("AESoulCount",0,0,0,0);
			if (CountInv("DMSoulCount") >= 666)
			{
				A_TakeInventory("DMSoulCount",666);
				A_GiveInventory("DemonMorphPowerup",1);
			}
			else
			{
				A_GiveInventory("DMSoulHealth",1);
			}
			return true;
		}
		Stop;
	}
}

Class DemonMorphStartSound : Actor
{
	Default
	{
		+NOINTERACTION
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_PlaySound("DemonMorph/Grow",5|CHAN_NOPAUSE,1,0,ATTN_NONE);
		TNT1 A 10 A_PlaySound("DemonMorph/Start",6|CHAN_NOPAUSE,1,0,ATTN_NONE);
		Stop;
	}
}

Class SoulSeekOn : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
		-COUNTITEM
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_SetShootable();
			bCANTSEEK = false;
		}
		Stop;
	}
}

Class SoulSeekOff : CustomInventory
{
	States
	{
	Pickup:
		TNT1 A 0 
		{
			if (CheckClass("DMSoulTarget"))
			{
				A_UnSetShootable();
				bCANTSEEK = true;
				return true;
			}
			return false;
		}
		Stop;
	}
}

Class DMSoulTarget : Actor
{
	int count;
	Default
	{
		Monster;
		+NEVERTARGET
		-SOLID
		+NOCLIP
		+NOBLOOD
		+NONSHOOTABLE
		-SHOOTABLE
		+NODAMAGE
		-COUNTKILL
		+NOTONAUTOMAP
		+DONTTHRUST
		+CANTSEEK
		+NOGRAVITY
		+NOTARGETSWITCH
		PainChance "Normal", 0;
		PainChance "SoulReaperPull", 256;
		DamageFactor "Normal", 0;
		DamageFactor "SoulReaperPull", 1;
		Radius 4;
		Height 4;
		RenderStyle "None";
	}
	States
	{
	Spawn:
		PLAY A 35 NoDelay
		{
			if (count < 16 && master)
			{
				count++;
				Vector3 newpos = master.pos;
				newpos.z += 4;
				SetOrigin(newpos,false);
				return ResolveState(null);
			}
			return ResolveState("Null");
		}
		Wait;
	Pain.SoulReaperPull:
	Death.SoulReaperPull:
		TNT1 A 1
		{
			bNOPAIN = true;
			A_UnsetShootable();
			A_FaceTarget(0,0);
			A_SpawnItemEx("DMSoulMissile",flags:SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_TRANSFERPOINTERS,tid: tid);
			if (master)	{	master.Destroy();	}
		}
		Stop;
	Death:
		TNT1 A 0;
		Stop;
	}
}

Class DMSoulMissile : Actor
{
	int x0, x1;
	int y0, y1;
	Vector2 pos1, pos0;
	Default
	{
		Projectile;
		+SEEKERMISSILE
		+DONTREFLECT
		+THRUACTORS
		+BRIGHT
		RenderStyle "Add";
		Scale 0.05;
		Speed 10;
	}
	States
	{
	Spawn:
	//Unless you know what you're doing...
	//DO NOT FUCK WITH THIS.
	//Sincerely, Management.
		X099 A 0 NoDelay
		{
			if (CheckClass("PlayerPawn",AAPTR_TRACER,1))	{	return ResolveState("SeekOnce");	}
			A_RearrangePointers(AAPTR_TRACER,AAPTR_DEFAULT,AAPTR_TARGET,4);
			return ResolveState(null);
		}
		Goto SeekOnce;
	SeekOnce:
		X099 AAAA 0 A_SeekerMissile(90,90,SMF_PRECISE);
		Goto Looping;
	Looping:
		X099 A 1
		{
			A_FaceTracer(0,0,0,0,FAF_TOP);
			A_ChangeVelocity(cos(pitch)*20,0,-sin(pitch)*20,CVF_RELATIVE|CVF_REPLACE);
			if (GetDistance(true,TracerPtr) <= 32)
			{	return ResolveState("End");	}
			return ResolveState(null);
		}
		Wait;
	Death:
	End:
		X099 A 0 
		{
			if (tracer && tracer.CheckClass("PlayerPawn",DefPtr,true))
			{
				SetOrigin(tracer.pos, true);
				if ((abs(tracer.vel.x) + abs(tracer.vel.y)) == 0)
				{
					tracer.A_GiveInventory("DMSoulFragment");
				}
				else
				{
					tracer.A_SpawnItemEx("DMSoulFragment",0,0,8,0,0,1,0,SXF_NOCHECKPOSITION,0,tid);
				}
			}
		}
		Stop;
	}
}


Class DMSoulCount : Inventory
{
	Default
	{
		+INVENTORY.IGNORESKILL
		-COUNTITEM
		Inventory.Amount 1;
		Inventory.MaxAmount 2000;
		Inventory.InterHubAmount 2000;
	}
}

Class DMSoulHealth : HealthBonus
{
	Default
	{
		+INVENTORY.IGNORESKILL
		-COUNTITEM
		Inventory.MaxAmount 666;
		Inventory.Amount 1;
	}
}

Class DMBlackParticle : Actor
{
	int count;
	int user_x;
	int user_y;
	int user_z;
	Default
	{
		RenderStyle "Translucent";
		+NOINTERACTION
		+NOTIMEFREEZE
		Scale 0.2;
	}
	States
	{
	Spawn:
		X00A A 0 NoDelay A_SetScale(frandom(0.18,0.22));
	Tick:
		X00A A 1 
		{
			A_ChangeVelocity(vel.x*(0.95),vel.y*(0.95),vel.z+(0.005),CVF_REPLACE);
			count++;
			if (count > 4)
			{
				count = 0;
				A_SetScale(Scale.X-0.01);
			}
			return A_JumpIf(Scale.X <= 0.0,"Null");
		}
		Wait;
	}
}

Class DemonMorphPowerup : CustomInventory
{
	int ticking;
	int limit;
	Default
	{
		+INVENTORY.BIGPOWERUP
		+INVENTORY.QUIET
		+INVENTORY.NOSCREENFLASH
		+INVENTORY.IGNORESKILL
		+FLOATBOB
		+NOTIMEFREEZE
		+DONTGIB
		+NOTELESTOMP
		Species "Permanent";
		RenderStyle "Stencil";
		StencilColor "Black";
		Scale 0.25;
		Inventory.Amount 1;
		Inventory.MaxAmount 1; //This is one powerup that cannot be activated later. Only now.
		Inventory.InterHubAmount 0;
	}
	
	States
	{
	Spawn:
		QPEI A 2
		{
			if (!invoker.limit) {	invoker.limit = random(35 * 5, 35 * 15);	}
			
			invoker.ticking += 2;
			if (invoker.ticking >= invoker.limit)
			{
				A_PlaySound("DemonMorph/Scream",CHAN_AUTO,1,0);
				invoker.ticking = 0;
				invoker.limit = random(35 * 5, 35 * 15);
			}
			
			if (!A_CheckSight("Null"))
			{
				A_SpawnItemEx("DMBlackParticle",0,0,15.5,frandom(2.0,4.0),0,0,random(0,359),SXF_NOCHECKPOSITION);
				for (int i = 0; i < 8; i++)
				{
					A_SpawnItemEx("DMBlackParticle",0,0,15.5,frandom(2.0,4.0),0,0,random(0,359),SXF_NOCHECKPOSITION,192);
				}
			}
		}
		Wait;
	Pickup:
		TNT1 A 0 
		{
			A_SpawnItemEx("DemonMorphManager", flags: SXF_NOCHECKPOSITION|SXF_SETMASTER);
			/*
			if (CountInv("MorphOverrideable") > 0)
			{
				A_ClearOverlays();
				A_SetInventory("MorphOverrideable",0);
				ACS_NamedExecuteAlways("ForceUnmorph",0,0,0,0);
				return true;
			}
			*/
			A_SetInventory("SSRSecondShotToken",0);
			A_SetInventory("SSLSecondShotToken",0);
			A_SetInventory("ElectroDriverToken",0);
			A_SetInventory("SoulReaperAltToken",0);
			A_SpawnItemEx("DemonMorphStartSound",flags: SXF_NOCHECKPOSITION|SXF_SETMASTER);
			/*
			if (CountInv("PowerDemonMorph"))
			{
				A_SetBlend("Grey",1,17);
				A_PlaySound("DemonMorph/Scream",CHAN_AUTO|CHAN_NOPAUSE,1,0,ATTN_NONE);
				
				A_GiveInventory("DemonMorphGiver",1);
				A_GiveInventory("DemonMorphFullBright",1);
				A_SetInvulnerable();
				
				return true;
			}
			*/
			
			if (health > 200)
			{	A_GiveInventory("TempHealthToken",health + stamina);	}
			
			//A_GiveInventory("MorphToken",1);
			//A_SetInventory("PowerLightAmp",0);
			//A_GiveInventory("DemonMorphGiver",1);
			return true;
		}
		Stop;
	}
}

Class DemonMorphGiver : Inventory
{
	Default
	{
		Inventory.InterhubAmount 0;
	}
}

Class PowerDemonMorph : Inventory
{
	Default
	{
		Inventory.InterhubAmount 0;
	}
}

Class DemonPlayerMorph : DoomPlayer
{
	
	Default
	{
		//POWER OVERWHELMING MOTHERFUCKERS!!!
		RipLevelMin 666;
		DamageFactor 0.0;
		DamageFactor "DemonMorph", 0;
		DamageFactor "HolyNoResist", 0;
		+NORADIUSDMG
		+NODAMAGE
		+NOPAIN
		+DONTMORPH
		+PICKUP
		+NOTIMEFREEZE
		+INVULNERABLE
		+PLAYERPAWN.NOTHRUSTWHENINVUL
		+PLAYERPAWN.CROUCHABLEMORPH
		+DONTTHRUST
		+TELESTOMP
		+LAXTELEFRAGDMG
		+NOSKIN
		Health 666;
		Player.MorphWeapon "AEoDDemonMorphHand";
	}
}

Class DemonMorphManager : Actor
{
	int waittics;
	int timer;
	Weapon weap, holding;
	int first;
	Default
	{
		+NOINTERACTION
		+NOTIMEFREEZE
	}
	
	override void Tick()
	{
		if (!master)	{	A_LogInt(-1); Destroy();	}
		Super.Tick();
	}
	
	override void PostBeginPlay()
	{
		if (!master)	{	Destroy();	}
		ThinkerIterator it = ThinkerIterator.Create("DemonMorphManager");
		Actor mo;
		while (mo = DemonMorphManager(it.Next()))
		{
			if (mo == self)
			{	continue;	}
			
			// Call me paranoid but shit could fail at any time.
			// Anyway, update any managers around that are already attached
			// to the player, and then vanish.
			if (mo.master == master && mo.CheckClass("DemonMorphManager"))
			{
				DemonMorphManager mng = DemonMorphManager(mo);
				if (mng)
				{
					mng.timer += 35 * 30;
					master.A_SetBlend("Grey",1,17);
					Powerup lite1 = Powerup(master.FindInventory("PowerLightAmp"));
					
					if (lite1)
					{
						lite1.EffectTics = mng.timer;
					}
					A_Remove(DefPtr,RMVF_EVERYTHING);
					return;
				}
			}
		}
		timer = 35 * 35;
		// Program PreMorphWeapon and morph checking here.
		
		if (master.player.PreMorphWeapon)
		{
			waittics = 1;
			master.ACS_NamedExecuteAlways("ForceUnmorph",0,0,0,0);
		}
		A_GiveInventory("DemonMorphToken",1,MasterPtr);
		Super.PostBeginPlay();
	}
	
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			if (waittics > 0)
			{	
				waittics--;
				master.ACS_NamedExecuteAlways("ForceUnmorph",0,0,0,0);
				return ResolveState(null);
			}
			
			if (!first)
			{
				A_GiveInventory("PowerDemonMorph",1,MasterPtr);
				A_GiveInventory("WeaponRecorder",1,MasterPtr);
				master.A_StopSound(5);
				master.A_StopSound(6);
				master.A_StopSound(7);
				master.A_StopSound(CHAN_BODY);
				master.A_StopSound(CHAN_WEAPON);
				master.A_StopSound(CHAN_VOICE);
				master.A_StopSound(CHAN_ITEM);
				holding = master.player.ReadyWeapon;
				master.bDONTMORPH = true;
				master.player.ReadyWeapon = null;
				
				A_GiveInventory("AEoDDemonMorphHand",1,MasterPtr);
				master.A_SelectWeapon("AEoDDemonMorphHand");
				first = 1;
			}
			timer--;
			if (timer < 1)
			{
				
				A_SetInventory("DemonMorphGiver",0,MasterPtr);
				A_SetInventory("PowerDemonMorph",0,MasterPtr);
				A_SetInventory("DemonMorphToken",0,MasterPtr);
				A_SetInventory("AEoDDemonMorphHand",0,MasterPtr);
				A_GiveInventory("DemonMorphRemoval",1,MasterPtr);
				master.bDONTMORPH = master.bDONTTHRUST = master.bNODAMAGE = master.bNOPAIN = false;
				master.RipLevelMin = 1;
				A_SetHealth(200 + CountInv("TempHealthToken",MasterPtr),MasterPtr);
				
				
				if (holding)
				{
					if (GetCvar("aeodweapondebug"))	A_LogInt(1);
					Class<Weapon> hd = (Class<Weapon>)(holding.GetClass());
					master.A_SelectWeapon(hd);
				}
				else
				{
					if (GetCvar("aeodweapondebug"))	A_LogInt(2);
					ACS_NamedExecuteWithResult("AEoDWeaponRestorer",0,0,0,0);
				}
				
				return ResolveState("Null");
			}
			return ResolveState(null);
		}
		Wait;
	}
}

Class WeaponRecorder : CustomInventory
{
	Default { +INVENTORY.ALWAYSPICKUP }
	States
	{
	Pickup:
		TNT1 A 0
		{
			ACS_NamedExecuteWithResult("RecordWeapon",0,0,0,0);
		}
		Stop;
	}
}

Class AEoDWeaponRestorer : CustomInventory
{
	Default { +INVENTORY.ALWAYSPICKUP }
	States
	{
	Pickup:
		TNT1 A 0
		{
			ACS_NamedExecuteWithResult("PostMorphWeapon",0,0,0,0);
		}
		Stop;
	}
}

Class DemonMorphToken : Inventory
{
	Default
	{
		Inventory.InterhubAmount 0;
	}
}

Class AEoDDemonMorphHand : Weapon
{
	int sine;
	int first;
	int timer;
	Default
	{
		Inventory.InterhubAmount 0;
		+WEAPON.CHEATNOTWEAPON
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.QUIET
		+INVENTORY.NOSCREENFLASH
		+WEAPON.AMMO_OPTIONAL
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
	}
	States
	{
	Spawn:
		M666 A 0;
		Stop;
	Overlay.Begin:
		M666 A 1 
		{
			A_SpawnItemEx("DemonMorphScreams",flags: SXF_NOCHECKPOSITION|SXF_SETTARGET);
			A_PlaySound("DemonMorph/Loop",7|CHAN_NOPAUSE,1,1,ATTN_NONE);
			A_SetBlend("White",0.125,10);
		}
		M666 A 1 A_SetBlend("White",0.25,10);
		M666 A 1 A_SetBlend("White",0.375,10);
		M666 A 1 A_SetBlend("White",0.5,10);
		M666 A 1 A_SetBlend("White",0.625,10);
		M666 A 1 A_SetBlend("White",0.75,10);
		M666 A 1 A_SetBlend("White",0.875,10);
		M666 A 0
		{
			A_SetBlend("White",1.0,10);
			A_GiveInventory("DemonMorphFullBright",1);
			A_GiveInventory("NoAEoDHUDToken",1);
			ACS_NamedExecuteAlways("DemonMorphMusic",0,1,0,0);
			if (GetCvar("user_AllowDemonMorphMusic"))
			{
				A_SpawnItemEx("DemonMorphMusic",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			}
		}
		Stop;
	Overlay.Invul:
		M666 A 1
		{
			bDONTMORPH = bDONTTHRUST = bNODAMAGE = bNOPAIN = bINVULNERABLE = true;
			RipLevelMin = 666;
			A_SetHealth(666);
		}
		Wait;
	Select:
		M666 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_Raise();
		Goto Ready;
	Deselect:
		M666 A 0 
		{
			A_ClearOverlays();
			A_ZoomFactor(1.0);
			A_GiveInventory("DemonMorphRemoval",1);
			A_TakeInventory("DemonMorphActiveToken",1000,0);
			//A_GiveInventory("PentagramDispelled",1);
		}
		Goto DesLoop;
	DesLoop:
		M666 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_Lower();
		Loop;
	Ready:
		M666 A 1
		{	
			if (!CountInv("DemonMorphToken"))
			{
				A_WeaponReady(WRF_NOFIRE);
				ACS_NamedExecuteWithResult("PostMorphWeapon",0,0,0,0);
				return;
			}
			if (!invoker.first)
			{
				if (CountInv("PowerInvulBase"))
				{	A_GiveInventory("PentagramDispelled");	}
				A_Overlay(40001, "Overlay.Invul");
				A_Overlay(40002, "Overlay.Begin");
				A_WeaponOffset(0,32);
				invoker.first = 1;
			}
			A_WeaponReady(WRF_NOSWITCH|WRF_NOBOB);
			
			invoker.sine = (invoker.sine + 5) % 360;
			A_ZoomFactor(1 + (sin(invoker.sine) * 0.095),ZOOM_NOSCALETURNING);  
			return;
		}
		Loop;
	AltFire:
	Fire:
		//Note: The damage has been moved directly to the puff itself so it can ignore damagefactors.
		M666 A 0 
		{
			A_RailAttack(20000,0,0,-1,-1,RGF_SILENT,0,"DeathTouchPuff",0,0,32766,0,16,0,"DemonMorphExploder");
			A_SpawnItemEx("DemonMorphShootingSound", flags: SXF_NOCHECKPOSITION);
			invoker.sine = 0;
		}
		M666 A 1 A_ZoomFactor(2.000,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(1.500,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(1.250,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(1.000,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(0.980,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(0.960,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(0.940,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(0.930,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(0.940,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(0.960,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(0.980,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(1.000,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(1.020,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(1.030,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(1.040,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(1.030,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(1.020,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(1.015,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(1.010,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		M666 A 1 A_ZoomFactor(1.005,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		/*
		M666 A 1 A_ZoomFactor(1.3,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(1.6,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(1.9,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(1.7,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(1.5,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(1.2,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(1.0,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(0.9,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(0.8,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(0.7,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(0.85,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(0.9,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(0.95,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(1.00,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(1.05,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(1.1,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(1.13,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(1.1,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(1.07,ZOOM_INSTANT|ZOOM_NOSCALETURNING)
		M666 A 1 A_ZoomFactor(1.04,ZOOM_INSTANT|ZOOM_NOSCALETURNING)*/
		M666 A 0 A_Refire();
		Goto Ready;
	Remove:
		M666 A 1 A_TakeInventory("AEoDDemonMorphHand",1000,0);
		Goto Deselect;
	}
}

Class DemonMorphMusic : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_PlaySound("Synthetic666",5,1,1,ATTN_NONE);
		}
	Waiting:
		TNT1 A 5
		{
			if (CountInv("PowerDemonMorph",MasterPtr))
			{	return ResolveState(null);	}
			A_StopSound(5);
			return ResolveState("Null");
		}
		Loop;
	}
}

Class DemonMorphShootingSound : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTIMEFREEZE
		+NOTONAUTOMAP
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			if (random(0,1))
			{
				A_PlaySound("DemonMorph/Shoot1",5|CHAN_NOPAUSE,1,0,ATTN_NONE);
				A_PlaySound("DemonMorph/Shoot1",7|CHAN_NOPAUSE,1,0,ATTN_NONE);
			}
			else
			{
				A_PlaySound("DemonMorph/Shoot2",5|CHAN_NOPAUSE,1,0,ATTN_NONE);
				A_PlaySound("DemonMorph/Shoot2",7|CHAN_NOPAUSE,1,0,ATTN_NONE);
			}
		}
		Stop;
	}
}
		

Class DemonMorphExploder : Actor
{
	Default
	{
		Projectile;
		+NOINTERACTION
		+NODAMAGETHRUST
		+FORCERADIUSDMG
		+EXTREMEDEATH
		+NOTIMEFREEZE
		+PUFFGETSOWNER
		+NOTONAUTOMAP
		DamageType "DemonMorph";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Explode(666,66,0,0,66);
		Stop;
	}
}

Class DeathTouchPuff : Actor
{
	Default
	{
		Projectile;
		+ALWAYSPUFF
		+NOINTERACTION
		+DONTSPLASH
		+PUFFGETSOWNER
		+FORCERADIUSDMG
		+PUFFONACTORS
		+NOTIMEFREEZE
		+NOTONAUTOMAP
		//+HITTRACER
		+EXTREMEDEATH
		DamageType "DemonMorph";
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Explode(666,66,0,0,66);
		Stop;
	}
}

Class DemonMorphFogOff : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTIMEFREEZE
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay 
		{
			A_GiveInventory("DemonMorphRemoval",1,TargetPtr);
			
			ThinkerIterator it = ThinkerIterator.Create("DemonMorphScreams");
			Actor mo;
			while (mo = DemonMorphScreams(it.Next()))
			{
				// Make sure the targets align.
				if (mo.CheckClass("DemonMorphScreams") /*&& mo.target == target */)
				{
					mo.Destroy();
				}
			}
		}
		Stop;
	}
}

Class DemonMorphRemoval : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 
		{
			ACS_NamedExecuteAlways("DemonMorphMusic",0,0,0,0);
			A_SetInventory("PentagramIsOn",0,0);
			A_SetInventory("PentagramCountdown",0);
			A_SetInventory("PentagramDispelled",0);
			A_SetInventory("PowerInvulBase",0);
			A_SetInventory("DemonMorphActiveToken",0);
			A_SetInventory("PowerDemonMorph",0);
			A_SetInventory("NoAEoDHUDToken",0);
			bNODAMAGE = bNOPAIN = false;
			bJUSTHIT = true;
			A_SetInventory("MorphToken",0);
			A_StopSound(5);
			A_StopSound(6);
			A_StopSound(7);
			A_SetBlend("White",1.0,10);
			A_PlaySound("DemonMorph/Stop;",5,1,0,ATTN_NONE);
			A_Explode(30000,2048,0,0,2048,0,0,null,"Telefrag");
			A_GiveInventory("DemonMorphScreen",1);
			A_SetHealth(Clamp(CountInv("TempHealthToken"), 200 + stamina, 666));
			A_SetInventory("TempHealthToken",0);
		}
		Stop;
	}
}

Class GeneralMorphFogOff : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTIMEFREEZE
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay A_GiveInventory("GeneralMorphRemoval",1,AAPTR_TARGET);
		Stop;
	}
}

Class GeneralMorphRemoval : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 
		{
			A_TakeInventory("SSLSecondShotToken",32767);
			A_TakeInventory("SSRSecondShotToken",32767);
			A_TakeInventory("PentagramIsOn",9999,0);
			A_TakeInventory("PentagramCountdown",9999,0);
			A_TakeInventory("PentagramDispelled",9999,0);
			A_TakeInventory("PowerInvulBase",10000,0);
			A_TakeInventory("DemonMorphActiveToken",1000,0);
			A_TakeInventory("PowerDemonMorph",1000,0);
			A_TakeInventory("NoAEoDHUDToken",1000,0);
			bNODAMAGE = bNOPAIN = false;
			bJUSTHIT = true;
			A_StopSound(5);
			A_StopSound(6);
			A_StopSound(7);
			A_SetBlend("White",1.0,10);
			A_PlaySound("DemonMorph/Stop;",5,1,0,ATTN_NONE);
			A_GiveInventory("DemonMorphScreen",1);
			A_SetHealth(Clamp(CountInv("TempHealthToken"),200 + stamina,666));
			A_TakeInventory("TempHealthToken",32767,0);
		}
		Stop;
	}
}

Class DemonMorphActiveToken : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
		Inventory.InterHubAmount 0;
	}
}

Class DemonMorphScreen : PowerupGiver
{
	Default
	{
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.QUIET
		Powerup.Type "PowerInvulBase";
		Powerup.Duration 35; //9000000
	}
}

Class DemonMorphFullBright : PowerupGiver
{
	Default
	{
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.QUIET
		+INVENTORY.ADDITIVETIME
		Powerup.Type "PowerLightAmp";
		Powerup.Duration 1225;
		Inventory.MaxAmount 0;
	}
}

Class PowerDMScreen : PowerProtection
{
	Default
	{
		DamageFactor 0.0;
	}
}

Class DemonMorphScreams : Actor
{
	int ticking;
	int count;
	
	Default
	{
		Projectile;
		+NOINTERACTION
		+NOTIMEFREEZE
		+NOTONAUTOMAP
		+NODAMAGE
		RenderStyle "None";
	}
	States
	{
	Spawn:
		//This part is needed so the morph has the chance to actually kick in 
		//before it checks, otherwise it won't work. It's never accessed again.
		TNT1 A 35 NoDelay
		{
			if (target && target.CheckClass("DemonPlayerMorph"))
			{
				A_PlaySound("DemonMorph/Scream",CHAN_AUTO|CHAN_NOPAUSE,1,0,ATTN_NONE);
				A_SetTics(35 * random(1,3));
				return ResolveState(null);
			}
			return ResolveState("End");
		}
		Wait;
	End:
		TNT1 A 0 
		{
			A_StopSound(CHAN_AUTO);
			A_StopSound(CHAN_WEAPON);
			A_StopSound(CHAN_ITEM);
			A_StopSound(CHAN_VOICE);
			A_StopSound(CHAN_BODY);
			A_StopSound(5);
			A_StopSound(6);
			A_StopSound(7);
		}
		Stop;
	}
}
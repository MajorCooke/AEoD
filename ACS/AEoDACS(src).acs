#library "AEoDACS"
#include "zcommon.acs"

//============================================================================================================
//============================================================================================================
/*
	"ddice.o" is the script for the diabolic dice, by Ichor. I never got the source code of the thing
	and for now, and I doubt is around anymore. I could decompile it, but is not neccesary ATM.
	Not sure which scripts it uses.
*/

//============================================================================================================
//============================================================================================================
/*
	"Dropsys" contains the scripts used for the whole dropping weapon system. Is too big,
	therefore it has it's own file.

Uses scripts 689, 690, 691 for the anti cheat system (before anyone starts bitching, you can even turn it
off in the menu, so back off).
Uses scripts 797(enter), 798, 799, 800, 801 for the script system.

*/

//============================================================================================================
//============================================================================================================
/*
	"GameType" contains the scripts used in the game type/theme selection.

Uses scripts 901(enter), 912(unused), 913(debug only), 914 (body count tracker), 915(L4D counter switch)

*/

//============================================================================================================
//============================================================================================================
/*
	"Hammer" contains the scripts used in by the Time Hammer weapon (effect of the dice), where it
	returns to the last weapon used.

Uses scripts 957 and 958

*/

//============================================================================================================
//============================================================================================================
/*
	"Spells" contains the scripts used by the whole quickspell system. The displays and cycle through
	the available ones.

Uses scripts 650-656

*/



//------------------------------------------------------------------------
/*
So, re-counting, spells used in the other files are
650,651,652,653,654,655
689, 690, 691
797,798,799,800,801
901,912,913,914
957,958

//------------------------------------------------------------------------


//============================================================================================================
//============================================================================================================
/*
	From this point on, is the rest of the other files merged into one. No need to have so many script files
	around.
*/
//============================================================================================================
//============================================================================================================

//Debug stuff here. All it does it clear the screen of all of AEoD's hud messages
//as they tend to get in the way of screenshots.
Script "WipeHud" (void)
{
	for (int i = 0; i < 999; i++)
	{
		HudMessage(s:""; HUDMSG_PLAIN,i,CR_UNTRANSLATED,0,0,1);
	}
}

int recoilactive=1;
	
script "s848" Enter
{
	GiveInventory("PlayerReset",1);
	TakeInventory("Portal1Token",100);
	TakeInventory("Portal2Token",100);
	TakeInventory("ThunderRingCount",100);
	Thing_ChangeTID(0,21000+PlayerNumber());		//this is used by the Joke mode weapon
	fadeto(0,0,0,1.0,0);
	fadeto (0, 0, 0, 0, 0.3);
}

Script "AEFadeToBlack" (void)
{
	FadeTo(0,0,0,1.0,5.0);
}

//	The main recoil script. Sure we have A_SetPitch and A_SetAngle, but this basically merges both in one call
script "s850" (void)
{
	if(checkinventory("RecoilCheckDummy")==0)
	{
		giveinventory("RecoilCheckDummy",1);
		hudmessage(s:"Recoil deactivated";HUDMSG_FADEOUT,100,6,0.5,0.0,2.0,0.5);
	}

	else if(checkinventory("RecoilCheckDummy")==1)
	{
		takeinventory("RecoilCheckDummy",1);
		hudmessage(s:"Recoil activated";HUDMSG_FADEOUT,100,6,0.5,0.0,2.0,0.5);
	}
	
}


//This is a more precise recoil, it eliminates the randomization multiplier factor in the 
//"climb" (vertical) pitch change.
script "s851" (int climb, int twist)
{ 
	int playerpitch = GetActorPitch(0) -(climb*8); // ((random(1,3)+5)*climb);
	if (playerpitch > -5780)
		{
		SetActorPitch (0, playerpitch);
		}
	int playerangle = GetActorAngle(0) - ((random(1,2)+4)*twist);
	SetActorAngle (0, playerangle);
}



//is the same as the last one, except it is used for the thunderbolt, and no matter
//that the recoil is disabled, this one will execute
script "s852" (int climb, int twist)
{ 
	if(recoilactive==1)
	{

	int playerpitch = GetActorPitch(0) - ((random(1,3)+5)*climb);
	if (playerpitch > -5780)
		{
		SetActorPitch (0, playerpitch);
		}
	int playerangle = GetActorAngle(0) - ((random(1,2)+4)*twist);
	SetActorAngle (0, playerangle);
	}
}


//============================================================================================================
//============================================================================================================

//		Sound of monsters

//============================================================================================================
//============================================================================================================

script "s853" (void) // addr = 8, flags=0000
{
    AmbientSound("halflife/monsters/nihilant/idle_sight", 127);
    Delay((35 * 12));
    restart;

}

//============================================================================================================
//============================================================================================================

//		Translation called by the disintegrate death of the monsters

//============================================================================================================
//============================================================================================================
script "s857" open
{
	//Disintegration
	CreateTranslation(50,0:255=[0,0,0]:[0,0,0]);
	//Used for the new Redeemer effects
	CreateTranslation(51,0:255=%[0,0,0]:[1.0,0.35,0.0]);
	CreateTranslation(52,0:255=%[0,0,0]:[1.0,0.4,0.0]);
	CreateTranslation(53,0:255=%[0,0,0]:[1.0,0.45,0.0]);
	CreateTranslation(54,0:255=%[0,0,0]:[1.0,0.5,0.0]);
	CreateTranslation(55,0:255=%[0,0,0]:[1.0,0.55,0.0]);
	CreateTranslation(56,0:255=%[0,0,0]:[1.0,0.6,0.0]);
	CreateTranslation(57,0:255=%[0,0,0]:[1.0,0.65,0.0]);
	//Deals with popcorn gun
	//Reds
	CreateTranslation(58,0:255=%[0,0,0]:[0.6,0.0,0.0]);
	CreateTranslation(59,0:255=%[0,0,0]:[0.7,0.0,0.0]);
	CreateTranslation(60,0:255=%[0,0,0]:[0.8,0.0,0.0]);
	CreateTranslation(61,0:255=%[0,0,0]:[0.9,0.0,0.0]);
	CreateTranslation(62,0:255=%[0,0,0]:[1.0,0.0,0.0]);
	//Greens
	CreateTranslation(63,0:255=%[0,0,0]:[0.0,0.6,0.0]);
	CreateTranslation(64,0:255=%[0,0,0]:[0.0,0.7,0.0]);
	CreateTranslation(65,0:255=%[0,0,0]:[0.0,0.8,0.0]);
	CreateTranslation(66,0:255=%[0,0,0]:[0.0,0.9,0.0]);
	CreateTranslation(67,0:255=%[0,0,0]:[0.0,1.0,0.0]);
	//Blues (OWWWW~!)
	CreateTranslation(68,0:255=%[0,0,0]:[0.0,0.0,0.6]);
	CreateTranslation(69,0:255=%[0,0,0]:[0.0,0.0,0.7]);
	CreateTranslation(70,0:255=%[0,0,0]:[0.0,0.0,0.8]);
	CreateTranslation(71,0:255=%[0,0,0]:[0.0,0.0,0.9]);
	CreateTranslation(72,0:255=%[0,0,0]:[0.0,0.0,1.0]);
	//Red/Orange
	CreateTranslation(73,0:255=%[0,0,0]:[1.0,0.25,0.0]);
	CreateTranslation(74,0:255=%[0,0,0]:[1.0,0.5,0.0]);
	CreateTranslation(75,0:255=%[0,0,0]:[1.0,0.75,0.0]);
	CreateTranslation(76,0:255=%[0,0,0]:[1.0,1.0,0.0]);
	//Red/Pink
	CreateTranslation(77,0:255=%[0,0,0]:[1.0,0.0,0.25]);
	CreateTranslation(78,0:255=%[0,0,0]:[1.0,0.0,0.5]);
	CreateTranslation(79,0:255=%[0,0,0]:[1.0,0.0,0.75]);
	CreateTranslation(80,0:255=%[0,0,0]:[1.0,0.0,1.0]);
	//Green/Yellow
	CreateTranslation(81,0:255=%[0,0,0]:[0.25,1.0,0.0]);
	CreateTranslation(82,0:255=%[0,0,0]:[0.5,1.0,0.0]);
	CreateTranslation(83,0:255=%[0,0,0]:[0.75,1.0,0.0]);
	CreateTranslation(84,0:255=%[0,0,0]:[1.0,1.0,0.0]);
	//Green/Cyan
	CreateTranslation(85,0:255=%[0,0,0]:[0.0,1.0,0.25]);
	CreateTranslation(86,0:255=%[0,0,0]:[0.0,1.0,0.5]);
	CreateTranslation(87,0:255=%[0,0,0]:[0.0,1.0,0.75]);
	CreateTranslation(88,0:255=%[0,0,0]:[0.0,1.0,1.0]);
	//Blue/Purple
	CreateTranslation(89,0:255=%[0,0,0]:[0.25,0.0,1.0]);
	CreateTranslation(90,0:255=%[0,0,0]:[0.5,0.0,1.0]);
	CreateTranslation(91,0:255=%[0,0,0]:[0.75,0.0,1.0]);
	//Blue/Cyan
	CreateTranslation(92,0:255=%[0,0,0]:[0.0,0.25,1.0]);
	CreateTranslation(93,0:255=%[0,0,0]:[0.0,0.5,1.0]);
	CreateTranslation(94,0:255=%[0,0,0]:[0.0,0.75,1.0]);
	//Blacks
	CreateTranslation(47,0:255=%[0,0,0]:[0.3,0.3,0.3]);
	CreateTranslation(48,0:255=%[0,0,0]:[0.2,0.2,0.2]);
	CreateTranslation(49,0:255=%[0,0,0]:[0.1,0.1,0.1]);
	//Whites
	CreateTranslation(95,0:255=%[0,0,0]:[0.7,0.7,0.7]);
	CreateTranslation(96,0:255=%[0,0,0]:[0.8,0.8,0.8]);
	CreateTranslation(97,0:255=%[0,0,0]:[0.9,0.9,0.9]);
	CreateTranslation(98,0:255=%[0,0,0]:[1.0,1.0,1.0]);
}


//============================================================================================================
//============================================================================================================

//		Boss brain assignation of health in map30

//============================================================================================================
//============================================================================================================

script "s870" (void)
{
	if(GetLevelInfo(LEVELINFO_LEVELNUM)==30)
		SetActorProperty(0,APROP_Health, 6000);
}

//this script is for L4D mode, where in doom1 map 18 (e2m8), 28 (e3m8) and 38 (e4m8) it will spawn a tank
//instead of the empty spot usual for all the other maps.
script "s871" (void)
{
	int level;
	level=GetLevelInfo(LEVELINFO_LEVELNUM);
	SetResultValue(level);
}


//============================================================================================================
//============================================================================================================

//		Sniper targeter for the sniper guns

//============================================================================================================
//============================================================================================================
int zoom;

script "s908" (void) //enter
{
	setcameratotexture(0, "camtex1", 45); //set the camea texture to the player's view. replace 45 with whatever fov(in degrees!)
	sethudsize(800, 600, 0); //set the hud to the same size as the camera texture.
	setfont("camtex1"); //set the font to the camera texture
	while(1)
	{
		//turns the zoom on and off
		if(zoom)
			hudmessage(s:"A"; 0, 1, -1, 0.1, 0.1, 0);
		else
			hudmessage(s:" "; 0, 1, -1, 0.1, 0.1, 0);
		delay(1);
	}
}

//============================================================================================================
//============================================================================================================

//		Boss brain assignation of health in map30

//============================================================================================================
//============================================================================================================
Script "s910" (void)
{
GiveInventory("Killers",1);
terminate;
}


//============================================================================================================
//============================================================================================================

//		CVARS

//============================================================================================================
//============================================================================================================
script "s952" enter
{
	if((GetCVar("sv_infiniteammo") == 1) && (CheckInventory("InfiniteAmmo") < 1))
	{
		GiveInventory("InfiniteAmmo",1);
	}
	else if (GetCVar("sv_infiniteammo") == 0)
	{
		TakeInventory("InfiniteAmmo",1);
	}
	delay(35);
	restart;
}

//global bool 18: wepsw;

script "s953" enter
{
	if((GetCVar("neverswitchonpickup") == 1) && (CheckInventory("NoWeaponSwitch") < 1))
	{
		GiveInventory("NoWeaponSwitch",1);
	}
	else if (GetCVar("neverswitchonpickup") == 0) 
	{

		TakeInventory("NoWeaponSwitch",1);
	}
	delay(35);
	restart;
}

//============================================================================================================
//============================================================================================================

//		Used by the Joke mode weapon

//============================================================================================================
//============================================================================================================
script "s959" (int TidToAffect)
{
	while(1)
	{
		SetActorAngle(TidToAffect,getactorangle(21000));
		delay(3);
	}
}

/*
#DEFINE ISPEED 20
#DEFINE FSPEED 20.0
int flyin = 0;

script 960 (void)
{
	int a, olda;
	int p, oldp, ud, spd, oldspd;
	int x, y, z;
	int origa = getactorangle(21000);
	int origp = getactorPitch(21000);
	GiveActorInventory(21000, "cammin", 1);
	thing_changetid(0, 22001);
	a = origa;
	p = origp;
	ChangeCamera(22001, 0, 0);
	spd = 0;
	flyin = 1;
	while(flyin && ThingCount (T_NONE, 22001))
	{
		oldspd = ISPEED-spd;
		p = getactorPitch(21000);
		ud = 0;
		if(p > 0) ud = 1;
		spd = abs(fixedmul(fixedmul(p,4.0),FSPEED)>>16);
		ThrustThingZ(22001, spd*4, ud, 0);
		olda = a;
		a = getactorangle(21000);
		ThrustThing((olda>>8)+128, oldspd, 1, 22001);
		ThrustThing(a>>8, ISPEED-spd, 1, 22001);
		SetActorAngle(22001, a);
		SetActorPitch(22001, p);
		delay(1);
	}
	while(ThingCount (T_NONE, 22001))
	{
		delay(1);
	}
	TakeActorInventory(21000, "cammin", 1);
	setActorAngle(21000, origa);
	setActorPitch(21000, origP);
}



script 961 (void)
{
		flyin = 0;
}
 function int abs (int x)
 {
	if (x < 0)
		return -x;
	return x;
 }
 
 */
 
 
#DEFINE ISPEED 10
#DEFINE FSPEED 10.0
#DEFINE TURNSPEED 0.017
int flyin = 0;

// This is the main scrip for the bullet time. It sets the camera and cotrols the movement according
// to "TURNSPEED" defined above.
script "s960" (void)
{
	int a, olda;
	int p, oldp, ud, spd, oldspd;
	int ip, ia;
	int x, y, z;
	int origa = getactorangle(21000);
	int origp = getactorPitch(21000);
	GiveActorInventory(21000, "cammin", 1);
	thing_changetid(0, 22001);
	setcameratotexture(22001, "CAMERT", 150);
	//ChangeCamera(22001, 0, 0);
	a = origa;
	p = origp;
	sethudsize(800, 600, 0);
	setfont("CAMERT");
	hudmessage(s:"A"; 0, 600, -1, 400.0, 300.0, 0);
	spd = 0;
	flyin = 1;
	p = getactorPitch(21000);
	a = getactorangle(21000);
	while(flyin && ThingCount (T_NONE, 22001))
	{
		oldspd = ISPEED-spd;

		ip = -getplayerinput(0, INPUT_PITCH);
		if(ip > TURNSPEED) ip = TURNSPEED;
		if(ip < -TURNSPEED) ip = -TURNSPEED;
		p += ip;

		ud = 0;
		if(p > 0) ud = 1;
		spd = abs(fixedmul(fixedmul(p,4.0),FSPEED)>>16);
		ThrustThingZ(22001, spd*4, ud, 0);
		olda = a;

		ia = getplayerinput(0, INPUT_YAW);
		if(ia > TURNSPEED) ia = TURNSPEED;
		if(ia < -TURNSPEED) ia = -TURNSPEED;
		a += ia;

		ThrustThing((olda>>8)+128, oldspd, 1, 22001);
		ThrustThing(a>>8, ISPEED-spd, 1, 22001);
		SetActorAngle(22001, a);
		SetActorPitch(22001, p);
		delay(1);
	}
	while(ThingCount (T_NONE, 22001))
	{
		delay(1);
	}
	hudmessage(s:" "; 0, 600, -1, 320.0, 200.0, 1);
	TakeActorInventory(21000, "cammin", 1);
	setActorAngle(21000, origa);
	setActorPitch(21000, origP);
}

//This one is called by the projectile's death, just to record that it was destroyed
script "s961" (void)
{
	flyin = 0;
}
	
function int abs (int x)
{
    if (x < 0)
        return -x;

    return x;
}

//this is the dark screen effect, will loop until the projectile terminates it manually
Script "s962" (void)
{
	int id=500;
	int i=0;
	SetHudSize(320,200,1);
	while(1)
	{
		SetFont("DakTb");
		HudMessage(s:"a";HUDMSG_FADEINOUT,id,0,0.3,0.5,0.5,0.2,0.2);
		id--;
		i++;
		if(i<4)
			i=0;
		delay(random(10,15));
	}
}

// this one is to give the token of death, basically to trigger the explosion of the bullet
script "s963" (void)
{
	GiveActorInventory(22001,"DieToken",1);
}

// this one cancels the weird FOV effect used in 960 without changing the camera, when the 
// projectile explodes
script "s964" (void)
{
	setcameratotexture(22001, "CAMERT", 90);
}


//Slaughter maps in particular are harder to view when demon morph is on. This
//is aimed to fix that problem by forcing items to become invisible, minus any
//powerup items and weapons. Too many weapons to bother with, really.
Script "InvisibleItemToggle" (int check)
{
	if (check >= 1)
	{
		//Delay(8);
		SetActorProperty(22005,APROP_RenderStyle,STYLE_None);
		SetActorProperty(22006,APROP_RenderStyle,STYLE_None);
		SetActorProperty(22007,APROP_RenderStyle,STYLE_None);
		ACS_NamedExecute("InvisItemLoop",0,0,0,0);
	}
	else
	{
		ACS_NamedTerminate("InvisItemLoop",0);
		SetActorProperty(22005,APROP_RenderStyle,STYLE_Normal);
		SetActorProperty(22006,APROP_RenderStyle,STYLE_Add);
		SetActorProperty(22007,APROP_RenderStyle,STYLE_Translucent);
	}
}

Script "InvisItemLoop" (void)
{
	SetActorProperty(22005,APROP_RenderStyle,STYLE_None);
	SetActorProperty(22006,APROP_RenderStyle,STYLE_None);
	SetActorProperty(22007,APROP_RenderStyle,STYLE_None);
	Delay(17);
	Restart;
}

Script "AEPreviousWeapon" (int mode)
{
	// Valid mode properties:
	// 0: Switch the weapon with the previous slot.
	// 1: Don't change the previous weapon 'slot'.
	// 2: Don't change the current weapon 'slot'.
	// 3: Empty previous weapon slot.
	// 4: Empty current weapon slot.
	// 5: 3 and 4.
	// 6: 1, but use previousweapon.
	// 7: 2, but use previousweapon.
	// By slot, it means recorded weapon.
	str truecurweap;
	str curweap;
	str prevweap;
	switch(mode)
	{
	case 0:
		if ((GetWeapon() == "AEoDDemonMorphHand") || (GetWeapon() == "HammerTimeHammer") || !(GetWeapon()))
			Terminate;
		truecurweap = GetWeapon();	
		curweap = GetCvarString("user_currentWeapon");
		prevweap = GetCvarString("user_previousWeapon");
		SetWeapon(prevweap);
		delay(12);
		SetUserCvarString(0,"user_previousWeapon",curweap);
		SetUserCvarString(0,"user_currentWeapon",prevweap);
		Terminate;
	case 1:
		if ((GetWeapon() == "AEoDDemonMorphHand") || (GetWeapon() == "HammerTimeHammer") || !(GetWeapon()))
			Terminate;
		SetUserCvar(0,"user_currentWeapon",GetWeapon());
		Terminate;
	case 2:
		if ((GetWeapon() == "AEoDDemonMorphHand") || (GetWeapon() == "HammerTimeHammer") || !(GetWeapon()))
			Terminate;
		SetUserCvar(0,"user_previousWeapon",GetWeapon());
		Terminate;
	case 3:
		SetUserCvar(0,"user_currentWeapon","");
		Terminate;
	case 4:
		SetUserCvar(0,"user_previousWeapon","");
		Terminate;
	case 5:
		SetUserCvar(0,"user_currentWeapon","");
		SetUserCvar(0,"user_previousWeapon","");
		Terminate;
	case 6:
		if ((GetWeapon() == "AEoDDemonMorphHand") || (GetWeapon() == "HammerTimeHammer") || !(GetWeapon()))
			Terminate;
		SetUserCvar(0,"user_currentWeapon",GetWeapon());
		Terminate;
	case 7:
		if ((GetWeapon() == "AEoDDemonMorphHand") || (GetWeapon() == "HammerTimeHammer") || !(GetWeapon()))
			Terminate;
		SetUserCvar(0,"user_previousWeapon",GetWeapon());
		Terminate;
	}
}

//------------------------------------------------------------------------
/*
So, at the end, this are all the scripts used in the mod. 
This list is not to know what they do, just to know which script
numbers have been used:
610,614,615,616,617,618	//for the footsteps
650,651,652,653,654,655
689, 690, 691
797,798,799,800,801
848,850,851,852,853,854,855,857
870,871
901,908,910,912,913,914,915
952,953,957,958,959
960-965

//------------------------------------------------------------------------


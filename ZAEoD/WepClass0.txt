Class SoulReaperBeam : Actor
{
	const minDist = 64;
	int seekflags;
	
	Actor closest;
	double closestDist;
	bool skip;
	
	Default
	{
		Projectile;
		+SEEKERMISSILE
		+DONTREFLECT
		+FOILINVUL
		+HITTRACER
		+PAINLESS
		+SCREENSEEKER
		+DONTSPLASH
		+NOTIMEFREEZE
		+NODAMAGETHRUST +CANNOTPUSH
		+EXTREMEDEATH
		Speed 20;
		Radius 4;
		Height 2;
		Damage 0;
		DamageType "SoulReaperPull";
		//MaxTargetRange 4
		RenderStyle "None";
	}
	
	override void OnDestroy()
	{
		if (skip)	return Super.OnDestroy();
		//skip = true;
		if (tracer && tracer != target)
		{
			if (abs(vel.X) + abs(vel.Y) != 0)
				A_FaceMovementDirection();
			A_Stop();
			/*
			FTranslatedLineTarget t;
			
			LineAttack(angle, vel.Length(), pitch, 0, 'Normal', "InvisiPuff", LAF_NORANDOMPUFFZ|LAF_NOIMPACTDECAL, t);
			
			if (t && t.linetarget)
				tracer = t.linetarget;
			*/
			
			if (tracer && tracer.bSHOOTABLE && tracer.health > 0)
			{
				int dmg = random(1,2);
				Vector3 SoulPos = tracer.pos;
					SoulPos.z = pos.z;
					
				int ret = tracer.DamageMobj(self, target, dmg, "SoulReaperPull", DMG_FOILINVUL | DMG_THRUSTLESS);
				if (!tracer || tracer.health < 1)
				{
					let ms = tracer.Spawn("DMSoulMissile", SoulPos);
					if (ms)
					{
						ms.target = target;
						ms.master = master;
						ms.tracer = tracer;
					}
				}
			}
		}
		Super.OnDestroy();
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (target)	pitch = target.pitch;
	}
	
	States
	{
	Spawn:
		TNT1 A -1 NoDelay 
		{
			skip = false;
			int maxTime = 30;
			closestDist = 500;
			closest = null;
			
			let it = ActorIterator.Create(SoulFragmentID, "DMSoulFragment");
			Actor mo;
			while (mo = it.Next())
			{
				double dist = Distance3D(mo);
				
				if (dist > closestDist)
					continue;
				
				if (!CheckSight(mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
					continue;
					
				closest = mo;
				closestDist = dist;
			}
			
			if (closest)
			{
				bTHRUACTORS = true;
				while (Distance3D(closest) > minDist)
				{
					if (!closest || maxTime < 1)		
					{
						skip = true;
						return Destroy();
					}
					A_SpawnItemEx("SoulReaperBeamTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
					A_Face(closest,10,10,0,0,FAF_BOTTOM);
					A_Warp(DefPtr, cos(pitch) * speed, 0, -sin(pitch) * speed, 0, WARPF_NOCHECKPOSITION);
					maxTime--;
				}
				
				let ms = closest.Spawn("DMSoulMissile", closest.pos);
				if (ms)
				{
					ms.target = target;
					ms.tracer = tracer;
					ms.master = master;
					ms.translation = closest.translation;
					closest.Destroy();
				}
				skip = true;
			}
			else
			{
				while (maxTime > 0)
				{
					A_SpawnItemEx("SoulReaperBeamTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
					A_SeekerMissile(1,1,SMF_PRECISE|SMF_LOOK,256,4);
					if (tracer)
						A_FaceTracer(10,10,0,0,FAF_MIDDLE);
					
					
					if (!A_Warp(AAPTR_DEFAULT,cos(pitch) * speed, 0, -sin(pitch) * speed,0,0,"Null") || 
						(tracer && Distance3D(tracer) < minDist))
					{
						if (abs(vel.X) + abs(vel.Y) != 0)
							A_FaceMovementDirection();
						A_Stop();
						if (!tracer)
						{
							A_CheckLOF("Null",
								CLOFF_JUMPENEMY|CLOFF_JUMPNONHOSTILE|CLOFF_JUMPOBJECT|CLOFF_SKIPFRIEND|
								CLOFF_SETTRACER|CLOFF_NOAIM|CLOFF_FROMBASE|CLOFF_ALLOWNULL|CLOFF_MUSTBESHOOTABLE,
								speed,0,angle,0,height / 2,0,AAPTR_NULL,radius);
						}
						bNOINTERACTION = true;
						skip = (tracer == null);
						return Destroy();
					}
					maxTime--;
				}
			}
			return Destroy();	
		}
		Stop;
	Death:
		TNT1 A -1 { skip = true; return Destroy(); }
		Stop;
	Crash:
	XDeath:
		TNT1 A -1 { skip = false; return Destroy(); }
		Stop;
		
	}
}
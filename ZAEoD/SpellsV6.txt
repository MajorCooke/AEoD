Class ChaosSpell : Actor
{
	int user_c;
	Default
	{
		Height 5;
		Radius 5;
		Speed 22;
		Damage 0;
		Scale 0.4;
		RenderStyle "Add";
		PROJECTILE;
		+STRIFEDAMAGE
		+DONTREFLECT
		+HITTRACER //<--Monster will be responsible for causing infighting. THEY are responsible for the damage.
		+FORCERADIUSDMG
		+FOILINVUL
		+OLDRADIUSDMG
		+PAINLESS
		+SEEKERMISSILE
		DamageType "MadChaos";
		DeathSound "weapons/sigilhit";
		Translation "83:88=192:197","112:127=198:207";
	}
    States
    {
    Spawn:
		CBTS ABCDEFGHIJ 2 Bright NoDelay
		{
			A_SpawnItemEx("ChaosSpellTrail",0,0,0,0,cos(user_c)*2.5,sin(user_c)*2.5,0,SXF_NOCHECKPOSITION,0);
			A_SpawnItemEx("ChaosSpellTrail",0,0,0,0,cos(user_c)*-2.5,sin(user_c)*-2.5,0,SXF_NOCHECKPOSITION,0);
			A_SeekerMissile(90,90,SMF_PRECISE);
			user_c = (user_c + 18) % 180;
		}
		Loop;
    Crash:
	XDeath:
		TNT1 A 0 
		{
			A_Warp(TracerPtr,0,0,0,0,WARPF_NOCHECKPOSITION,"Null",0.5);
			if (tracer)
			{
				let it = ThinkerIterator.Create("Actor", Thinker.STAT_DEFAULT);
				Actor mo;
				while (mo = Actor(it.Next()))
				{
					if (mo == tracer || 		// Don't make the thing target itself.
						mo.master == tracer || 	// Don't make master + minions target each other
						mo == tracer.master ||
						mo.bNOTARGETSWITCH ||
						mo.bMISSILE ||
						mo.bNOINTERACTION ||
						mo.bNOSECTOR ||
						mo.bKILLED ||
						mo.bDORMANT)	
						continue;
						
					if (mo.bISMONSTER && mo.health > 0 && tracer.CheckSight(mo,SF_IGNOREWATERBOUNDARY))
					{
						mo.target = tracer;
						mo.Threshold = mo.DefThreshold;
					}
				}
			}
		}
	Death:
		TNT1 A 1 
		{
			A_Scream();
			A_SpawnItemEx("ChaosSpellExplosion",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		}
		Stop;
    }
}
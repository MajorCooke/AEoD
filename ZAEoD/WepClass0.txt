Class SoulReaperBeam : Actor
{
	const minDist = 64 ** 2;
	const closestCon = 500 ** 2;
	int seekflags;
	
	Actor closest;
	double closestDist;
	bool skip;
	
	Default
	{
		Projectile;
		+SEEKERMISSILE
		+DONTREFLECT
		+FOILINVUL
		+HITTRACER
		+PAINLESS
		+SCREENSEEKER
		+DONTSPLASH
		+NOTIMEFREEZE
		+NODAMAGETHRUST 
		+CANNOTPUSH
		+EXTREMEDEATH
		Speed 4;
		Radius 4;
		Height 4;
		Damage 0;
		DamageType "SoulReaperPull";
		//MaxTargetRange 4
		RenderStyle "None";
	}
	
	override void OnDestroy()
	{
		if (skip)	return Super.OnDestroy();
		
		if (tracer && tracer != target)
		{
			if (tracer && tracer.bSHOOTABLE && tracer.health > 0)
			{
				int dmg = random(1,2);
				Vector3 SoulPos = tracer.pos;
					SoulPos.z = pos.z;
					
				int ret = tracer.DamageMobj(self, target, dmg, "SoulReaperPull", DMG_FOILINVUL | DMG_THRUSTLESS);
				if (!tracer || tracer.health < 1)
				{
					let ms = tracer.Spawn("DMSoulMissile", SoulPos);
					if (ms)
					{
						ms.target = target;
						ms.master = master;
						ms.tracer = tracer;
					}
				}
			}
		}
		Super.OnDestroy();
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		if (!victim || (victim.bSOLID && !victim.bSHOOTABLE))	return 1;
		return -1;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (target)	pitch = target.pitch;
	}
	
	void SpawnTrail()
	{
		//user_s = random(1,5)
		//user_r = random(0,359)
		//A_ChangeVelocity(0,cos(-user_r)*(user_s + frandom(0.1,0.5)),sin(user_r)*(user_s + frandom(0.1,0.5)),CVF_RELATIVE|CVF_REPLACE)
		int rng = random(1,3);
		for (int i = 0; i < rng; i++)
		{
			double s = frandom(1.0,5.0);
			double r = frandom(0,359);
			A_SpawnParticle("Green",SPF_FULLBRIGHT|SPF_RELATIVE|SPF_NOTIMEFREEZE,9,frandom(5.0, 8.0), 0, 0, 0, 0, 
				0,
				 cos(r) * (s + frandom(0.1, 0.5)) * 0.65,
				-sin(r) * (s + frandom(0.1, 0.5)) * 0.65);
		}
	}
	
	States
	{
	Spawn:
		TNT1 A 1 NoDelay 
		{
			skip = false;
			int maxTime = 100;
			closestDist = closestCon;
			closest = null;
			
			ThinkerIterator it = ThinkerIterator.Create("DMSoulFragment",STAT_SOULS);
			Actor mo;
			while (mo = Actor(it.Next()))
			{
				double dist = Distance3DSquared(mo);
				
				if (dist > closestDist)
					continue;
				
				if (!CheckSight(mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
					continue;
					
				closest = mo;
				closestDist = dist;
			}
			
			if (closest)
			{
				bTHRUACTORS = true;
				while (Distance3DSquared(closest) > minDist)
				{
					if (!closest || maxTime < 1)		
					{
						skip = true;
						return Destroy();
					}
					if (maxTime % 5 == 0)
						SpawnTrail();
						//A_SpawnItemEx("SoulReaperBeamTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
					A_Face(closest,2,2,0,0,FAF_BOTTOM);
					
					A_Warp(DefPtr, cos(pitch) * speed, 0, -sin(pitch) * speed, 0, WARPF_NOCHECKPOSITION);
					maxTime--;
				}
				
				let ms = closest.Spawn("DMSoulMissile", closest.pos);
				if (ms)
				{
					ms.target = target;
					ms.tracer = tracer;
					ms.master = master;
					ms.translation = closest.translation;
					closest.Destroy();
				}
				skip = true;
			}
			else
			{
				while (maxTime > 0)
				{
					if (maxTime % 5 == 0)
					{
						//A_SpawnItemEx("SoulReaperBeamTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
						SpawnTrail();
						if (!tracer || tracer.health < 1) 
						{
							tracer = null;
							A_SeekerMissile(1,1,SMF_PRECISE|SMF_LOOK,256,4);
						}
					}
					
					if (tracer)	A_FaceTracer(2,2,0,0,FAF_MIDDLE);
					
					Vector3 move = (cos(pitch) * speed, 0, -sin(pitch) * speed);
					bool check1 = (!A_Warp(AAPTR_DEFAULT, move.x, 0, move.z, 0,0,"Null"));
					bool check2 = check1 || (tracer && Distance3DSquared(tracer) < minDist);
					
					if (check1 || check2)
					{
						A_FaceTracer(0,0);
						if (check1)
							A_CheckBlock("Null", CBF_SETTRACER|CBF_NOLINES, AAPTR_DEFAULT, move.x, 0, move.z);
						
						bNOINTERACTION = true;
						skip = (tracer == null);
						return;
					}
					
					maxTime--;
				}
			}
		}
		TNT1 A 1;
		Stop;
	Death:
		TNT1 A 1; // { skip = true; }
		Stop;
	Crash:
	XDeath:
		TNT1 A 1; // { skip = false; }
		Stop;
		
	}
}
/*
Class SoulReaperBeamTrail : Actor
{
	int user_s;
	int user_r;
	int user_t;
	Default
	{
		Projectile
		+NODAMAGE
		+NOINTERACTION
		+NOTIMEFREEZE
		+SEEKERMISSILE
		Translation "0:255=%[0,0,0]:[0,1,0]";
		RenderStyle "Add";
		Scale 0.05;
		Alpha 0.25;
		Speed 0;
	}
	States
	{
	Spawn:
		X099 A 0 NoDelay A_SetUserVar(user_t,tid)
		X099 A 0 Thing_ChangeTID(0,0)
		X099 A 0 A_SetUserVar(user_s,random(1,5))
		X099 A 0 A_SetUserVar(user_r,random(0,359))
		X099 A 0 A_JumpIf(user_t > 0,"Specialty")
		X099 A 0 A_SetScale(frandom(0.03,0.06))		
		X099 A 0 A_SpawnItemEx("SoulReaperBeamTrail",-4.5,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,1)
		X099 A 0 A_SpawnItemEx("SoulReaperBeamTrail",-2.5,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,1)
		X099 A 0 A_SeekerMissile(10,10,SMF_PRECISE)
		X099 A 0 A_SpawnItemEx("SoulReaperBeamTrail",2.5,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,1)
		Goto Looping
	Specialty:
		X099 A 0 A_SetScale(ScaleX*frandom(0.02,0.04))
	Looping:
		X099 A 0
		X099 A 1 Bright A_FadeOut(0.025)
		Wait
	}
}*/
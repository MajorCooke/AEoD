/*
	override Class<Actor> PickMonster(String category)
	{
		// Set up the monsters here.
		
		if (category == 'Doom64')
		{
			return "";
		}
		if (category == 'Joke')
		{
			return "";
		}
		if (category == 'ROTT')
		{
			return "";
		}
		if (category == 'L4DMon')
		{
			return "";
		}
		if (category == 'Hellspawn')
		{
			return "";
		}
		
		if (category == 'Doom')
		{
			return "";
		}
		if (category == 'Blood')
		{
			return "";
		}
		if (category == 'DN3D')
		{
			return "";
		}
		if (category == 'HL')
		{
			return "";
		}
		if (category == 'HL2')
		{
			return "";
		}
		if (category == 'Heretic')
		{
			return "";
		}
		if (category == 'Hexen')
		{
			return "";
		}
		if (category == 'Hexen2')
		{
			return "";
		}
		if (category == 'MM')
		{
			return "";
		}
		if (category == 'Powerslave')
		{
			return "";
		}
		if (category == 'Quake1')
		{
			return "";
		}
		if (category == 'Quake2')
		{
			return "";
		}
		if (category == 'Quake4')
		{
			return "";
		}
		if (category == 'ShadowWarr')
		{
			return "";
		}
		if (category == 'Strife')
		{
			return "";
		}
	}
*/

Class AEoDMonsterSpawner : Actor
{
	int user_Type;
	int user_multistage;
	int user_rng;
	int user_joke;
	bool stay, classic;
	Array<StateLabel> Types;
	Array<StateLabel> Extras;
	Array<Class<Actor> > Monsters;
	Array<Int> Chances;
	Actor mon;
	String thing;
	
	Default
	{
		Monster;
		Health 2000000;
		+DONTCORPSE
		+NORADIUSDMG
		+NONSHOOTABLE
		-SHOOTABLE
		-COUNTKILL
		+BOSSDEATH
		+VULNERABLE
		+NOTIMEFREEZE
		+CANTSEEK
		+BOSSDEATH
		+NEVERTARGET
		+DONTTHRUST
		+DONTSPLASH
		+NOGRAVITY
		+NOPAIN
		+NOTRIGGER
		+NOTONAUTOMAP
		+LAXTELEFRAGDMG
		+NOINTERACTION
		Species "AEoDSpawner";
		DamageFactor "Normal", 0.0;
		DamageFactor "Massacre", 666;
	}
	
	virtual String PickMonster(String category)
	{
		// Set up the monsters here.
	}
	
	override void BeginPlay()
	{
		if (GetClass() == "AEoDMonsterSpawner")
			return Destroy();
			
		Super.BeginPlay();
		
		Class<Actor> StayCheck = GetReplacee(GetClass());
		
		stay = (StayCheck == 'BaronOfHell' ||
				StayCheck == 'Fatso' ||
				StayCheck == 'Arachnotron' ||
				StayCheck == 'Cyberdemon' ||
				StayCheck == 'SpiderMastermind');
		
		if (GetCvar("user_GameMode") == 1)	
		{
			SetStateLabel("L4D"); 
			return;
		}
		
		
		static const StateLabel Themes[] = 
		{
			"Doom",
			"Blood",
			"DN3D",
			"HL",
			"HL2",
			"Heretic",
			"Hexen",
			"Hexen2",
			"MM",
			"Powerslave",
			"Quake1",
			"Quake2",
			"Quake4",
			"ShadowWarr",
			"Strife",
		}
		
		static const String Cvars[] =
		{
			"user_Doom",
			"user_Blood",
			"user_Duke",
			"user_HL",
			"user_HL2",
			"user_Heretic",
			"user_Hexen",
			"user_Hexen2",
			"user_MM",
			"user_Powerslave",
			"user_Quake1",
			"user_Quake2",
			"user_Quake4",
			"user_SW",
			"user_Strife"
		};
		int total = themes.Size();
		Types.Clear();
		
		// Gather the list of the above based on cvar.
		int ThemeCount = 0;
		for (int i = 0; i < total; i++)
		{
			if (GetCvar(Cvars[i]))
			{
				ThemeCount++;
				Types.Push(themes[i]);
			}
		}
		
		// Make sure there's always something in the list to work with.
		if (ThemeCount >= total || ThemeCount <= 0)
		{
			classic = true;
			if (Types.Size() < 1)
			{
				for (i = 0; i < total; i++)
				{
					if (ResolveState(Themes[i]) != null)
						Types.Push(Themes[i]);
				}
			}
		}
		
		static const StateLabel ExtraList[] =
		{	
			"Doom64", 
			"Hellspawn", 
			"JokeMode", 
			"L4DMon", 
			"ROTT"
		};
		
		static const String ExtraVar[] =
		{	
			"user_Dm64", 
			"user_Hellspawn", 
			"user_Joke", 
			"user_L4DMon", 
			"user_ROTT" 
		};
		
		int size = ExtraList.Size();
		for (int i = 0; i < size; i++)
		{
			if (GetCvar(ExtraVar[i]) && ResolveState(ExtraList))
				Types.Push(ExtraList[i]);
		}
		
		if (Types.Size() < 1)
		{
			String cname = GetClassName(); //Just being safe.
			Console.Printf("ERROR: %s has no themes!", cname);
			return Destroy();
		}
		int rn1 = random(0,Types.Size() - 1);
		//SetStateLabel(Types[rn1]);
	}
	
	
	void AdjustMonster()
	{
		if (tracer)
		{			
			if (Translation)					tracer.Translation = Translation;
			if (health != GetSpawnHealth())		tracer.A_SetHealth(health);
			tracer.bDormant = bDormant;
			
			if (bBOSSSPAWNED)
			{
				tracer.bBOSSSPAWNED = true;
				if (players[0] && players[0].mo)
				{
					tracer.target = players[0].mo;
					A_AlertMonsters();
				}
			}
		}
	}
	
	States
	{
	Teleport:
	Waiting:
		TNT1 A 0
		{
			bNOINTERACTION = bTHRUACTORS = true;
			A_GiveToChildren("AEoDToken",1);
			AdjustMonster();
		}
		TNT1 A 70
		{
			if (!tracer)
			{
				A_BossDeath();
				return Destroy();
			}
		}
		Wait;
	End:
	Death:
		TNT1 A 0
		{
			A_BossDeath();
			AdjustMonster();
		}
		Stop;
	}
}
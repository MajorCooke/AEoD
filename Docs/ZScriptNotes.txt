================================================================================
Object positioning
================================================================================

Ensures portal awareness:

	obj.SetOrigin(obj.Vec3Offset(10, 10, 10));
	
================================================================================
Radius Damage (from A_Explode)
================================================================================

int DamageDistance (Actor thing, int bombdamage, int bombdistance, int fulldamagedistance = 0)
{
	if (!thing || !CheckSight(thing, SF_IGNOREVISIBILITY | SF_IGNOREWATERBOUNDARY))
		return 0;
		
	double fulldamagedistance = int(clamp(fulldamagedistance, 0, bombdistance - 1));

	double bombdistancefloat = 1. / (double(bombdistance - fulldamagedistance));

	Vector2 vec = Vec2To(thing);
	double dx = abs(vec.X);
	double dy = abs(vec.Y);
	double boxradius = thing.radius;

	len = (dx > dy) ? dx : dy;

	double mz = pos.z;
	double tz = thing.pos.z;
	double th = tz + thing.height;

	if (mz < tz || mz >= th)
	{
		double dz;

		if (mz > tz)
		{
			dz = mz - th;
		}
		else
		{
			dz = mz - tz;
		}
		if (len <= boxradius)
		{
			len = dz;
		}
		else
		{
			len -= boxradius;
			len = sqrt(len*len + dz*dz);
		}
	}
	else
	{
		len = max(len - boxradius, 0.0);
	}

	len = clamp(len - fulldamagedistance, 0, len);
	points = bombdamagefloat * (1. - len * bombdistancefloat);
	if (thing == bombsource)
	{
		points = points * splashfactor;
	}
	points *= thing.RadiusDamageFactor;

	return abs(int(points));
}
Class DirectorSpawner : CustomInventory
{
	Default
	{
	+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_SpawnItemEx("TheDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_NOPOINTERS|SXF_SETTARGET);
		Stop;
	}
}

Class DirectorBase : Actor { }

Class MonDirIntensity : Inventory
{	Default { Inventory.MaxAmount 666; }	}

Class DirSmallChildCount : Inventory
{	Default { Inventory.MaxAmount 100; }	}

Class DirMediumChildCount : Inventory
{	Default { Inventory.MaxAmount 100;	}}

Class DirLargeChildCount : Inventory
{	Default { Inventory.MaxAmount 100;	}}

Class FreezeDirector : Inventory {}
Class RemoveDirector : CustomInventory 
{
	Default {
	+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_RadiusGive("DirectorRemover",32767,RGF_MONSTERS|RGF_NOSIGHT,1,null,"Director");
		Stop;
	}
}

Class DirectorRemover : CustomInventory
{
	Default
	{
	+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_Remove(DefPtr,RMVF_EVERYTHING,null,"Director");
		Stop;
	}
}

Class SmallSpawnToken : Inventory
{
	Default
	{
	Inventory.MaxAmount 20;
	Inventory.InterHubAmount 20;
	}
}

Class TheDirector : DirectorBase
{
	int mul;
	int bias0, bias1;
	//Biasity (#/256) to jump to the medium and large spawning categories.
	//random(1,256) <= bias[#]
	//0 = Medium spawn chance
	//1 = Large spawn chance
	int cc0, cc1, cc2, cc3;
	//Max number of children allowed active at any time.
	//Determined by script.
	//0 = Small spawners
	//1 = Medium spawners
	//2 = Large spawners
	//3 = Absolute maximum of total children at any time.
	int cd0, cd1, cd2, cd3, cd4, cd5, cd6;
	//Will be used by the script to determine current intensities.
	//0 = Small cooldown min
	//1 = Small cooldown max
	//2 = Medium cooldown min
	//3 = Medium cooldown max
	//4 = Large cooldown min
	//5 = Large cooldown max
	//6 = Random amount to add to cooldowns from 0 to 3
	int cooldown0, cooldown1, cooldown2;
	//0 = Normal cooldown
	//1 = Exclusive small child countdown
	Default
	{
		Monster;
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		+FLOORHUGGER
		+NORADIUSDMG
		+THRUACTORS
		+NOBLOOD
		+NOTELEPORT
		+FORCEPAIN
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		-SOLID
		-NODROPOFF
		+DROPOFF
		+NOTRIGGER
		+NOBLOCKMAP
		+NOFEAR
		+NOTELESTOMP
		+NOCLIP
		+DONTTHRUST
		+NODAMAGE
		+NOPAIN
		+DONTSPLASH
		+DONTCORPSE
		Radius 120;
		Height 80;
		Speed 20;
		Health 1000000;
		DamageFactor "Normal", 0;
		Species "Director";
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			bias0 = 48; //#/256 chance to spawn medium
			bias1 = 24; //^ large
			cc0 = 3; //max small children spawners
			cc1 = 2; //^ medium
			cc2 = 1; //^ large
			cc3 = 12; //Absolute maximum number of children at any time.
			cd0 = 750; //Small cooldown min
			cd1 = 2000; //Small cooldown max
			cd2 = 2000; //Medium cooldown min
			cd3 = 4500; //Medium cooldown max
			cd4 = 3000; //Large cooldown min
			cd5 = 6000; //Large cooldown max
			A_TransferPointer(Player1,DefPtr,DefPtr,TargetPtr,4);
		}
		TNT1 A 1 
		{	
			cd6 = random(50,175);
			mul = GetCvar("user_MonIntensity");
			if (mul <= 0)
			{
				A_PrintBold("Multiplier was 0. This should not happen!\nReport this to the AEoD team immediately.",7.0);
				mul = 3; //Prevent division by 0.
			}
		}
		Goto SCont;
	SCont:
		TNT1 A 0 
		{
			bFRIENDLY = false;
			A_TransferPointer(Player1,DefPtr,DefPtr,TargetPtr,4);
		}
		Goto Idle;
	TwoMinutes:
		TNT1 A 1 
		{
			A_TakeInventory("PFirstTimeToken",1,0,TargetPtr);
			A_GiveInventory("SmallSpawnToken",20,TargetPtr);
			A_Warp(TargetPtr,0,0,0,0,WARPF_NOCHECKPOSITION);
		}
		Goto Chasing;
	Idle:
		TNT1 A 1 A_Look();
		Loop;
	See:
		TNT1 A 0 
		{
			A_SetTics(GetCvar("DirectorDelay") * 35);
			A_Warp(TargetPtr,0,0,0,0,WARPF_NOCHECKPOSITION);
		}
	Chasing:
		TNT1 AAA 2 A_Chase();
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",AAPTR_TARGET);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		TNT1 A 0 
		{
			A_UnsetShootable();
			A_ChangeLinkFlags(false);
			if (cooldown0 > 0)
			{	cooldown0 -= (mul*random(7,10));	}
			if (cooldown1 > 0)
			{	cooldown1 -= (mul*random(7,10));	}
		}
		Loop;
	Missile:
		TNT1 A 0 
		{
			if (!CheckClass("PlayerPawn",TargetPtr,true))
			{
				A_TransferPointer(Player1,DefPtr,DefPtr,TargetPtr,4);
			}
			A_Warp(TargetPtr,0,0,0,0,WARPF_NOCHECKPOSITION);
		}
		TNT1 A 0 A_JumpIfInventory("SmallSpawnToken",1,"SmallMobShoot",TargetPtr);
		TNT1 A 3 A_FaceTarget();
		TNT1 A 0 A_JumpIf(mul < 666,"Missile2");
		TNT1 A 0 A_Jump(256,"SmallMobShoot","MediumMobShoot","LargeMobShoot");
		Goto SmallMobShoot;
	Missile2:
		//The -# is needed because at a base of 1, it still adds on 4 and 6 to large/medium.
		//Think of it in terms of n-1.
		TNT1 A 0 A_JumpIf(random(1,2560) <= ((bias1+(mul*40))-40),"LargeMobShoot");
		TNT1 A 0 A_JumpIf(random(1,2560) <= ((bias0+(mul*60))-60),"MediumMobShoot");
		Goto SmallMobShoot;
	LargeMobShoot:
		TNT1 A 0 
		{
			if (cooldown0 > 0)	{	return ResolveState("Chasing");	}
			int count = 0;
			ThinkerIterator telefragger = ThinkerIterator.Create("MCLargeMobRunner");
			Actor mo;
			while (mo = MCLargeMobRunner(telefragger.Next()))
			{
				count++;
				if (count >= cc2 + mul || count >= cc3)
				{	return ResolveState("Chasing");	}
			}
			
			if (A_SpawnItemEx("MCLargeMobRunner",flags: SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID, tid: mul))
			{
				cooldown0 = random(cd4, cd5) + random(0, cd6);
				return ResolveState("ChanceCD");
			}
			
			return ResolveState("Chasing");
		}
	MediumMobShoot:
		TNT1 A 0 
		{
			if (cooldown0 > 0)	{	return ResolveState("Chasing");	}
			int count = 0;
			ThinkerIterator telefragger = ThinkerIterator.Create("MCMediumMobRunner");
			Actor mo;
			while (mo = MCMediumMobRunner(telefragger.Next()))
			{
				count++;
				if (count >= cc1 + mul || count >= cc3)
				{	return ResolveState("Chasing");	}
			}
			
			if (A_SpawnItemEx("MCMediumMobRunner",flags: SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID, tid: mul))
			{
				cooldown0 = random(cd2, cd3) + random(0, cd6);
				return ResolveState("ChanceCD");
			}
			
			return ResolveState("Chasing");
		}
	SmallMobShoot:
		TNT1 A 0 
		{
			if (cooldown1 > 0)	{	return ResolveState("Chasing");	}
			int count = 0;
			ThinkerIterator telefragger = ThinkerIterator.Create("MCSmallMobRunner");
			Actor mo;
			while (mo = MCSmallMobRunner(telefragger.Next()))
			{
				count++;
				if (count >= cc0 + mul || count >= cc3)
				{	return ResolveState("Chasing");	}
			}
			
			if (A_SpawnItemEx("MCSmallMobRunner",flags: SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID, tid: mul))
			{
				cooldown1 = random(cd1, cd2) + random(0, cd6);
				return ResolveState("ChanceCD");
			}
			
			return ResolveState("Chasing");
		}
	ChanceCD:
		TNT1 A 0 A_Jump(240,"Chasing");
		TNT1 A 0 A_Jump(256,1,1,2,2,3,3,4);
		TNT1 AAAAAA 350;
		Goto Chasing;
	Frozen:
		TNT1 A 35 A_Stop();
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		Goto Chasing;
	Death:
		TNT1 A 35 A_RemoveChildren(1,RMVF_EVERYTHING,null,"Director");
		TNT1 A 0 A_TakeInventory("FreezeDirector",32767,0,TargetPtr);
		TNT1 A 0 A_TakeInventory("RemoveDirector",32767,0,TargetPtr);
		Stop;
	}
}

Class MCLargeMobRunner : DirectorBase
{
	int user_boss1, user_boss0;
	//0 = Cyberdemon or Spider Mastermind?
	//1 = Have we chosen to spawn the big baddies above?
	int user_dlimit;
	int user_t;
	int user_tid;
	Default
	{
		Monster;
		+THRUACTORS
		+FRIGHTENED
		+DONTTHRUST
		-SOLID
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		+NORADIUSDMG
		+NOBLOOD
		-TELESTOMP
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+CANTLEAVEFLOORPIC
		+NOTRIGGER
		+NOTELESTOMP
		+DONTSPLASH
		+DONTCORPSE
		+NOBLOCKMAP
		+LAXTELEFRAGDMG
		+ALWAYSTELEFRAG
		+NOPAIN
		Speed 7;
		Radius 128;
		Height 100;
		Health 1000000;
		DamageFactor "Normal", 0.0;
		DamageFactor "DirectorKiller", 32767;
		Species "Director";
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			user_tid = tid;
			Thing_ChangeTID(0,0);
		//Chooses between spider mastermind and cyberdemon.
			user_boss0 = random(0,1);
		}
		//TNT1 A 0 A_GiveInventory("CooldownEnable1",1,AAPTR_MASTER)
	Idle:
		TNT1 AAAAA 1 A_Look;
		Loop;
	See:
	Wanderbout:
		TNT1 A 0 A_JumpIfInventory("DirectorIsLeaving",1,"Death",AAPTR_MASTER);
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",AAPTR_TARGET);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		TNT1 A 1 A_Chase(null,null);
		TNT1 AAAAAAAAA 1 A_Wander();
		TNT1 A 0 A_JumpIf(user_t >= 140,4);
		TNT1 A 0 { user_t++; }
		TNT1 A 0 A_JumpIf(user_t < 140,2);
		TNT1 A 0 { bCANTLEAVEFLOORPIC = false; }
		TNT1 A 0 
		{
			A_ChangeLinkFlags(false);
			bTHRUACTORS = false;
			if (A_CheckBlock("Stuck",CBF_DROPOFF))
			{	
				A_TakeInventory("DirLargeChildCount",1,0,MasterPtr);
				return ResolveState("Null");	
			}
			bTHRUACTORS = true;
			A_ChangeLinkFlags(true);
			return ResolveState(null);
		}
	Mobmaking:
		TNT1 A 0 A_JumpIfTargetInLOS("Wanderbout",360);
		TNT1 A 0 A_JumpIfCloser(250,"Wanderbout");
		TNT1 A 0 A_CheckSight(1);
		Goto Wanderbout;
		TNT1 A 0 A_JumpIf(user_boss1==1,"SC1");
		TNT1 A 0 A_Jump(64,"BossCheck");
		Goto ArchvileSpawn;
	BossCheck:
		TNT1 A 0 { user_boss1 = 1; }
	SC1:
		TNT1 A 0 A_UnsetSolid();
		TNT1 A 1 A_Chase(null,null);
		TNT1 A 0 A_JumpIfTargetInLOS("SC1",360);
		TNT1 A 0 A_JumpIfCloser(250,"SC1");
		TNT1 A 0 A_JumpIf(user_boss0==1,"CyberdemonSpawn");
		Goto SpiderMasterMindSpawn;
	CyberdemonSpawn:
		TNT1 A 0 Thing_ChangeTID(0,32666);
		TNT1 A 0 A_SpawnItemEx("CyberdemonReplacer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		TNT1 A 2 A_JumpIf(tid!=0,"See"); //Means the Class failed to spawn.
		//TNT1 A 0 A_TakeFromSiblings("AEoDToken",100); //These are needed for the soul reaper conversion to work.
		//TNT1 A 0 A_GiveToSiblings("AEoDToken",1); //Otherwise, it will just default to destroying them.
		Goto Vanish; //One-hit wonder. We really don't need these things spawning more than one.
	SpiderMasterMindSpawn:
		TNT1 A 0 Thing_ChangeTID(0,32666);
		TNT1 A 0 A_SpawnItemEx("SpiderMastermindReplacer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		TNT1 A 0 A_JumpIf(tid != 0,"See");
		//TNT1 A 0 A_TakeFromSiblings("AEoDToken",100);
		//TNT1 A 0 A_GiveToSiblings("AEoDToken",1);
		Goto Vanish;
	ArchvileSpawn:
		TNT1 A 0 Thing_ChangeTID(0,32666);
		TNT1 A 0 A_SpawnItemEx("ArchvileReplacer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		TNT1 A 0 A_JumpIf(tid != 0,"See");
		//TNT1 A 0 A_TakeFromSiblings("AEoDToken",100);
		//TNT1 A 0 A_GiveToSiblings("AEoDToken",1);
		Goto CountUp;
	CountUp:
		TNT1 A 0 { user_dlimit++;	}
		TNT1 A 0 A_JumpIf(user_dlimit>=4,"Vanish");
		Goto See;
	Vanish:
		TNT1 A 0 
		{
			A_SpawnItemEx("AEoD6SpellSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,252);
			A_SpawnItemEx("BFGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("PlasmaRifleReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("RocketLauncherReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("ChaingunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("SSGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("ShotgunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("Megasphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-36);
			A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-66);
			
			for (int i = 0; i < 9; i++)
			{
				if (i < 3)
				{
					A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
					A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
					A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
					A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-192);
				}
				
				if (i < 4)
				{
					A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,128);
				}
				A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-164);
			}
		}
		Goto Death;
	Stuck:
		TNT1 A 0 A_JumpIf(user_dlimit > 0, "Vanish");
		TNT1 A 0 A_TakeInventory("DirLargeChildCount",1,0,AAPTR_MASTER);
		Stop;
	SpecialDrops:
		TNT1 A 0 A_SpawnItemEx("BeastlyHealthDropper",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);
		TNT1 AAA 0 A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-160);
		TNT1 A 0 A_SpawnItemEx("RandomWeaponPower",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);
		Goto Death;
	Frozen:
		TNT1 A 35 A_Stop();
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("DirectorIsLeaving",1,"Death",AAPTR_MASTER);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		Goto See;
	Death:
		TNT1 A 0
		{
			A_TakeInventory("DirLargeChildCount",1,0,MasterPtr);
			A_SetSpecies("Nu");
			bNOINTERACTION = bNOTONAUTOMAP = bNOGRAVITY = true;
			A_SetTics(35 * 60 * 3);
		}
		TNT1 A 1 
		{
			//if (A_RadiusGive("DropTimer",256,RGF_ITEMS|RGF_NOSIGHT,1))
			if (!A_GiveToChildren("DropTimer",1))
			{	return Destroy();	}
		}
		Wait;
	}
}


Class MCMediumMobRunner : DirectorBase
{
	
	int user_dlimit;
	int user_t;
	int user_tid;
	Default
	{
		Monster;
		+THRUACTORS
		+FRIGHTENED
		+DONTTHRUST
		-SOLID
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		+NORADIUSDMG
		+NOBLOOD
		-TELESTOMP
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+CANTLEAVEFLOORPIC
		+NOTRIGGER
		+NOTELESTOMP
		+DONTSPLASH
		+DONTCORPSE
		+NOBLOCKMAP
		+LAXTELEFRAGDMG
		+ALWAYSTELEFRAG
		+NOPAIN
		Radius 64;
		Height 40;
		Speed 7;
		Health 1000000;
		DamageFactor "Normal", 0.0;
		DamageFactor "DirectorKiller", 32767;
		Species "Director";
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { user_tid = tid; Thing_ChangeTID(0,0); }
	Idle:
		TNT1 AAAAA 1 A_Look();
		Loop;
	See:
	Wanderbout:
		TNT1 A 0 Thing_ChangeTID(0,0);
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("DirectorIsLeaving",1,"Death",AAPTR_MASTER);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		TNT1 A 1 A_Chase(null,null);
		TNT1 AAAAAAAAA 1 A_Wander();
		TNT1 A 0 A_JumpIf(user_t >= 140,4);
		TNT1 A 0 { user_t++; }
		TNT1 A 0 A_JumpIf(user_t < 140,2);
		TNT1 A 0 { bCANTLEAVEFLOORPIC = false; }
		TNT1 A 0 
		{
			A_ChangeLinkFlags(false);
			bTHRUACTORS = false;
			if (A_CheckBlock("Stuck",CBF_DROPOFF))
			{	
				A_TakeInventory("DirLargeChildCount",1,0,MasterPtr);
				return ResolveState("Null");	
			}
			bTHRUACTORS = true;
			A_ChangeLinkFlags(true);
			return ResolveState(null);
		}
	Mobmaking:
		TNT1 A 0 A_JumpIfTargetInLOS("Wanderbout",360);
		TNT1 A 0 A_JumpIfCloser(250,"Wanderbout");
		TNT1 A 0 A_CheckSight(1);
		Goto Wanderbout;
		TNT1 A 0 Thing_ChangeTID(0,32667) ;
		//The above call is used to check and see if the spawning worked.
		//If it did, its TID is set to 0.
		TNT1 A 0 A_Jump(256,1,2,3,4,5,6,7,"Wanderbout");
		TNT1 A 0 A_SpawnItemEx("FatsoReplacer",0,0,5,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("RevenantReplacer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("HellKnightReplacer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("BaronofHellReplacer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("PainReplacer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("CacoReplacer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("ArachnotronReplacer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
	CountUp:
		TNT1 A 2 A_JumpIf(tid!=0,"Wanderbout"); //Means it didn't work.
		//TNT1 A 0 A_TakeFromSiblings("AEoDToken",100);
		//TNT1 A 0 A_GiveToSiblings("AEoDToken",1);
		TNT1 A 0 { user_dlimit++; }
		TNT1 A 0 A_JumpIf(user_dlimit >= 4,"Vanish");
		Goto Wanderbout;
	Vanish:
		TNT1 A 0 A_JumpIf(user_tid >= 666,"SpecialDrops");
		//TNT1 A 0 A_GiveInventory("CooldownDisable1",1,AAPTR_MASTER)
		//TNT1 A 0 A_GiveInventory("MediumCooldown",1,AAPTR_MASTER)
		TNT1 A 0 A_SpawnItemEx("AEoD6SpellSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,254);
		TNT1 A 0 A_SpawnItemEx("BFGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-16);
		TNT1 A 0 A_SpawnItemEx("PlasmaRifleReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-66);
		TNT1 A 0 A_SpawnItemEx("RocketLauncherReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-76);
		TNT1 A 0 A_SpawnItemEx("SSGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-106);
		TNT1 A 0 A_SpawnItemEx("ShotgunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-164);
		TNT1 A 0 A_SpawnItemEx("ChaingunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-164);
		TNT1 AA 0 A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-96);
		TNT1 AAA 0 A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-96);
		TNT1 AA 0 A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-96);
		TNT1 AA 0 A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-96);
		TNT1 A 0 A_SpawnItemEx("Megasphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-4);
		TNT1 A 0 A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-11);
		TNT1 AAAAAAA 0 A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
		TNT1 AAA 0 A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
		Goto Death;
	Frozen:
		TNT1 A 35 A_Stop();
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("DirectorIsLeaving",1,"Death",AAPTR_MASTER);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		Goto See;
	Stuck:
		//TNT1 A 0 A_GiveInventory("CooldownDisable1",1,AAPTR_MASTER);
		TNT1 A 0 A_JumpIf(user_dlimit > 0, "Vanish");
		TNT1 A 0 A_TakeInventory("DirMediumChildCount",1,0,AAPTR_MASTER);
		Stop;
	SpecialDrops:
		TNT1 A 0 A_SpawnItemEx("BeastlyHealthDropper",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-192);
		TNT1 AAA 0 A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-160);
		TNT1 A 0 A_SpawnItemEx("RandomWeaponPower",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-220);
		TNT1 A 0 A_Jump(192,1,2,3,4,5,6);
		Goto Death;
		TNT1 A 0 A_SpawnItemEx("BFGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);				Goto Death;
		TNT1 A 0 A_SpawnItemEx("PlasmaRifleReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);		Goto Death;
		TNT1 A 0 A_SpawnItemEx("RocketLauncherReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);	Goto Death;
		TNT1 A 0 A_SpawnItemEx("SSGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);				Goto Death;
		TNT1 A 0 A_SpawnItemEx("ShotgunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);			Goto Death;
		TNT1 A 0 A_SpawnItemEx("ChaingunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);			Goto Death;
	Death:
		TNT1 A 0
		{
			A_TakeInventory("DirMediumChildCount",1,0,AAPTR_MASTER);
			A_SetSpecies("Nu");
			bNOINTERACTION = bNOTONAUTOMAP = bNOGRAVITY = true;
			A_SetTics(35 * 60 * 3);
		}
		TNT1 A 1 
		{
			//if (A_RadiusGive("DropTimer",256,RGF_ITEMS|RGF_NOSIGHT,1))
			if (!A_GiveToChildren("DropTimer",1))
				return Destroy();	
		}
		Wait;
	}
}

Class MCSmallMobRunner : DirectorBase
{
	int user_dlimit;
	int user_t;
	int user_tid;
	Default
	{
		Radius 30;
		Height 56;
		Monster;
		+THRUACTORS
		+FRIGHTENED
		+DONTTHRUST
		-SOLID
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		//+FLOORHUGGER
		+NORADIUSDMG
		+NOBLOOD
		-TELESTOMP
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+CANTLEAVEFLOORPIC
		+NOTRIGGER
		+NOTELESTOMP
		+DONTSPLASH
		+DONTCORPSE
		+NOBLOCKMAP
		+LAXTELEFRAGDMG
		+ALWAYSTELEFRAG
		+NOPAIN
		//MaxDropOffHeight 128
		//MaxStepHeight 128
		Speed 7;
		Health 1000000;
		DamageFactor "Normal", 0.0;
		DamageFactor "DirectorKiller", 32767;
		Species "Director";
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			user_tid = tid;
			Thing_ChangeTID(0,0);
			user_dlimit = 0; 
		}
	Idle:
		TNT1 AAAAA 1 A_Look();
		Loop;
	See:
	Wanderbout:
		TNT1 A 0 Thing_ChangeTID(0,0);
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("DirectorIsLeaving",1,"Death",AAPTR_MASTER);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen");
		TNT1 A 1 A_Chase(null,null);
		TNT1 AAAAAAAAA 1 A_Wander();
		TNT1 A 0 A_JumpIf(user_t >= 140,4);
		TNT1 A 0 { user_t++; }
		TNT1 A 0 A_JumpIf(user_t < 140,2);
		TNT1 A 0 { bCANTLEAVEFLOORPIC = false; }
		TNT1 A 0 
		{
			A_ChangeLinkFlags(false);
			bTHRUACTORS = false;
			if (A_CheckBlock("Stuck",CBF_DROPOFF))
			{	
				A_TakeInventory("DirLargeChildCount",1,0,MasterPtr);
				return ResolveState("Stuck");	
			}
			bTHRUACTORS = true;
			A_ChangeLinkFlags(true);
			return ResolveState(null);
		}
	Mobmaking:
		TNT1 A 0 A_JumpIfTargetInLOS("Wanderbout",360);
		TNT1 A 0 A_JumpIfCloser(250,"Wanderbout");
		TNT1 A 0 A_CheckSight(1);
		Goto Wanderbout;
		TNT1 A 0 Thing_ChangeTID(0,32668);
		TNT1 A 0 A_Jump(256,1,2,3,4,5,6);
		TNT1 A 0 A_SpawnItemEx("ZombieReplacer",0,0,5,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("ShotguyReplacer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("ChainguyReplacer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("ImpReplacer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("LostSoulReplacer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
		TNT1 A 0 A_SpawnItemEx("DemonReplacer",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
		Goto CountUp;
	CountUp:
		TNT1 A 0 A_JumpIf(tid != 0,"Wanderbout");
		//TNT1 A 0 A_TakeFromSiblings("AEoDToken",100);
		//TNT1 A 0 A_GiveToSiblings("AEoDToken",1);
		TNT1 A 0 { user_dlimit++; }
		TNT1 A 0 A_JumpIf(user_dlimit>=10,"Vanish");
		Goto Wanderbout;
	Vanish:
		TNT1 A 0 A_JumpIf(user_tid >= 666,"SpecialDrops");
		TNT1 A 0 A_SpawnItemEx("RocketLauncherReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-16);
		TNT1 A 0 A_SpawnItemEx("SSGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-36);
		TNT1 A 0 A_SpawnItemEx("ShotgunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-76);
		TNT1 A 0 A_SpawnItemEx("ChaingunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-66);
		TNT1 AA 0 A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-96);
		TNT1 AA 0 A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-96);
		TNT1 AA 0 A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-32);
		TNT1 AA 0 A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-32);
		TNT1 A 0 A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-16);
		TNT1 AAAAA 0 A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
		TNT1 AAA 0 A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-48);
		Goto Death;
	Frozen:
		TNT1 A 35 A_Stop();
		TNT1 A 0 A_JumpIfInventory("RemoveDirector",1,"Death",AAPTR_TARGET);
		TNT1 A 0 A_JumpIfInventory("DirectorIsLeaving",1,"Death",AAPTR_MASTER);
		TNT1 A 0 A_JumpIf(!GetCvar("DirectorsEnabled"),"Frozen")		;
		Goto Wanderbout;
	Stuck:
		TNT1 A 0 A_JumpIf(user_dlimit > 0, "Vanish");
		TNT1 A 0 A_TakeInventory("DirSmallChildCount",1,0,AAPTR_MASTER);
		Stop;
	SpecialDrops:
		TNT1 A 0 A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-192);
		TNT1 AAA 0 A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
		TNT1 A 0 A_SpawnItemEx("RandomWeaponPower",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
		TNT1 A 0 A_Jump(128,1,2,3,4);
		Goto Death;
		TNT1 A 0 A_SpawnItemEx("RocketLauncherReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);	Goto Death;
		TNT1 A 0 A_SpawnItemEx("SSGReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);				Goto Death;
		TNT1 A 0 A_SpawnItemEx("ShotgunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);			Goto Death;
		TNT1 A 0 A_SpawnItemEx("ChaingunReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR);			Goto Death;
	Death:
		TNT1 A 0
		{
			A_TakeInventory("DirSmallChildCount",1,0,AAPTR_MASTER);
			A_SetSpecies("Nu");
			bNOINTERACTION = bNOTONAUTOMAP = bNOGRAVITY = true;
			A_SetTics(35 * 60 * 3);
		}
		TNT1 A 1 
		{
			//if (A_RadiusGive("DropTimer",256,RGF_ITEMS|RGF_NOSIGHT,1))
			if (!A_GiveToChildren("DropTimer",1))
				return Destroy();	
		}
		Wait;
	}
}

Class SpawnSmallMonster : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		//TNT1 A 0 A_PrintBold("Spawned")
		TNT1 A 0 A_SpawnItemEx("MCSmallMobRunner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		Stop;
	}
}

Class SpawnMediumMonster : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_SpawnItemEx("MCMediumMobRunner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		Stop;
	}
}

Class SpawnLargeMonster : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_SpawnItemEx("MCLargeMobRunner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		Stop;
	}
}
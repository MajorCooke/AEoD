Class SkillCount : Inventory
{
	Default
	{
		Inventory.MaxAmount 5;
		Inventory.InterHubAmount 0;
	}
}

Class NightmareToken : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
		Inventory.InterHubAmount 1;
	}
}

Class HordeModeTest : Inventory
{	Default { Inventory.MaxAmount 1;	} }

Class ZombieHealthDivider : Inventory
{
	Default
	{
		Inventory.MaxAmount 6;
		Inventory.InterHubAmount 6;
	}
}
Class L4DDirectorSpawner : CustomInventory
{
	
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_SpawnItemEx("TheDirectorL4D",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_NOPOINTERS|SXF_SETTARGET);
		Stop;
	}
}

Class SmallSpawnTokenTwo : Inventory
{
	Default
	{
		Inventory.MaxAmount 50;
		Inventory.InterHubAmount 50;
	}
}

Class TheDirectorL4D : DirectorMain
{
	int index;
	int nightmare;
	int mul;
	int bias[2];
	//Biasity (#/256) to jump to the medium and large spawning categories.
	//random(1,256) <= bias[#]
	//[0] = Medium spawn chance
	//[1] = Large spawn chance
	int cc[3];
	//Max number of children allowed active at any time.
	//Determined by script.
	//[0] = Small spawners
	//[1] = Medium spawners
	//[2] = Large spawners
	int cd[9];
	//Will be used by the script to determine current intensities.
	//[0] = Small cooldown min
	//[1] = Small cooldown max
	//[2] = Medium cooldown min
	//[3] = Medium cooldown max
	//[4] = Large cooldown min
	//[5] = Large cooldown max
	//[6] = Horde cooldown min
	//[7] = Horde cooldown max
	//[8] = Random amount to add to cooldowns from 0 to [8]
	int cooldown[5];
	//[0] = Normal cooldown
	//[1] = Exclusive small child countdown
	//[2] = Bool [0] on cooldown
	//[3] = Horde Cooldown
	int delay;
	int horde[3];
	//[0] = Is it available?
	//[1] = Timer
	//[2] = Cooldown
	int volume;
	Actor Populator;
	
	Default
	{
		Monster;
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		+FLOORHUGGER
		+NORADIUSDMG
		+THRUACTORS
		+NOBLOOD
		+NOTELEPORT
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		-SOLID
		-NODROPOFF
		+DROPOFF
		+NOTRIGGER
		+NOBLOCKMAP
		+NOFEAR
		+NOTELESTOMP
		+NOCLIP
		+DONTTHRUST
		+NODAMAGE
		+NOPAIN
		+DONTSPLASH
		+DONTCORPSE
		Radius 120;
		Height 80;
		Speed 20;
		Species "Director";
		RenderStyle "None";
		TeleFogSourceType "";
		TeleFogDestType "";
	}
	
	override void PostBeginPlay()
	{
		Event = AEoDHandler(EventHandler.Find("AEoDHandler"));
		if (Event.L4DDirector)	
		{
			Console.Printf("Destroyed");
			Destroy();	return;
		}
		Event.L4DDirector = self;
		GrabCvars();
		ChangeTID(0);
		//Default values
		mul = RealIntensity;
		
		if (mul < 666)	{	volume = 10;	}
		else			{	volume = 1;		}
		
		if (mul < 1)
		{	
			Console.Printf("Multiplier was 0. This should not happen!\nReport this to the AEoD team immediately.",7.0);
			mul = 3;
		}
		
		bFRIENDLY = false;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i])
			{
				target = players[i].mo;
				break;
			}
		}
		
		if (mul > 4)
			nightmare = 1;
		
		bias[0] = 6;	//#/256 chance to spawn medium
		bias[1] = 2;	//^ large
		cd[0] = 2500;	//Small cooldown min
		cd[1] = 5000;	//Small cooldown max
		cd[2] = 4000;	//Medium cooldown min
		cd[3] = 10000;	//Medium cooldown max
		cd[4] = 10000;	//Large cooldown min
		cd[5] = 20000;	//Large cooldown max
		cd[6] = 22200;	//Horde cooldown min
		cd[7] = 46500;	//Horde cooldown max
		cd[8] = random(50,175);
		cc[0] = 6; //small
		cc[1] = 4; //medium
		cc[2] = 2; //large
		Super.PostBeginPlay();
	}
	
	override void OnDestroy()
	{
		if (Populator)	Populator.Destroy();
		Super.OnDestroy();
	}
	
	override void GrabCvars()
	{
		Super.GrabCvars();
		
		if (Event)
		{
			Event.GetCvars();
			RealIntensity = Event.L4DIntensity;
		}
	}
	
	override void Deactivate(Actor activator)
	{
		Super.Deactivate(activator);
		if (Populator)	Populator.Deactivate(activator);
	}
	
	override void Activate(Actor activator)
	{
		Super.Activate(activator);
		if (Populator)	Populator.Activate(activator);
	}
	
	States
	{
	Spawn:
		TNT1 A 1050 NoDelay 
		{
			bool a;
			[a, Populator] = A_SpawnItemEx("L4DPopulater",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_TRANSFERPOINTERS);
			
			if (target)
			{
				if (target.CountInv("PFirstTimeToken2"))
				{
					A_SetInventory("PFirstTimeToken2",0,TargetPtr);
					A_SetTics(35 * 60);
					
					if (mul < 666)
						A_GiveInventory("SmallSpawnTokenTwo",(50-(mul*3)),TargetPtr);
				}
			}
			//A_SetTics(35);
		}
		Goto Idle;
	Inactive:
		TNT1 A -1;
	Idle:
		TNT1 A 1 A_Look();
		Loop;
	Active:
	See:
	SeeCont:
	Chasing:
		TNT1 A 0 
		{
			if (!target || !(target is "PlayerPawn"))
			{
				target = players[0].mo;
				A_Chase(null, null, CHF_DONTMOVE);
			}
			for (int i = 0; i < cooldown.Size(); i++)
			{
				if (cooldown[i] > 0)
				{	cooldown[i] -= (mul * random(7,10));	}
			}
			if (target && target.CountInv("HordeModeTest"))
				return ResolveState("HordeModeForce");
			return ResolveState(null);
		}
		TNT1 A 2 
		{
			A_UnsetShootable();
			A_Chase();
		}
		Loop;
	HordeModeForce:
		TNT1 A 0 
		{	
			A_SetInventory("HordeModeTest",0,TargetPtr);
			for (int i = 0; i < cooldown.Size(); i++)		//Wipe it clean for testing purposes.
			{
				cooldown[i] = 0;
			}
			horde[2] = 0;
		}
		Goto HordeMode;
	HordeMode:
		TNT1 A 0 
		{
			//Don't go overwhelming on 666 intensities.
			if (cooldown[3] > 0 || SmallKids.Size() > 24)
			{
				//Console.Printf("Size: %d - Cooldown: %d", SmallKids.Size(), cooldown[3]);
				return ResolveState("Chasing");
			}
			
			
			A_PlaySound("Director/Horde",5,(volume*0.1),0,ATTN_NONE);
			A_Stop();
			cooldown[3] = random(cd[6], cd[7]);
			
			for (int i = 0; i < 6; i++)
			{
				let m = L4DSmallMobRunner(Spawn("L4DSmallMobRunner",pos,ALLOW_REPLACE));
				if (m)
				{
					m.Spawner = self;
					m.angle = random(0,359);
					m.nightmare = nightmare;
					m.thid = mul;
					m.horde = 1;
					m.master = self;
					m.target = target;
					m.tracer = tracer;
					SmallKids.Push(m);
				}
			}
			return ResolveState(null);
		}
		TNT1 AAAAA 35;
		Goto ChanceCD;
	Missile:
		TNT1 A 0 
		{
			StateLabel next = "Missile2";
			if (target)
			{
				SetOrigin(target.pos, false);
				int rng = random(0,255);
				
				if (target.CountInv("SmallSpawnTokenTwo"))	next = "SmallMobShoot";
				else if (mul >= 666)	
				{
					return A_Jump(256,"SmallMobShoot","MediumMobShoot","LargeMobDecide");
				}
				else										next = "Missile2";
			}
			return ResolveState(next);
		}
		Goto SmallMobShoot;
	Missile2:
		TNT1 A 0 A_JumpIf(random(1,2560) <= (bias[1]+(mul*20)),"LargeMobDecide");
		TNT1 A 0 A_JumpIf(random(1,2560) <= (bias[0]+(mul*60)),"MediumMobShoot");
		Goto SmallMobShoot;
	LargeMobDecide:
		TNT1 A 0 A_Jump(192,"HordeMode");
	LargeMobShoot:
		TNT1 A 1
		{
			if (cooldown[2] > 0 || LargeKids.Size() > cc[2] * mul)
			{
				//Console.Printf("Size: %d - Cooldown: %d", LargeKids.Size(), cooldown[2]);
				return ResolveState("Chasing");
			}
			
			let b = L4DLargeMobRunner(Spawn("L4DLargeMobRunner",pos, ALLOW_REPLACE));
			if (b)
			{
				b.master = self;
				b.Spawner = self;
				b.angle = angle;
				b.target = target;
				b.tracer = tracer;
				cooldown[2] = random(cd[4],cd[5]);
				LargeKids.Push(b);
				return ResolveState("ChanceCD");
			}
			return ResolveState("Chasing");	
		}
		Goto ChanceCD;
		
	MediumMobShoot:
		TNT1 A 1
		{
			if (cooldown[1] > 0 || MediumKids.Size() > cc[1] * mul)
			{
				//Console.Printf("Size: %d - Cooldown: %d", MediumKids.Size(), cooldown[1]);
				return ResolveState("Chasing");
			}
			let b = L4DMediumMobRunner(Spawn("L4DMediumMobRunner",pos, ALLOW_REPLACE));
			if (b)
			{
				b.master = self;
				b.Spawner = self;
				b.angle = angle;
				b.target = target;
				b.tracer = tracer;
				cooldown[1] = random(cd[2],cd[3]);
				MediumKids.Push(b);
				return ResolveState("ChanceCD");
			}
			return ResolveState("Chasing");	
		}
	SmallMobShoot:
		TNT1 A 1
		{
			if (cooldown[0] > 0 || SmallKids.Size() > cc[0] * mul)
			{
				//Console.Printf("Size: %d - Cooldown: %d", SmallKids.Size(), cooldown[0]);
				return ResolveState("Chasing");
			}
			
			target.A_TakeInventory("SmallSpawnTokenTwo",1,0);
			let b = L4DSmallMobRunner(Spawn("L4DSmallMobRunner",pos, ALLOW_REPLACE));
			if (b)
			{
				b.master = self;
				b.Spawner = self;
				b.angle = angle;
				b.nightmare = nightmare;
				//b.thid = mul;
				b.target = target;
				b.tracer = tracer;
				cooldown[0] = random(cd[0],cd[1]);
				SmallKids.Push(b);
				return ResolveState("ChanceCD");
			}
			return ResolveState("Chasing");	
		}
	ChanceCD:
		TNT1 A 0 A_Jump(250,"Chasing");
		TNT1 A 0 A_Jump(256,1,1,2,2,3,3,4);
		TNT1 AAAAAA 350;
		Goto Chasing;
	}
}

Class L4DPopulater : DirectorKid
{
	int user_wander;
	int user_populate;
	int cooldown;
	
	Default
	{
		-TELESTOMP
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+NORADIUSDMG
		+THRUACTORS
		+NEVERTARGET
		+NOTARGETSWITCH
		+CANTSEEK
		-FRIENDLY
		-COUNTKILL
		+LOOKALLAROUND
		+NEVERFAST
		+NODAMAGE
		+DONTSPLASH
		+NONSHOOTABLE
		-SHOOTABLE
		-NODROPOFF
		+DROPOFF
		+NOTRIGGER
		+NOBLOCKMAP
		+NOTELESTOMP
		+NOTONAUTOMAP
		+DONTTHRUST
		+DONTSPLASH
		+DONTCORPSE
		Radius 16;
		Height 64;
		Speed 20;
		RenderStyle "None";
		Species "Director";
	}
	// The "Kid" version is unnecessary here.
	override void OnDestroy()
	{
		Actor.OnDestroy();
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
	Idle:
		TNT1 A 1 A_Look();
		Loop;
	Active:
	See:
	Cooldown:
		TNT1 A 1 A_SetTics(35*random(1,10));
	Wandering:
		TNT1 A 1 
		{
			A_Wander();	
			user_wander++;
		}
		TNT1 A 0 A_JumpIf(user_wander>=900,"Populate");
		Loop;
	Populate:
		TNT1 A 0 { user_wander = 0; }
		TNT1 A 0 A_JumpIfCloser(250,"NoPop");
		TNT1 A 0 A_JumpIfTargetInLOS("NoPop",360);
		TNT1 A 0 A_CheckSight(1);
		Goto NoPop;
		TNT1 A 1 A_SpawnItemEx("L4DCommonSpawner",random(-60,60),random(-60,60),0,0,0,0,random(0,359),SXF_TRANSFERPOINTERS,210);
		TNT1 A 0 A_Warp(AAPTR_DEFAULT,random(15,150),0,0,random(0,359));
		TNT1 A 0 A_Jump(256,1,2,3,4,5,6,7,8,9,10);
		TNT1 AAAAAAAAAA 1 A_Wander();
		TNT1 A 0 { user_populate++; }
		TNT1 A 0 A_JumpIf(user_populate>=random(15,45),1);
		Loop;
		TNT1 A 0 { user_populate = 0; }
	MoveBack:
		TNT1 A 0 A_Warp(TargetPtr,0,0,0,0,WARPF_NOCHECKPOSITION);
		Goto Cooldown;
	NoPop:
		TNT1 A 0 A_Jump(256,1,2,3,4,5);
		TNT1 AAAAAAA 1 A_Wander();
		Goto Populate;
	Removal:
	Death:
		TNT1 A 0;
		Stop;
	}
}


Class L4DLargeMobRunner : DirectorKid
{
	int user_check[2];
	Default
	{
		Monster;
		+THRUACTORS
		+FRIGHTENED
		//+NOFEAR
		+DONTTHRUST
		-SOLID
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		//+FLOORHUGGER
		+NORADIUSDMG
		+NOBLOOD
		-TELESTOMP
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+CANTLEAVEFLOORPIC
		+NOTRIGGER
		+NOTELESTOMP
		+DONTSPLASH
		+DONTCORPSE
		+NOBLOCKMAP
		+LAXTELEFRAGDMG
		+ALWAYSTELEFRAG
		+NOPAIN
		+DONTTHRUST
		//MaxDropOffHeight 128
		//MaxStepHeight 128
		Speed 14;
		Radius 60;
		Height 64;
		Species "Director";
	}
	States
	{
	Spawn:
	Idle:
		TNT1 A 0 { bFRIENDLY = false; }
		TNT1 AAAAA 1 A_Look();
		Loop;
	See:
	Wanderbout:
		TNT1 A 1 KidTick();
		TNT1 AAAAAAAAA 1 A_Wander();
		
	Mobmaking:
		TNT1 A 0
		{
			if (Distance3DSquared(target) <= (250 ** 2) || !A_CheckSight("Null"))
				return ResolveState("Wanderbout");
			return ResolveState("MobChance");
		}
	MobChance:
		TNT1 A 0
		{
			bool sp;
			if (random(0,1))
				sp = A_SpawnItemEx("L4DTank",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
			else if (random(0,1))
				sp = A_SpawnItemEx("L4DWitchSitting",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
			else
				sp = A_SpawnItemEx("L4DWitchWander",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_CLEARCALLERTID);
			if (sp)	return ResolveState("Vanish");
			return ResolveState("Wanderbout");
		}
	Vanish:
		TNT1 A 0 
		{
		//	A_TakeFromSiblings("AEoDToken",100);
		//	A_GiveToSiblings("AEoDToken",1);
			return ResolveState("VanishC");
		}
	VanishHorde:
		TNT1 A 1;
		Goto End;
	VanishC:
		TNT1 A 0
		{
			A_SpawnItemEx("Megasphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,190);
			A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,160);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("AEoD6SpellSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-2);
			A_SpawnItemEx("L4DPackageSpawnerMMCheck",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,0);
			A_SpawnItemEx("L4DPackageSpawnerCheck",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("L4DPackageSpawnerMMCheck",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			return ResolveState("End");
		}
		
	Stuck:
		TNT1 A 0;
		Stop;
	Death:
	End:
		TNT1 A 1 DelayDestruction();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 
		{
			if (!A_GiveToChildren("DropTimer",1))
			{	Destroy();	return;	}
			
		}
		Stop;
	}
}

Class L4DMediumMobRunner : DirectorKid
{
	int user_dlimit;
	int user_limit;
	Default
	{
		Monster;
		+THRUACTORS
		+FRIGHTENED
		//+NOFEAR
		+DONTTHRUST
		-SOLID
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		//+FLOORHUGGER
		+NORADIUSDMG
		+NOBLOOD
		-TELESTOMP
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+CANTLEAVEFLOORPIC
		+NOTRIGGER
		+NOTELESTOMP
		+DONTSPLASH
		+DONTCORPSE
		+NOBLOCKMAP
		+LAXTELEFRAGDMG
		+ALWAYSTELEFRAG
		+NOPAIN
		//MaxDropOffHeight 128
		//MaxStepHeight 128
		+DONTTHRUST
		Speed 14;
		Health 1000000;
		DamageFactor "Normal", 0.0;
		DamageFactor "DirectorKiller", 32767;
		Species "Director";
		Radius 40;
		Height 64;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { user_limit = random(1,2); }
	Idle:
		TNT1 A 0 { bFRIENDLY = false; }
		TNT1 AAAAA 1 A_Look();
		Loop;
	See:
	Wanderbout:
		TNT1 A 1 A_Chase();
		TNT1 AAAAAAAAA 1 A_Wander();
		TNT1 A 0 
		{
			if (user_t >= 140)
				bCANTLEAVEFLOORPIC = false;
			else
				user_t++;
		
			A_ChangeLinkFlags(false);
			bTHRUACTORS = false;
			if (A_CheckBlock("Stuck",CBF_DROPOFF))
			{	Destroy();	return;	}
			bTHRUACTORS = true;
			A_ChangeLinkFlags(true);
		}
	Mobmaking:
		TNT1 A 0
		{
			if (A_JumpIfTargetInLOS("Wanderbout",360,0,250) || !A_CheckSight("Null"))
				return ResolveState("Wanderbout");
			return ResolveState("MobChance");
		}
	MobChance:
		TNT1 A 0
		{
			int rng = random(1,7);
			Class<Actor> mon = null;
			Switch(rng)
			{
				Case 1:	mon = "L4DJockey";	break;
				Case 2:	mon = "L4DBoomer";	break;
				Case 3:	mon = "L4DSmoker";	break;
				Case 4:	mon = "L4DSpitter";	break;
				Case 5:	mon = "L4DHunter";	break;
				Case 6:	mon = "L4DCharger";	break;
				Case 7: return ResolveState("Wanderbout");
			}
			if (mon)
			{
				if (A_SpawnItemEx(mon, flags: SXF_TRANSFERPOINTERS))
				{
					user_dlimit++;
				//	A_GiveToSiblings("AEoDToken",1);
					if (user_dlimit >= user_limit)
						return ResolveState("VanishC");
				}
			}
			return ResolveState("Wanderbout");
		}
	Vanish:
		TNT1 A 0 { if (!Spawner) {	Destroy();	return;	} }
	VanishHorde:
		TNT1 A 1;
		Goto End;
	VanishC:
		TNT1 A 0
		{
			A_SpawnItemEx("AEoD6SpellSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,254);
			A_SpawnItemEx("Megasphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-32);
			A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-64);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-128);
			A_SpawnItemEx("L4DPackageSpawnerMMCheck",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR);
			A_SpawnItemEx("L4DPackageSpawnerCheck",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-64);
		}
		Goto End;
	Stuck:
		TNT1 A 1 A_JumpIf(user_dlimit > 0, "VanishC");
		Goto End;
	Death:
	End:
		TNT1 A 1 DelayDestruction();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 
		{
			if (!A_GiveToChildren("DropTimer",1))
			{	Destroy();	return;	}
		}
		Stop;
	}
}

Class L4DSmallMobRunner : DirectorKid
{
	int user_dlimit;
	int user_max;
	int user_check[2];
	int nightmare;
	int horde;
	int user_ambush;
	int count;
	Vector3 prev;
	Class<Actor> mon;
	Default
	{
		Monster;
		+THRUACTORS
		+FRIGHTENED
		//+NOFEAR
		+DONTTHRUST
		-SOLID
		+NEVERTARGET
		-COUNTKILL
		+CANTSEEK
		//+FLOORHUGGER
		+NORADIUSDMG
		+NOBLOOD
		-TELESTOMP
		+LOOKALLAROUND
		+NOTARGETSWITCH
		+NONSHOOTABLE
		-SHOOTABLE
		-CANUSEWALLS
		-CANPUSHWALLS
		-ACTIVATEMCROSS
		+CANTLEAVEFLOORPIC
		+NOTRIGGER
		+NOTELESTOMP
		+DONTSPLASH
		+DONTCORPSE
		+NOBLOCKMAP
		+LAXTELEFRAGDMG
		+ALWAYSTELEFRAG
		+NOPAIN
		+BLOCKEDBYSOLIDACTORS
		//MaxDropOffHeight 128
		//MaxStepHeight 128
		+DONTTHRUST
		Speed 14;
		DamageFactor "Normal", 0.0;
		DamageFactor "DirectorKiller", 32767;
		Species "Director";
		Radius 20;
		Height 64;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			mon = (Spawner != null) ? "L4DCommonSpawnerNA" : "L4DCommonSpawner";
		}
	Idle:
		TNT1 AAAAA 1 A_Look();
		Loop;
	See:
		TNT1 A 0 
		{
			user_max = nightmare ? random(10,25) : random(7,15);
		}
	Wanderbout:
		TNT1 A 0 A_JumpIf(horde > 0, "MobHorde");
		TNT1 AAAA 1 A_Chase(null,null);
		TNT1 A 0 A_JumpIf(nightmare > 0, 4);
		TNT1 AAAAA 1 A_Wander();
		TNT1 A 0 
		{
			if (user_t >= 140)		bCANTLEAVEFLOORPIC = false;
			else					user_t++;
		
			A_ChangeLinkFlags(false);
			bTHRUACTORS = false;
			if (A_CheckBlock("Stuck",CBF_DROPOFF))
			{	Destroy();	return;	}
			bTHRUACTORS = true;
			A_ChangeLinkFlags(true);
		}
	Mobmaking:
		TNT1 A 0
		{
			if (A_JumpIfTargetInLOS("Wanderbout",360,0,250) || !A_CheckSight("Null"))
				return ResolveState("Wanderbout");
			return ResolveState("MobChance");
		}
	MobChance:
	MobChanceNA:
		TNT1 A 0
		{
			Class<Actor> mon = master ? "L4DCommonSpawnerNA" : "L4DCommonSpawner";
			if (A_SpawnItemEx(mon, flags: SXF_TRANSFERPOINTERS))
			{
				for (int i = 0; i < 2; i++)
					A_SpawnItemEx(mon, flags: SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION, failchance: 225);
			//	A_GiveToSiblings("AEoDToken",1);
				user_dlimit++;
			}
			if (user_dlimit >= user_max)
				return ResolveState("Vanish");
			return ResolveState("Wanderbout");
		}
	MobHorde:
	MobHordeNightmare:
		TNT1 A 1 A_Wander();
		TNT1 A 1
		{
			if (!A_JumpIfTargetInLOS("Null",360,0,250) && A_CheckSight("Null"))
			{
				if (Spawner)	Spawner.RemoveKid(self);
				Spawner = null;
				return ResolveState("SpawnHorde");
			}
			return ResolveState(null);
		}
		Loop;
	SpawnHorde:
		TNT1 A 1 
		{
			A_SpawnItemEx(mon,0,0,0,frandom(1.0,5.0),0,0,random(0,359),SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			count++;
			if (count > (nightmare ? 60 : 30))
			{
			//	A_GiveToSiblings("AEoDToken",1);
				A_DropItem("AEoD6SpellSpawner",0,1);
				if (target && target.CountInv("JokeToken"))
					A_DropItem("L4DJokeWeaponSpawner",0,224);
				else
					A_DropItem("L4DGeneralWeaponSpawner",0,224);
				
				if (thid >= 666)	return ResolveState("SpecialDrops");
				if (nightmare)		return ResolveState("MHNCont");
				return ResolveState("MHCont");
			}
			return ResolveState(null);
		}
		Wait;
	MHCont:
		TNT1 A 1
		{
			A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-26);
			for (int i = 0; i < 7; i++)
			{	
				if (i < 3)
					A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
				A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-224);
			}
		}
		Goto End;
	MHNCont:
		TNT1 A 1
		{
			A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			
			for (int i = 0; i < 3; i++)
			{	A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);	}
		}
		Goto End;
	Vanish:
		TNT1 A 0
		{
			if (nightmare || target && target.CountInv("NightmareToken"))
				return ResolveState("VanishNightmare");
			if (master)
				return ResolveState("Vanish2");
			return ResolveState("End");
			
		}
		//TNT1 A 0 //A_JumpIfInventory("DirectorMasterToken",1,1,AAPTR_MASTER)
		Goto End;
	Vanish2:
		TNT1 A 1
		{
			A_SpawnItemEx("L4DPackageSpawnerCheck",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,0);
			A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,230);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,190);
		}
		Goto End;
	VanishNightmare:
		TNT1 A 0 { if (!master && random(1,256) >= 32)	{	Destroy();	return;	}	}
	VanishNightmare2:
		TNT1 A 1 
		{
			A_SpawnItemEx("L4DPackageSpawnerMMCheck",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,0);
			A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-66);
			A_SpawnItemEx("Megasphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-11);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-160);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-160);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,256-160);
		}
		Goto End;
	SpecialDrops:
		TNT1 A 1
		{
			A_SpawnItemEx("BeastlyHealthDropper",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,0);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("PowerupsSpawnerDirector",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			A_SpawnItemEx("RandomWeaponPowerAmmoGive",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,64);
			A_SpawnItemEx("RandomWeaponPowerAmmoGive",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER|SXF_ORIGINATOR,128);
			/*
			Class<Actor> mo = (target && target.CountInv("JokeToken")) ? "L4DJokeWeaponSpawner" : "L4DGeneralWeaponSpawner";
			if (mo)
			{
				let item = L4DItemSpawner(Spawn(mo, pos, ALLOW_REPLACE));
			}
			*/
			if (CountInv("JokeToken",TargetPtr) > 0)
			{	A_SpawnItemEx("L4DJokeWeaponSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-234);	}
			else
			{	A_SpawnItemEx("L4DGeneralWeaponSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,256-234);	}
		}
	Death:
	End:
		TNT1 A 1 DelayDestruction();
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 
		{
			if (!A_GiveToChildren("DropTimer",1))
			{	Destroy();	return;	}
		}
		Stop;
	}
}

Class FadeSpawned : Inventory { }

Class DropTimer : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			// Only remove spawned items via the director. Exceptions
			// are weapons.
			if (!(self is "Inventory") ||
				species == 'Permanent' ||
				self is 'AEoDWeaponPickup' ||
				self is 'AEoDWeaponBase' ||
				self is 'AEoDWeaponDrop' ||
				self is 'Weapon')
			{	return false;		}
			
			A_FadeOut(0.05,FTF_REMOVE);
			//A_SpawnItemEx("InventoryTimeRemover",0,0,0,0,0,0,0,SXF_SETTARGET|SXF_NOCHECKPOSITION);
			return true;
		}
		Stop;
	}
}
Class InvFader : CustomInventory
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_FadeOut(0.05,FTF_REMOVE);
		Stop;
	}
}

//There's a reason for this, because they can be picked up at any time unlike life seeds and such.
Class BeastlyHealthDropper : RandomSpawner
{
	Default
	{
		+NOTELESTOMP
		DropItem "FMegaSphere", 255, 50;
		DropItem "PentagramOfProtection", 255, 25;	//This shit gets insane after a few minutes.
		DropItem "MegaSphere", 255, 15;
	}
}

Class L4DPackageSpawnerMMCheck : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTELESTOMP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_JumpIfInventory("JokeToken",1,2,TargetPtr);
		TNT1 A 0 A_SpawnItemEx("L4DPackageSpawnerMM",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		Stop;
		TNT1 A 0 A_SpawnItemEx("L4DPackageSpawnerMMJ",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		Stop;
	}
}

Class L4DPackageSpawnerCheck : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTELESTOMP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_JumpIfInventory("JokeToken",1,2,TargetPtr);
		TNT1 A 0 A_SpawnItemEx("L4DPackageSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		Stop;
		TNT1 A 0 A_SpawnItemEx("L4DPackageSpawnerJ",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		Stop;
	}
}

Class L4DAmmoPack : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTELESTOMP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
			A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
			A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-94);
			A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-94);
		}
	HP:
		TNT1 AAAA 0 A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-32);
		Stop;
	}
}

Class L4DAmmoPackMM : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTELESTOMP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0
		{
			for (int i = 0; i < 2; i++)
			{
				A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
				A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
				A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-94);
				A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-94);
			}
		}
	HP:
		TNT1 AAAA 0 A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,32);
		Stop;
	}
}

Class L4DHealthPack : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTELESTOMP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_Jump(12,"MS");
		TNT1 A 0 A_Jump(24,"SS");
		TNT1 A 0 A_Jump(32,"Armor1","Armor2");
		TNT1 A 0 A_Jump(64,"HP2");
	HP1:		
		TNT1 AAAA 0 A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-192);
		Goto AmmoPile;
	HP2:
		TNT1 AAAAAAAAAA 0 A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-192);
		Goto AmmoPile;
	Armor1:
		TNT1 A 0 A_SpawnItemEx("L4DArmorSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0);
		TNT1 A 0 A_Jump(32,"SS");
		Goto AmmoPile;
	Armor2:
		TNT1 AAAAAAAAAA 0 A_SpawnItemEx("ArmorShardSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,192);
		TNT1 A 0 A_Jump(32,"SS");
		Goto AmmoPile;
	SS:
		TNT1 A 0 A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0);
		Goto AmmoPile;
	MS:
		TNT1 A 0 A_SpawnItemEx("MegaSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0);
		Goto AmmoPile;
	AmmoPile:
		TNT1 A 0 A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,48);
		TNT1 A 0 A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,48);
		TNT1 A 0 A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,24);
		TNT1 A 0 A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,24);
		Stop;
	}
}

Class L4DHealthPackMM : Actor
{
	int user_d;
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOTELESTOMP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_Jump(12,"MS");
		TNT1 A 0 A_Jump(24,"SS");
		TNT1 A 0 A_Jump(32,"Armor1","Armor2");
		TNT1 A 0 A_Jump(64,"HP2");
	HP1:		
		TNT1 AAAAAAAA 0 A_SpawnItemEx("Medikit",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
		Goto AmmoPile;
	HP2:
		TNT1 AAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
		Goto AmmoPile;
	Armor1:
		TNT1 A 0 A_SpawnItemEx("L4DArmorSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0);
		TNT1 A 0 A_Jump(48,"SS");
		Goto AmmoPile;
	Armor2:
		TNT1 AAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("ArmorShardSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,128);
		TNT1 A 0 A_Jump(48,"SS");
		Goto AmmoPile;
	SS:
		TNT1 A 0 A_SpawnItemEx("SoulSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0);
		Goto AmmoPile;
	MS:
		TNT1 A 0 A_SpawnItemEx("MegaSphere",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,0);
		Goto AmmoPile;
	AmmoPile:
		TNT1 AA 0 A_SpawnItemEx("ShellBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-24);
		TNT1 AA 0 A_SpawnItemEx("ClipBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-24);
		TNT1 AA 0 A_SpawnItemEx("RocketBoxReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-12);
		TNT1 AA 0 A_SpawnItemEx("CellPackReplacer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS,256-12);
		Stop;
	}
}

Class L4DItemSpawner : RandomSpawner
{
	int mul;
	Property Multiplier: mul;
	Default
	{
		L4DItemSpawner.Multiplier 1;
		+NOTELESTOMP
		+NOTONAUTOMAP
	}
	/*
	int RemapRangeInt(int x, int fromMin, int fromMax, int toMin, int toMax) 
	{
		return (x - fromMin) * (toMax - toMin) / (fromMax - fromMin) + toMin;
	}
	*/
	/// Remaps a value in a range to another range.
	int RemapRangeInt(int value, int range1L, int range1H, int range2L, int range2H) 
	{
		return int(range2L + (value - range1L) * (range2H - range1H) / double(range1H - range1L));
	}
	// To handle "RandomSpawning" missiles, the code has to be split in two parts.
	// If the following code is not done in BeginPlay, missiles will use the
	// random spawner's velocity (0...) instead of their own.
	override void BeginPlay()
	{
		DropItem di;   // di will be our drop item list iterator
		DropItem drop; // while drop stays as the reference point.
		int n = 0;
		int imin = 1000000, imax = 0;
		
		drop = di = GetDropItems();
		if (di != null)
		{
			if (mul > 0)
			{
				while (di != null)
				{
					if (di.Name != 'None')
					{
						int amt = di.Amount;
						if (amt < 0)	amt = 1;
						if (amt < imin)	imin = amt;
						if (amt > imax)	imax = amt;
					}
					di = di.Next;
				}
				di = drop;
			}
		}
		if (di != null)
		{
			while (di != null)
			{
				if (di.Name != 'None')
				{
					int amt = di.Amount;
					if (amt < 0 || mul < 1) amt = 1; 	// default value is -1, we need a positive value.
					
					int scaled = RemapRangeInt(amt, imin, imax, imin, imax * mul);
					n += scaled;
					//n += amt; 				// this is how we can weight the list.
					
				}
				di = di.Next;
			}
			if (n == 0)
			{ // Nothing left to spawn.
				Destroy();	return;
			}
			// Then we reset the iterator to the start position...
			di = drop;
			// Take a random number...
			n = random[randomspawn](0, n-1);
			// And iterate in the array up to the random number chosen.
			while (n > -1 && di != null)
			{
				if (di.Name != 'None')
				{
					int amt = di.Amount;
					if (amt < 0 || mul < 1) amt = 1;
					int scaled = RemapRangeInt(amt, imin, imax, imin, imax * mul);
					n -= scaled;
					if ((di.Next != null) && (n > -1))
						di = di.Next;
					else
						n = -1;
				}
				else
				{
					di = di.Next;
				}
			}
			// So now we can spawn the dropped item.
			if (di == null || bouncecount >= MAX_RANDOMSPAWNERS_RECURSION)	// Prevents infinite recursions
			{
				Spawn("Unknown", Pos, NO_REPLACE);		// Show that there's a problem.
				Destroy();
				return;
			}
			else if (random[randomspawn]() <= di.Probability)	// prob 255 = always spawn, prob 0 = almost never spawn.
			{
				// Handle replacement here so as to get the proper speed and flags for missiles
				Class<Actor> cls = di.Name;
				if (cls != null)
				{
					Class<Actor> rep = GetReplacement(cls);
					if (rep != null)
					{
						cls = rep;
					}
				}
				if (cls != null)
				{
					Species = Name(cls);
					readonly<Actor> defmobj = GetDefaultByType(cls);
					Speed = defmobj.Speed;
					bMissile |= defmobj.bMissile;
					bSeekerMissile |= defmobj.bSeekerMissile;
					bSpectral |= defmobj.bSpectral;
				}
				else
				{
					A_Log(TEXTCOLOR_RED .. "Unknown item class ".. di.Name .." to drop from a random spawner\n");
					Species = 'None';
				}
			}
		}
	}
}

Class L4DItemSpawnerHarder : L4DItemSpawner {}

Class L4DArmorSpawner : RandomSpawner
{
	Default
	{
		+NOTELESTOMP
		+NOTONAUTOMAP
		DropItem "VestArmor", 255, 10;
		DropItem "SmallArmor", 255, 8;
		DropItem "MediumArmor", 255, 4;
		DropItem "HeavyArmor", 255, 1;
	}
}

Class L4DPackageSpawner : RandomSpawner
{
	Default
	{
	//Each one of them have an extreme biasity towards their name.
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "L4DAmmoPack", 255, 28;
	DropItem "L4DHealthPack", 255, 14;
	DropItem "L4DGeneralWeaponSpawner", 255, 12;
	}
}

Class L4DPackageSpawnerMM : RandomSpawner
{
	Default
	{
	//Each one of them have an extreme biasity towards their name.
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "L4DAmmoPackMM", 255, 16;
	DropItem "L4DHealthPackMM", 255, 12;
	DropItem "L4DGeneralWeaponSpawner", 255, 14;
	}
}

Class L4DPackageSpawnerJ : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "L4DAmmoPack", 255, 28;
	DropItem "L4DHealthPack", 255, 14;
	DropItem "L4DJokeWeaponSpawner", 255, 12;
	}
}

Class L4DPackageSpawnerMMJ : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "L4DAmmoPackMM", 255, 16;
	DropItem "L4DHealthPackMM", 255, 12;
	DropItem "L4DJokeWeaponSpawner", 255, 12;
	}
}

Class L4DGeneralWeaponSpawner : RandomSpawner
{
	Default
	{
		+NOTELESTOMP
		+NOTONAUTOMAP
		DropItem "Slot1Weps", 255, 16;
		DropItem "Slot2Weps", 255, 32;
		DropItem "Slot3Weps", 255, 32;
		DropItem "Slot4Weps", 255, 32;
		DropItem "Slot5Weps", 255, 24;
		DropItem "Slot6Weps", 255, 16;
		DropItem "Slot7Weps", 255, 12;
		DropItem "Slot8Weps", 255,  8;
		DropItem "Slot9Weps", 255,  4;
		DropItem "Slot0Weps", 255,  2;
	}
}

Class L4DJokeWeaponSpawner : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "Slot1Weps", 	255, 16;
	DropItem "Slot2WepsJ", 	255, 32;
	DropItem "Slot3Weps", 	255, 32;
	DropItem "Slot4WepsJ", 	255, 32;
	DropItem "Slot5Weps", 	255, 24;
	DropItem "Slot6WepsJ", 	255, 16;
	DropItem "Slot7Weps", 	255, 12;
	DropItem "Slot8WepsJ", 	255, 8;
	DropItem "Slot9WepsJ", 	255, 4;
	DropItem "Slot0Weps", 	255, 2;
	}
}

Class Slot1Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDProxDetonatorItem", 	255, 10;
	DropItem "AEoDTNTItem",				255, 10;
	DropItem "AEoDHandgrenadeItem",		255,5;
	DropItem "AEoDStickyMineItem",		255,5;
	DropItem "AEoDRemoteDetonatorItem",	255,5;
	DropItem "AEoDGlyphItem",			255,2;
	DropItem "AEoDBoneStaffItem",		255,2; //Added as of 6.03PR3. Why? Demon Orb. That is all.
	DropItem "AEoDJackBombItem",		255,1;
	}
}

Class Slot2Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDKatanaItem",			255, 10;
	DropItem "AEoDMedievalAxeItem",		255,8;
	DropItem "AEoDGauntletsItem",		255,8;
	DropItem "AEoDVorpalBladeItem",		255,8;
	DropItem "AEoDScytheItem",			255,8;
	DropItem "AEoDPainkillerItem",		255,4;
	DropItem "AEoDChainsawItem",		255,1;
	DropItem "AEoDStroggArmSawItem",	255,1;
	}
}

Class Slot2WepsJ : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDKatanaItem", 			255, 10;
	DropItem "AEoDMedievalAxeItem", 	255, 8;
	DropItem "AEoDGauntletsItem", 		255, 8;
	DropItem "AEoDVorpalBladeItem", 	255, 8;
	DropItem "AEoDSpyKnifeItem", 		255, 8;
	DropItem "AEoDScytheItem" ,			255, 8;
	DropItem "AEoDPainkillerItem", 		255, 4;
	DropItem "AEoDChainsawItem", 		255, 1;
	DropItem "AEoDStroggArmSawItem", 	255, 1;
	}
}

Class Slot3Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDBerettaItem",			255, 40;
	DropItem "AEoDBlasterItem",			255, 40;
	DropItem "AEoDGargoyleWandItem",	255, 40;
	DropItem "AEoDSPASShotgunItem",		255, 40;
	DropItem "AEoDMac10Item",			255, 40;
	DropItem "AEoDFlaregunItem",		255, 40;
	DropItem "AEoDMP5Item",				255, 20;
	DropItem "AEoDGoldenColtsItem", 	255, 20;
	DropItem "AEoDCrossbowItem", 		255, 20;
	DropItem "AEoDTekbowItem", 			255, 20;
	DropItem "AEODDesertEagleItem",		255, 20;
	DropItem "AEoDAssaultShotgunItem", 	255, 10;
	DropItem "AEoDShellShockerItem", 	255, 5;
	}
}

Class Slot4Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDBloodShotgunItem", 255, 70;
	DropItem "AEoDPKShotgunItem", 	 255, 70;
	DropItem "AEoDBioRifleItem", 	 255, 70;
	DropItem "AEoDCMRifleItem",		 255, 70;
	//DropItem "AEoDC14Item",		 255, 70;
	DropItem "AEoDCrystalGunItem", 	 255, 40;
	DropItem "AEoDVoodooDollItem", 	 255, 40;
	DropItem "AEoDBoltGunItem",		 255, 40;
	DropItem "AEoDCarbineItem",		 255, 40;
	DropItem "AEoDSerpentStaffItem", 255, 40;
	DropItem "AEoDRiotgunItem",		 255, 30;
	DropItem "AEoDDisruptorItem",	 255, 20;
	DropItem "AEoDCombatShotgunItem",255, 20;
	DropItem "AEoDDragonClawItem",	 255, 20;
	DropItem "AEoDShockRifleItem",	 255, 20;
	DropItem "AEoDHeadHunterItem",	 255,5;
	DropItem "AEoDDemonOrbItem",	 255,3;
	DropItem "AEoDAWPItem",			 255,1;
	}
}

Class Slot4WepsJ : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDBloodShotgunItem",  255, 70;
	DropItem "AEoDPKShotgunItem",	 255, 70;
	DropItem "AEoDBioRifleItem", 	 255, 70;
	DropItem "AEoDCMRifleItem", 		 255, 70;
	//DropItem "AEoDC14Item" 			 255, 70;
	DropItem "AEoDCrystalGunItem", 	 255, 40;
	DropItem "AEoDVoodooDollItem", 	 255, 40;
	DropItem "AEoDBoltGunItem",		 255, 40;
	DropItem "AEoDCarbineItem",		 255, 40;
	DropItem "AEoDSerpentStaffItem", 255, 40;
	DropItem "AEoDRiotgunItem",		 255, 30;
	DropItem "AEoDBisonItem",		 255, 20;
	DropItem "AEoDDisruptorItem",	 255, 20;
	DropItem "AEoDCombatShotgunItem", 255, 20;
	DropItem "AEoDDragonClawItem",	 255, 20;
	DropItem "AEoDShockRifleItem",	 255, 20;
	DropItem "AEoDHeadHunterItem",	 255,5;
	DropItem "AEoDDemonOrbItem",	 255,3;
	DropItem "AEoDAWPItem",			 255,1;
	}
}

Class Slot5Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDPlasmaRifleItem",		255, 100;
	DropItem "AEoDFreezethrowerItem",	255, 100;
	DropItem "AEoDHyperBlasterItem",	255, 100;
	DropItem "AEoDMinigunItem",			255, 100;
	DropItem "AEoDIceStormRodItem",		255,80;
	DropItem "AEoDDemonStaffItem",		255,80;
	DropItem "AEoDGaussGunItem",		255,80;
	DropItem "AEoDHornetGunItem",		255,80;
	DropItem "AEoDSkullRodItem",		255,80;
	DropItem "AEoDLasergunItem",		255,50;
	DropItem "AEoDFlamethrowerItem",	255,40;
	DropItem "AEoDPeaceMakerItem",		255,40;
	DropItem "AEoDNailGunItem",			255,40;
	DropItem "AEoDNailgunMK2Item",		255,40;
	DropItem "AEoDWyvernHeartItem",		255, 5;
	}
}

Class Slot6Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDGrenadeLauncherItem",		255, 150;
	DropItem "AEoDRocketLauncherItem",		255, 150;
	DropItem "AEoDMissileLauncherItem",		255, 150;
	DropItem "AEoDPMFLayerItem",			255, 150;
	DropItem "AEoDMeteoriteRodItem",		255, 150;
	DropItem "AEoDFireStormSpellItem",		255,80;
	DropItem "AEoDLightningRodItem",		255,80;
	DropItem "AEoDScreamerItem",			255,80;
	DropItem "AEoDRazorItem",				255,50;
	DropItem "AEoDScarabStaffItem",			255,20;
	DropItem "AEoDHowitzerItem",			255, 5;
	DropItem "AEoDEnlightenmentStaffItem",	255, 5;
	DropItem "AEoDWarAxeItem",				255, 2;
	}
}

Class Slot6WepsJ : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDGrenadeLauncherItem",		255, 150;
	DropItem "AEoDRocketLauncherItem",		255, 150;
	DropItem "AEoDMissileLauncherItem",		255, 150;
	DropItem "AEoDPMFLayerItem",			255, 150;
	DropItem "AEoDMeteoriteRodItem",		255, 150;
	DropItem "AEoDCowManglerItem",			255,80;
	DropItem "AEoDFireStormSpellItem",		255,80;
	DropItem "AEoDLightningRodItem",		255,80;
	DropItem "AEoDScreamerItem",			255,80;
	DropItem "AEoDRazorItem",				255,50;
	DropItem "AEoDScarabStaffItem",			255,20;
	DropItem "AEoDHowitzerItem",			255, 5;
	DropItem "AEoDEnlightenmentStaffItem",	255, 5;
	DropItem "AEoDWarAxeItem",				255, 2;
	}
}

Class Slot7Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDPulsegunItem",			255, 100;
	DropItem "AEoDEidechsenesserItem",		255, 100;
	DropItem "AEoDThunderBoltItem",			255, 100;
	DropItem "AEoDPrismaCannonItem",		255, 100;
	DropItem "AEoDElectroDriverItem",		255, 100;
	DropItem "AEoDTeslaCannonItem",			255, 100;
	DropItem "AEoDSuperShotgunItem",		255, 100;
	DropItem "AEoDIceWandItem",				255,50;
	DropItem "AEoDIncineratorItem",			255,50;
	DropItem "AEoDDevastatorItem",			255,50;
	DropItem "AEoDFragLauncherItem",		255,50;
	DropItem "AEoDRipperGunItem",			255,50;
	DropItem "AEoDConcussionLauncherItem",	255,50;
	DropItem "AEoDPlutoniumCannonItem",		255,50;
	DropItem "AEoDLifeLeechItem",			255,30;
	DropItem "AEoDGuardianHeadItem",		255,30;
	DropItem "AEoDRaptorItem",				255,20;
	DropItem "AEoDHailStormItem",			255,20;
	DropItem "AEoDVulcanCannonItem",		255,20;
	DropItem "AEoDPerforatorItem",			255, 5;
	DropItem "AEoDArbalestItem",			255, 1;
	}
}

Class Slot8Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDMindBlowerItem",		 255, 150;
	DropItem "AEoDStakeGunItem",		 255, 150;
	DropItem "AEoDPulseCannonItem",		 255, 150;
	DropItem "AEoDFlakCannonItem",		 255, 100;
	DropItem "AEoDRailGunItem",			 255, 100;
	DropItem "AEoDBoneShotgunItem",		 255,50;
	DropItem "AEoDPKSMGItem",			 255,50;
	DropItem "AEoDIonCannonItem",		 255,50;
	DropItem "AEoDHEGrenadeLauncherItem",255,50;
	DropItem "AEoDPhalanxItem",			 255,50;
	DropItem "AEoDBoneDusterItem",		 255,50;
	DropItem "AEoDSniperRailgunItem",	 255,50;
	DropItem "AEoDLichStaffItem",		 255,50;
	DropItem "AEoDMorserLauncherItem",	 255,50;
	DropItem "AEoDFlailGunItem",		 255,50;
	DropItem "AEoDDsparilStaffItem",	 255,30;
	DropItem "AEoDDeathRayItem",		 255,30;
	DropItem "AEoDNapalmLauncherItem",	 255,30;
	DropItem "AEoDIncendiaryItem",		 255,30;
	DropItem "AEoDTomeOfSetItem",		 255,20;
	DropItem "AEoDRavenStaffItem",		 255,10;
	DropItem "AEoDShredderStaffItem",	 255,10;
	}
}

Class Slot8WepsJ : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDMindBlowerItem",			255, 150;
	DropItem "AEoDStakeGunItem",			255, 150;
	DropItem "AEoDPulseCannonItem",			255, 150;
	DropItem "AEoDFlakCannonItem",			255, 100;
	DropItem "AEoDRailGunItem",				255, 100;
	DropItem "AEoDGutFlingerItem",			255,80;
	DropItem "AEoDBoneShotgunItem",			255,50;
	DropItem "AEoDPKSMGItem",				255,50;
	DropItem "AEoDIonCannonItem",			255,50;
	DropItem "AEoDHEGrenadeLauncherItem",	255,50;
	DropItem "AEoDPhalanxItem",				255,50;
	DropItem "AEoDBoneDusterItem",			255,50;
	DropItem "AEoDSniperRailgunItem",		255,50;
	DropItem "AEoDLichStaffItem",			255,50;
	DropItem "AEoDMorserLauncherItem",		255,50;
	DropItem "AEoDFlailGunItem",			255,50;
	DropItem "AEoDDsparilStaffItem",		255,30;
	DropItem "AEoDDeathRayItem",			255,30;
	DropItem "AEoDNapalmLauncherItem",		255,30;
	DropItem "AEoDIncendiaryItem",			255,30;
	DropItem "AEoDTomeOfSetItem",			255,20;
	DropItem "AEoDRavenStaffItem",			255,10;
	DropItem "AEoDShredderStaffItem",		255,10;
	}
}

Class Slot9Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDSoulReaverItem",		255, 100;
	DropItem "AEoDRailGunPrototypeItem", 255, 100;
	DropItem "AEoDHERocketLauncherItem", 255, 100;
	DropItem "AEoDPrototypeItem",		255,50;
	DropItem "AEoDNecrossbowItem",		255,50;
	DropItem "AEoDSoulleechItem",		255,50;
	DropItem "AEoDProteusDynamoItem",	255,25;
	DropItem "AEoDPhotonCannonItem",	255,25;
	DropItem "AEoDHellCoreItem",		255,12;
	DropItem "AEoDHellRootItem",		255,12;
	DropItem "AEoDBouncerItem",			255,12;
	DropItem "AEoDWraithVergeItem",		255, 6;
	DropItem "AEoDDrakanItem",			255, 6;
	DropItem "AEoDBloodScourgeItem",	255, 6;
	DropItem "AEoDCrawlerItem",			255, 6;
	DropItem "AEoDGluonGunItem",		255, 6;
	DropItem "AEoDTempestStaffItem",	255, 3;
	}
}

Class Slot9WepsJ : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDSoulReaverItem",		255, 100;
	DropItem "AEoDRailGunPrototypeItem", 255, 100;
	DropItem "AEoDHERocketLauncherItem", 255, 100;
	DropItem "AEoDPopcornGunItem",		255,50;
	DropItem "AEoDPrototypeItem",		255,50;
	DropItem "AEoDNecrossbowItem",		255,50;
	DropItem "AEoDSoulleechItem",		255,50;
	DropItem "AEoDProteusDynamoItem",	255,25;
	DropItem "AEoDPhotonCannonItem",	255,25;
	DropItem "AEoDHellCoreItem",		255,12;
	DropItem "AEoDHellRootItem",		255,12;
	DropItem "AEoDBouncerItem",			255,12;
	DropItem "AEoDWraithVergeItem",		255, 6;
	DropItem "AEoDDrakanItem",			255, 6;
	DropItem "AEoDBloodScourgeItem",	255, 6;
	DropItem "AEoDCrawlerItem",			255, 6;
	DropItem "AEoDGluonGunItem",		255, 6;
	DropItem "AEoDTempestStaffItem",	255, 3;
	}
}

Class Slot0Weps : RandomSpawner
{
	Default
	{
	+NOTELESTOMP
	+NOTONAUTOMAP
	DropItem "AEoDPenetratorItem",		255, 32;
	DropItem "AEoDBFG9000Item",			255, 24;
	DropItem "AEoDRedeemerItem",		255, 16;
	DropItem "AEoDSoulReaperItem",		255,8;
	DropItem "AEoDDarkMatterGunItem",	255,8;
	DropItem "AEoDFusionCannonItem",	255,8;
	DropItem "AEoDQSGItem",				255,8;
	DropItem "AEoDApocalypseItem",		255,2;
	DropItem "AEoDNovaItem",			255,2;
	DropItem "AEoDVolcanoCannonItem",	255,2;
	DropItem "AEoDDarkFlameStaffItem",	255,2;
	DropItem "AEoDInfernoItem",			255,2;
	DropItem "AEoDDeathsHandItem",		255,1;
	DropItem "AEoDHandOfGodItem",		255,1;
	}
}